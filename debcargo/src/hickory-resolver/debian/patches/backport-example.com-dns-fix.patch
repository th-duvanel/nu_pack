Index: hickory-resolver/README.md
===================================================================
--- hickory-resolver.orig/README.md
+++ hickory-resolver/README.md
@@ -40,9 +40,9 @@ let mut response = resolver.lookup_ip("w
 //  this can return IPv4 and/or IPv6 addresses
 let address = response.iter().next().expect("no addresses returned!");
 if address.is_ipv4() {
-    assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+    assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
 } else {
-    assert_eq!(address, IpAddr::V6(Ipv6Addr::new(0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946)));
+    assert_eq!(address, IpAddr::V6(Ipv6Addr::new(0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c)));
 }
 ```
 
@@ -95,7 +95,7 @@ cargo install --bin resolve hickory-util
 $ resolve www.example.com.
 Querying for www.example.com. A from udp:8.8.8.8:53, tcp:8.8.8.8:53, udp:8.8.4.4:53, tcp:8.8.4.4:53, udp:[2001:4860:4860::8888]:53, tcp:[2001:4860:4860::8888]:53, udp:[2001:4860:4860::8844]:53, tcp:[2001:4860:4860::8844]:53
 Success for query name: www.example.com. type: A class: IN
-        www.example.com. 21063 IN A 93.184.216.34
+        www.example.com. 21063 IN A 93.184.215.14
 ```
 
 ## Minimum Rust Version
Index: hickory-resolver/examples/custom_provider.rs
===================================================================
--- hickory-resolver.orig/examples/custom_provider.rs
+++ hickory-resolver/examples/custom_provider.rs
@@ -64,12 +64,12 @@ async fn lookup_test<R: ConnectionProvid
     //  this can return IPv4 and/or IPv6 addresses
     let address = response.iter().next().expect("no addresses returned!");
     if address.is_ipv4() {
-        assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+        assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
     } else {
         assert_eq!(
             address,
             IpAddr::V6(Ipv6Addr::new(
-                0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946
+                0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c
             ))
         );
     }
Index: hickory-resolver/src/async_resolver.rs
===================================================================
--- hickory-resolver.orig/src/async_resolver.rs
+++ hickory-resolver/src/async_resolver.rs
@@ -477,12 +477,12 @@ pub mod testing {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 assert_eq!(
                     address,
                     IpAddr::V6(Ipv6Addr::new(
-                        0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                        0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                     ))
                 );
             }
@@ -504,12 +504,12 @@ pub mod testing {
         );
 
         let response = exec
-            .block_on(resolver.lookup_ip("2606:2800:220:1:248:1893:25c8:1946"))
+            .block_on(resolver.lookup_ip("2606:2800:21f:cb07:6820:80da:af6b:8b2c"))
             .expect("failed to run lookup");
 
         assert_eq!(
             Some(IpAddr::V6(Ipv6Addr::new(
-                0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
             ))),
             response.iter().next()
         );
@@ -542,12 +542,12 @@ pub mod testing {
             );
 
             let response = exec
-                .block_on(resolver.lookup_ip("2606:2800:220:1:248:1893:25c8:1946"))
+                .block_on(resolver.lookup_ip("2606:2800:21f:cb07:6820:80da:af6b:8b2c"))
                 .expect("failed to run lookup");
 
             assert_eq!(
                 Some(IpAddr::V6(Ipv6Addr::new(
-                    0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                    0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                 ))),
                 response.iter().next()
             );
@@ -592,12 +592,12 @@ pub mod testing {
         //assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 assert_eq!(
                     address,
                     IpAddr::V6(Ipv6Addr::new(
-                        0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                        0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                     ))
                 );
             }
@@ -665,12 +665,12 @@ pub mod testing {
         assert_eq!(response.iter().count(), 2);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 assert_eq!(
                     address,
                     IpAddr::V6(Ipv6Addr::new(
-                        0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                        0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                     ))
                 );
             }
@@ -727,7 +727,7 @@ pub mod testing {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 panic!("should only be looking up IPv4");
             }
@@ -763,7 +763,7 @@ pub mod testing {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 panic!("should only be looking up IPv4");
             }
@@ -802,7 +802,7 @@ pub mod testing {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 panic!("should only be looking up IPv4");
             }
@@ -842,7 +842,7 @@ pub mod testing {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 panic!("should only be looking up IPv4");
             }
@@ -881,7 +881,7 @@ pub mod testing {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 panic!("should only be looking up IPv4");
             }
Index: hickory-resolver/src/h2.rs
===================================================================
--- hickory-resolver.orig/src/h2.rs
+++ hickory-resolver/src/h2.rs
@@ -102,12 +102,12 @@ mod tests {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 assert_eq!(
                     address,
                     IpAddr::V6(Ipv6Addr::new(
-                        0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                        0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                     ))
                 );
             }
@@ -121,12 +121,12 @@ mod tests {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 assert_eq!(
                     address,
                     IpAddr::V6(Ipv6Addr::new(
-                        0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                        0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                     ))
                 );
             }
Index: hickory-resolver/src/h3.rs
===================================================================
--- hickory-resolver.orig/src/h3.rs
+++ hickory-resolver/src/h3.rs
@@ -102,12 +102,12 @@ mod tests {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 assert_eq!(
                     address,
                     IpAddr::V6(Ipv6Addr::new(
-                        0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                        0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                     ))
                 );
             }
@@ -121,12 +121,12 @@ mod tests {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 assert_eq!(
                     address,
                     IpAddr::V6(Ipv6Addr::new(
-                        0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                        0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                     ))
                 );
             }
Index: hickory-resolver/src/lib.rs
===================================================================
--- hickory-resolver.orig/src/lib.rs
+++ hickory-resolver/src/lib.rs
@@ -60,9 +60,9 @@
 //! //  this can return IPv4 and/or IPv6 addresses
 //! let address = response.iter().next().expect("no addresses returned!");
 //! if address.is_ipv4() {
-//!     assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+//!     assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
 //! } else {
-//!     assert_eq!(address, IpAddr::V6(Ipv6Addr::new(0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946)));
+//!     assert_eq!(address, IpAddr::V6(Ipv6Addr::new(0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c)));
 //! }
 //! # }
 //! # }
@@ -126,9 +126,9 @@
 //! //  this can return IPv4 and/or IPv6 addresses
 //! let address = response.iter().next().expect("no addresses returned!");
 //! if address.is_ipv4() {
-//!     assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+//!     assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
 //! } else {
-//!     assert_eq!(address, IpAddr::V6(Ipv6Addr::new(0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946)));
+//!     assert_eq!(address, IpAddr::V6(Ipv6Addr::new(0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c)));
 //! }
 //! # }
 //! # }
Index: hickory-resolver/src/name_server/name_server_pool.rs
===================================================================
--- hickory-resolver.orig/src/name_server/name_server_pool.rs
+++ hickory-resolver/src/name_server/name_server_pool.rs
@@ -613,7 +613,7 @@ mod tests {
                 .data()
                 .and_then(RData::as_a)
                 .expect("no a record available"),
-            Ipv4Addr::new(93, 184, 216, 34).into()
+            Ipv4Addr::new(93, 184, 215, 14).into()
         );
 
         assert!(
@@ -637,7 +637,7 @@ mod tests {
                 .data()
                 .and_then(RData::as_aaaa)
                 .expect("no aaaa record available"),
-            Ipv6Addr::new(0x2606, 0x2800, 0x0220, 0x0001, 0x0248, 0x1893, 0x25c8, 0x1946).into()
+            Ipv6Addr::new(0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c).into()
         );
 
         assert!(
Index: hickory-resolver/src/quic.rs
===================================================================
--- hickory-resolver.orig/src/quic.rs
+++ hickory-resolver/src/quic.rs
@@ -106,12 +106,12 @@ mod tests {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 assert_eq!(
                     address,
                     IpAddr::V6(Ipv6Addr::new(
-                        0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                        0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                     ))
                 );
             }
@@ -125,12 +125,12 @@ mod tests {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 assert_eq!(
                     address,
                     IpAddr::V6(Ipv6Addr::new(
-                        0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                        0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                     ))
                 );
             }
Index: hickory-resolver/src/resolver.rs
===================================================================
--- hickory-resolver.orig/src/resolver.rs
+++ hickory-resolver/src/resolver.rs
@@ -181,12 +181,12 @@ mod tests {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 assert_eq!(
                     address,
                     IpAddr::V6(Ipv6Addr::new(
-                        0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                        0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                     ))
                 );
             }
@@ -206,12 +206,12 @@ mod tests {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 assert_eq!(
                     address,
                     IpAddr::V6(Ipv6Addr::new(
-                        0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                        0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                     ))
                 );
             }
Index: hickory-resolver/src/tls/mod.rs
===================================================================
--- hickory-resolver.orig/src/tls/mod.rs
+++ hickory-resolver/src/tls/mod.rs
@@ -56,12 +56,12 @@ mod tests {
         assert_eq!(response.iter().count(), 1);
         for address in response.iter() {
             if address.is_ipv4() {
-                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 216, 34)));
+                assert_eq!(address, IpAddr::V4(Ipv4Addr::new(93, 184, 215, 14)));
             } else {
                 assert_eq!(
                     address,
                     IpAddr::V6(Ipv6Addr::new(
-                        0x2606, 0x2800, 0x220, 0x1, 0x248, 0x1893, 0x25c8, 0x1946,
+                        0x2606, 0x2800, 0x21f, 0xcb07, 0x6820, 0x80da, 0xaf6b, 0x8b2c,
                     ))
                 );
             }
