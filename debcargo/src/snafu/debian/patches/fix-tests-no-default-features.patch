Index: snafu/tests/backtrace-optional-enabled.rs
===================================================================
--- snafu.orig/tests/backtrace-optional-enabled.rs
+++ snafu/tests/backtrace-optional-enabled.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::{prelude::*, Backtrace, ErrorCompat};
 
 #[derive(Debug, Snafu)]
Index: snafu/tests/backtrace-optional.rs
===================================================================
--- snafu.orig/tests/backtrace-optional.rs
+++ snafu/tests/backtrace-optional.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::{prelude::*, Backtrace, ErrorCompat};
 
 #[derive(Debug, Snafu)]
Index: snafu/tests/backtrace.rs
===================================================================
--- snafu.orig/tests/backtrace.rs
+++ snafu/tests/backtrace.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::{prelude::*, Backtrace, ErrorCompat};
 
 type AnotherError = Box<dyn std::error::Error>;
Index: snafu/tests/backtrace_attributes.rs
===================================================================
--- snafu.orig/tests/backtrace_attributes.rs
+++ snafu/tests/backtrace_attributes.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::{prelude::*, Backtrace};
 
 #[derive(Debug, Snafu)]
Index: snafu/tests/basic.rs
===================================================================
--- snafu.orig/tests/basic.rs
+++ snafu/tests/basic.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::prelude::*;
 use std::{
     fs, io,
Index: snafu/tests/boxed_error_trait_object.rs
===================================================================
--- snafu.orig/tests/boxed_error_trait_object.rs
+++ snafu/tests/boxed_error_trait_object.rs
@@ -34,6 +34,7 @@ mod trait_object_send_sync {
     }
 }
 
+#[cfg(feature="std")]
 #[derive(Debug, Snafu)]
 enum Error {
     TraitObject {
@@ -57,6 +58,7 @@ enum Error {
     },
 }
 
+#[cfg(feature="std")]
 fn example() -> Result<(), Error> {
     trait_object::function().context(TraitObjectSnafu { user_id: 42 })?;
     trait_object_send::function().context(TraitObjectSendSnafu { user_id: 42 })?;
@@ -66,6 +68,7 @@ fn example() -> Result<(), Error> {
     Ok(())
 }
 
+#[cfg(feature="std")]
 #[test]
 fn implements_error() {
     fn check<T: std::error::Error>() {}
Index: snafu/tests/build-leaf-error.rs
===================================================================
--- snafu.orig/tests/build-leaf-error.rs
+++ snafu/tests/build-leaf-error.rs
@@ -15,6 +15,7 @@ fn map_result() -> Result<i32> {
     other_result().map_err(|_| MineSnafu.build())
 }
 
+#[cfg(feature="std")]
 #[test]
 fn implements_error() {
     fn check<T: std::error::Error>() {}
Index: snafu/tests/context_selector_name.rs
===================================================================
--- snafu.orig/tests/context_selector_name.rs
+++ snafu/tests/context_selector_name.rs
@@ -23,6 +23,7 @@ fn no_suffix_usage() -> Result<(), Error
     CanOptOutOfSuffix.fail()
 }
 
+#[cfg(feature="std")]
 #[test]
 fn implements_error() {
     fn check<T: std::error::Error>() {}
@@ -57,6 +58,7 @@ mod applied_to_enum {
         GammaCow.fail()
     }
 
+    #[cfg(feature="std")]
     #[test]
     fn implements_error() {
         fn check<T: std::error::Error>() {}
Index: snafu/tests/doc_comment.rs
===================================================================
--- snafu.orig/tests/doc_comment.rs
+++ snafu/tests/doc_comment.rs
@@ -16,6 +16,7 @@ enum Error {
     Hidden,
 }
 
+#[cfg(feature="std")]
 #[test]
 fn implements_error() {
     fn check<T: std::error::Error>() {}
Index: snafu/tests/error_chain.rs
===================================================================
--- snafu.orig/tests/error_chain.rs
+++ snafu/tests/error_chain.rs
@@ -26,6 +26,7 @@ fn assert_eq_debug(a: impl Debug, b: imp
     assert_eq!(format!("{:?}", a), format!("{:?}", b));
 }
 
+#[cfg(feature="std")]
 #[test]
 fn chain_compat_iterates() {
     use snafu::{ChainCompat, IntoError};
@@ -41,6 +42,7 @@ fn chain_compat_iterates() {
     assert_eq_debug(&errors[2], &bottom_error);
 }
 
+#[cfg(feature="std")]
 #[test]
 fn errorcompat_chain_iterates() {
     use snafu::{ErrorCompat, IntoError};
Index: snafu/tests/generics.rs
===================================================================
--- snafu.orig/tests/generics.rs
+++ snafu/tests/generics.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::{prelude::*, Backtrace};
 
 type BoxError = Box<dyn std::error::Error>;
Index: snafu/tests/generics_with_default.rs
===================================================================
--- snafu.orig/tests/generics_with_default.rs
+++ snafu/tests/generics_with_default.rs
@@ -1,3 +1,4 @@
+#[cfg(feature="std")]
 mod default_with_lifetime {
     use snafu::{prelude::*, AsErrorSource};
     use std::fmt::{Debug, Display};
Index: snafu/tests/location.rs
===================================================================
--- snafu.orig/tests/location.rs
+++ snafu/tests/location.rs
@@ -1,3 +1,4 @@
+#![cfg(all(feature="rust_1_46",feature="std"))]
 use snafu::{prelude::*, Location};
 
 mod basics {
@@ -14,8 +15,8 @@ mod basics {
         let one = UsageSnafu.build();
         let two = UsageSnafu.build();
 
-        assert_eq!(one.to_string(), "Created at tests/location.rs:14:30");
-        assert_eq!(two.to_string(), "Created at tests/location.rs:15:30");
+        assert_eq!(one.to_string(), "Created at tests/location.rs:15:30");
+        assert_eq!(two.to_string(), "Created at tests/location.rs:16:30");
     }
 }
 
@@ -60,6 +61,7 @@ mod track_caller {
         location: Location,
     }
 
+    #[cfg(feature="std")]
     #[derive(Debug, Snafu)]
     #[snafu(display("{}", message))]
     #[snafu(whatever)]
@@ -110,6 +112,7 @@ mod track_caller {
         );
     }
 
+    #[cfg(feature="std")]
     #[test]
     fn track_caller_is_applied_on_whatever() {
         let base_line = line!();
Index: snafu/tests/no_context.rs
===================================================================
--- snafu.orig/tests/no_context.rs
+++ snafu/tests/no_context.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::prelude::*;
 
 #[derive(Debug, Snafu)]
Index: snafu/tests/opaque.rs
===================================================================
--- snafu.orig/tests/opaque.rs
+++ snafu/tests/opaque.rs
@@ -13,6 +13,7 @@ mod inner {
         Ok(value)
     }
 
+    #[cfg(feature="std")]
     pub fn boxed_inner(value: i32) -> Result<i32, Box<dyn std::error::Error>> {
         ensure!(value < 1, TooBigSnafu { count: value });
         Ok(value)
@@ -33,6 +34,7 @@ mod inner {
     }
 }
 
+#[cfg(feature="std")]
 #[test]
 fn implements_error() {
     fn check<T: std::error::Error>() {}
@@ -49,6 +51,7 @@ fn ensure_opaque() {
     assert!(e.to_string().contains("too big"));
 }
 
+#[cfg(feature="std")]
 #[test]
 fn ensure_boxed() {
     assert!(inner::boxed_inner(-1).is_ok());
Index: snafu/tests/options.rs
===================================================================
--- snafu.orig/tests/options.rs
+++ snafu/tests/options.rs
@@ -22,6 +22,7 @@ fn example(values: &HashMap<i32, i32>, l
     Ok(l + r)
 }
 
+#[cfg(feature="std")]
 #[test]
 fn implements_error() {
     fn check<T: std::error::Error>() {}
Index: snafu/tests/premade_error.rs
===================================================================
--- snafu.orig/tests/premade_error.rs
+++ snafu/tests/premade_error.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::{prelude::*, Whatever};
 
 type Result<T, E = Whatever> = std::result::Result<T, E>;
Index: snafu/tests/raw_idents.rs
===================================================================
--- snafu.orig/tests/raw_idents.rs
+++ snafu/tests/raw_idents.rs
@@ -13,6 +13,7 @@ enum Error {
 
 type Result<T, E = Error> = std::result::Result<T, E>;
 
+#[cfg(feature="std")]
 #[test]
 fn implements_error() {
     fn check<T: std::error::Error>() {}
Index: snafu/tests/recursive_error.rs
===================================================================
--- snafu.orig/tests/recursive_error.rs
+++ snafu/tests/recursive_error.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::prelude::*;
 
 #[derive(Debug, Snafu)]
Index: snafu/tests/send_between_threads.rs
===================================================================
--- snafu.orig/tests/send_between_threads.rs
+++ snafu/tests/send_between_threads.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 // This test asserts that errors can be used across threads.
 
 use std::thread;
Index: snafu/tests/source_attributes.rs
===================================================================
--- snafu.orig/tests/source_attributes.rs
+++ snafu/tests/source_attributes.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::prelude::*;
 
 #[derive(Debug, Snafu)]
Index: snafu/tests/stringly_typed.rs
===================================================================
--- snafu.orig/tests/stringly_typed.rs
+++ snafu/tests/stringly_typed.rs
@@ -1,6 +1,6 @@
 // TODO: ensure no-std still works
 // THOUGHT: Source must always be an `Option`. This seems to force the `from()`
-
+#![cfg(feature="std")]
 mod message_only {
     use snafu::prelude::*;
 
@@ -205,6 +205,7 @@ mod message_source_and_backtrace {
     }
 }
 
+#[cfg(feature="std")]
 mod struck {
     mod message_source_and_backtrace {
         use snafu::{prelude::*, Backtrace};
Index: snafu/tests/structs/generics.rs
===================================================================
--- snafu.orig/tests/structs/generics.rs
+++ snafu/tests/structs/generics.rs
@@ -29,6 +29,7 @@ mod types {
         assert_eq!(e.key, key);
     }
 
+    #[cfg(feature="std")]
     mod with_defaults {
         use snafu::{prelude::*, AsErrorSource};
         use std::{error::Error as StdError, fmt::Debug, io};
Index: snafu/tests/structs/context_selector_name.rs
===================================================================
--- snafu.orig/tests/structs/context_selector_name.rs
+++ snafu/tests/structs/context_selector_name.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::prelude::*;
 
 #[derive(Debug, Snafu)]
Index: snafu/tests/structs/source_attributes.rs
===================================================================
--- snafu.orig/tests/structs/source_attributes.rs
+++ snafu/tests/structs/source_attributes.rs
@@ -48,6 +48,7 @@ mod enabling {
     }
 }
 
+#[cfg(feature="std")]
 mod transformation {
     use super::*;
     use std::{error::Error as StdError, io};
Index: snafu/tests/structs/with_source.rs
===================================================================
--- snafu.orig/tests/structs/with_source.rs
+++ snafu/tests/structs/with_source.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::prelude::*;
 use std::{
     error::Error as StdError,
Index: snafu/tests/structs/without_source.rs
===================================================================
--- snafu.orig/tests/structs/without_source.rs
+++ snafu/tests/structs/without_source.rs
@@ -1,3 +1,4 @@
+#![cfg(feature="std")]
 use snafu::prelude::*;
 use std::error::Error as StdError;
 
