Index: marmoset/Cargo.lock
===================================================================
--- marmoset.orig/Cargo.lock
+++ marmoset/Cargo.lock
@@ -1,956 +1,1275 @@
 # This file is automatically @generated by Cargo.
 # It is not intended for manual editing.
+version = 3
+
 [[package]]
-name = "ansi_term"
-version = "0.11.0"
+name = "anstream"
+version = "0.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0ca84f3628370c59db74ee214b3263d58f9aadd9b4fe7e711fd87dc452b7f163"
 dependencies = [
- "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "anstyle",
+ "anstyle-parse",
+ "anstyle-query",
+ "anstyle-wincon",
+ "colorchoice",
+ "is-terminal",
+ "utf8parse",
 ]
 
 [[package]]
-name = "arrayref"
-version = "0.3.6"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-
-[[package]]
-name = "arrayvec"
-version = "0.5.1"
+name = "anstyle"
+version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3a30da5c5f2d5e72842e00bcb57657162cdabef0931f40e2deb9b4140440cecd"
 
 [[package]]
-name = "atk"
-version = "0.8.0"
+name = "anstyle-parse"
+version = "0.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "938874ff5980b03a87c5524b3ae5b59cf99b1d6bc836848df7bc5ada9643c333"
 dependencies = [
- "atk-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
+ "utf8parse",
 ]
 
 [[package]]
-name = "atk-sys"
-version = "0.9.1"
+name = "anstyle-query"
+version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5ca11d4be1bab0c8bc8734a9aa7bf4ee8316d462a08c6ac5052f888fef5b494b"
 dependencies = [
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)",
+ "windows-sys",
 ]
 
 [[package]]
-name = "atty"
-version = "0.2.14"
+name = "anstyle-wincon"
+version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "180abfa45703aebe0093f79badacc01b8fd4ea2e35118747e5811127f926e188"
 dependencies = [
- "hermit-abi 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "anstyle",
+ "windows-sys",
 ]
 
 [[package]]
-name = "autocfg"
-version = "1.0.0"
+name = "anyhow"
+version = "1.0.71"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9c7d0618f0e0b7e8ff11427422b64564d5fb0be1940354bfe2e0529b18a9d9b8"
 
 [[package]]
-name = "base64"
-version = "0.11.0"
+name = "atk"
+version = "0.17.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6ba16453d10c712284061a05f6510f75abeb92b56ba88dfeb48c74775020cc22"
+dependencies = [
+ "atk-sys",
+ "bitflags 1.3.2",
+ "glib",
+ "libc",
+]
 
 [[package]]
-name = "bitflags"
-version = "1.2.1"
+name = "atk-sys"
+version = "0.17.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e3bf0a7ca572fbd5762fd8f8cd65a581e06767bc1234913fe1f43e370cff6e90"
+dependencies = [
+ "glib-sys",
+ "gobject-sys",
+ "libc",
+ "system-deps",
+]
 
 [[package]]
-name = "blake2b_simd"
-version = "0.5.10"
+name = "autocfg"
+version = "1.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "arrayref 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "arrayvec 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "constant_time_eq 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)",
-]
+checksum = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa"
 
 [[package]]
-name = "bstr"
-version = "0.2.12"
+name = "bitflags"
+version = "1.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "memchr 2.3.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "regex-automata 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)",
- "serde 1.0.106 (registry+https://github.com/rust-lang/crates.io-index)",
-]
+checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"
 
 [[package]]
-name = "byteorder"
-version = "1.3.4"
+name = "bitflags"
+version = "2.3.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "630be753d4e58660abd17930c71b647fe46c27ea6b63cc59e1e3851406972e42"
 
 [[package]]
 name = "cairo-rs"
-version = "0.8.1"
+version = "0.17.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ab3603c4028a5e368d09b51c8b624b9a46edcd7c3778284077a6125af73c9f0a"
 dependencies = [
- "bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "cairo-sys-rs 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
+ "bitflags 1.3.2",
+ "cairo-sys-rs",
+ "glib",
+ "libc",
+ "once_cell",
+ "thiserror",
 ]
 
 [[package]]
 name = "cairo-sys-rs"
-version = "0.9.2"
+version = "0.17.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "691d0c66b1fb4881be80a760cb8fe76ea97218312f9dfe2c9cc0f496ca279cb1"
 dependencies = [
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)",
+ "glib-sys",
+ "libc",
+ "system-deps",
 ]
 
 [[package]]
 name = "cc"
-version = "1.0.50"
+version = "1.0.79"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f"
+
+[[package]]
+name = "cfg-expr"
+version = "0.15.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "215c0072ecc28f92eeb0eea38ba63ddfcb65c2828c46311d646f1a3ff5f9841c"
+dependencies = [
+ "smallvec",
+ "target-lexicon",
+]
 
 [[package]]
 name = "cfg-if"
-version = "0.1.10"
+version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
 
 [[package]]
 name = "clap"
-version = "2.33.0"
+version = "4.3.12"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3eab9e8ceb9afdade1ab3f0fd8dbce5b1b2f468ad653baf10e771781b2b67b73"
+dependencies = [
+ "clap_builder",
+]
+
+[[package]]
+name = "clap_builder"
+version = "4.3.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9f2763db829349bf00cfc06251268865ed4363b93a943174f638daf3ecdba2cd"
 dependencies = [
- "ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)",
- "bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)",
- "vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "anstream",
+ "anstyle",
+ "clap_lex",
+ "strsim",
 ]
 
 [[package]]
-name = "constant_time_eq"
-version = "0.1.5"
+name = "clap_lex"
+version = "0.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2da6da31387c7e4ef160ffab6d5e7f00c42626fe39aea70a7b0f1773f7dd6c1b"
 
 [[package]]
-name = "crossbeam-deque"
-version = "0.7.3"
+name = "colorchoice"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7"
+
+[[package]]
+name = "crossbeam-channel"
+version = "0.5.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a33c2bf77f2df06183c3aa30d1e96c0695a313d4f9c453cc3762a6db39f99200"
 dependencies = [
- "crossbeam-epoch 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "crossbeam-utils 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "maybe-uninit 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cfg-if",
+ "crossbeam-utils",
 ]
 
 [[package]]
-name = "crossbeam-epoch"
-version = "0.8.2"
+name = "crossbeam-deque"
+version = "0.8.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ce6fd6f855243022dcecf8702fef0c297d4338e226845fe067f6341ad9fa0cef"
 dependencies = [
- "autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "crossbeam-utils 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "maybe-uninit 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "memoffset 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "scopeguard 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cfg-if",
+ "crossbeam-epoch",
+ "crossbeam-utils",
 ]
 
 [[package]]
-name = "crossbeam-queue"
-version = "0.2.1"
+name = "crossbeam-epoch"
+version = "0.9.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ae211234986c545741a7dc064309f67ee1e5ad243d0e48335adc0484d960bcc7"
 dependencies = [
- "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "crossbeam-utils 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "autocfg",
+ "cfg-if",
+ "crossbeam-utils",
+ "memoffset",
+ "scopeguard",
 ]
 
 [[package]]
 name = "crossbeam-utils"
-version = "0.7.2"
+version = "0.8.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5a22b2d63d4d1dc0b7f1b6b2747dd0088008a9be28b6ddf0b1e7d335e3037294"
 dependencies = [
- "autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cfg-if",
 ]
 
 [[package]]
 name = "csv"
-version = "1.1.3"
+version = "1.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "626ae34994d3d8d668f4269922248239db4ae42d538b14c398b74a52208e8086"
 dependencies = [
- "bstr 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)",
- "csv-core 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)",
- "ryu 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "serde 1.0.106 (registry+https://github.com/rust-lang/crates.io-index)",
+ "csv-core",
+ "itoa",
+ "ryu",
+ "serde",
 ]
 
 [[package]]
 name = "csv-core"
 version = "0.1.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2b2466559f260f48ad25fe6317b3c8dac77b5bdb5763ac7d9d6103530663bc90"
 dependencies = [
- "memchr 2.3.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "memchr",
 ]
 
 [[package]]
-name = "dirs"
-version = "1.0.5"
+name = "dirs-next"
+version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1"
 dependencies = [
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "redox_users 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cfg-if",
+ "dirs-sys-next",
 ]
 
 [[package]]
-name = "dtoa"
-version = "0.4.5"
+name = "dirs-sys-next"
+version = "0.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d"
+dependencies = [
+ "libc",
+ "redox_users",
+ "winapi",
+]
 
 [[package]]
 name = "either"
-version = "1.5.3"
+version = "1.8.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91"
 
 [[package]]
 name = "encode_unicode"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "34aa73646ffb006b8f5147f3dc182bd4bcb190227ce861fc4a4844bf8e3cb2c0"
+
+[[package]]
+name = "equivalent"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5"
+
+[[package]]
+name = "errno"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4bcfec3a70f97c962c307b2d2c56e358cf1d00b558d74262b5f929ee8cc7e73a"
+dependencies = [
+ "errno-dragonfly",
+ "libc",
+ "windows-sys",
+]
+
+[[package]]
+name = "errno-dragonfly"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf"
+dependencies = [
+ "cc",
+ "libc",
+]
+
+[[package]]
+name = "field-offset"
 version = "0.3.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "38e2275cc4e4fc009b0669731a1e5ab7ebf11f469eaede2bab9309a5b4d6057f"
+dependencies = [
+ "memoffset",
+ "rustc_version",
+]
 
 [[package]]
 name = "futures-channel"
-version = "0.3.4"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "955518d47e09b25bbebc7a18df10b81f0c766eaf4c4f1cccef2fca5f2a4fb5f2"
 dependencies = [
- "futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
+ "futures-core",
 ]
 
 [[package]]
 name = "futures-core"
-version = "0.3.4"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4bca583b7e26f571124fe5b7561d49cb2868d79116cfa0eefce955557c6fee8c"
 
 [[package]]
 name = "futures-executor"
-version = "0.3.4"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ccecee823288125bd88b4d7f565c9e58e41858e47ab72e8ea2d64e93624386e0"
 dependencies = [
- "futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-task 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
+ "futures-core",
+ "futures-task",
+ "futures-util",
 ]
 
 [[package]]
 name = "futures-io"
-version = "0.3.4"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4fff74096e71ed47f8e023204cfd0aa1289cd54ae5430a9523be060cdb849964"
 
 [[package]]
 name = "futures-macro"
-version = "0.3.4"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "89ca545a94061b6365f2c7355b4b32bd20df3ff95f02da9329b34ccc3bd6ee72"
 dependencies = [
- "proc-macro-hack 0.5.15 (registry+https://github.com/rust-lang/crates.io-index)",
- "proc-macro2 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "quote 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "syn 1.0.17 (registry+https://github.com/rust-lang/crates.io-index)",
+ "proc-macro2",
+ "quote",
+ "syn 2.0.26",
 ]
 
 [[package]]
 name = "futures-task"
-version = "0.3.4"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "76d3d132be6c0e6aa1534069c705a74a5997a356c0dc2f86a47765e5617c5b65"
 
 [[package]]
 name = "futures-util"
-version = "0.3.4"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "26b01e40b772d54cf6c6d721c1d1abd0647a0106a12ecaa1c186273392a69533"
 dependencies = [
- "futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-macro 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-task 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "proc-macro-hack 0.5.15 (registry+https://github.com/rust-lang/crates.io-index)",
- "proc-macro-nested 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "futures-core",
+ "futures-macro",
+ "futures-task",
+ "pin-project-lite",
+ "pin-utils",
+ "slab",
 ]
 
 [[package]]
 name = "gdk"
-version = "0.12.1"
+version = "0.17.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "be1df5ea52cccd7e3a0897338b5564968274b52f5fd12601e0afa44f454c74d3"
 dependencies = [
- "bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "cairo-rs 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "cairo-sys-rs 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "gdk-pixbuf 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "gdk-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gio 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gio-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "pango 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "bitflags 1.3.2",
+ "cairo-rs",
+ "gdk-pixbuf",
+ "gdk-sys",
+ "gio",
+ "glib",
+ "libc",
+ "pango",
 ]
 
 [[package]]
 name = "gdk-pixbuf"
-version = "0.8.0"
+version = "0.17.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "695d6bc846438c5708b07007537b9274d883373dd30858ca881d7d71b5540717"
 dependencies = [
- "gdk-pixbuf-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gio 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gio-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
+ "bitflags 1.3.2",
+ "gdk-pixbuf-sys",
+ "gio",
+ "glib",
+ "libc",
+ "once_cell",
 ]
 
 [[package]]
 name = "gdk-pixbuf-sys"
-version = "0.9.1"
+version = "0.17.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9285ec3c113c66d7d0ab5676599176f1f42f4944ca1b581852215bf5694870cb"
 dependencies = [
- "gio-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)",
+ "gio-sys",
+ "glib-sys",
+ "gobject-sys",
+ "libc",
+ "system-deps",
 ]
 
 [[package]]
 name = "gdk-sys"
-version = "0.9.1"
+version = "0.17.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2152de9d38bc67a17b3fe49dc0823af5bf874df59ea088c5f28f31cf103de703"
 dependencies = [
- "cairo-sys-rs 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "gdk-pixbuf-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gio-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "pango-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cairo-sys-rs",
+ "gdk-pixbuf-sys",
+ "gio-sys",
+ "glib-sys",
+ "gobject-sys",
+ "libc",
+ "pango-sys",
+ "pkg-config",
+ "system-deps",
 ]
 
 [[package]]
 name = "getrandom"
-version = "0.1.14"
+version = "0.2.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "be4136b2a15dd319360be1c07d9933517ccf0be8f16bf62a3bee4f0d618df427"
 dependencies = [
- "cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "wasi 0.9.0+wasi-snapshot-preview1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cfg-if",
+ "libc",
+ "wasi",
 ]
 
 [[package]]
 name = "gio"
-version = "0.8.1"
+version = "0.17.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a6973e92937cf98689b6a054a9e56c657ed4ff76de925e36fc331a15f0c5d30a"
 dependencies = [
- "bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-channel 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-io 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "gio-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
+ "bitflags 1.3.2",
+ "futures-channel",
+ "futures-core",
+ "futures-io",
+ "futures-util",
+ "gio-sys",
+ "glib",
+ "libc",
+ "once_cell",
+ "pin-project-lite",
+ "smallvec",
+ "thiserror",
 ]
 
 [[package]]
 name = "gio-sys"
-version = "0.9.1"
+version = "0.17.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0ccf87c30a12c469b6d958950f6a9c09f2be20b7773f7e70d20b867fdf2628c3"
 dependencies = [
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)",
+ "glib-sys",
+ "gobject-sys",
+ "libc",
+ "system-deps",
+ "winapi",
 ]
 
 [[package]]
 name = "glib"
-version = "0.9.3"
+version = "0.17.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d3fad45ba8d4d2cea612b432717e834f48031cd8853c8aaf43b2c79fec8d144b"
 dependencies = [
- "bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-channel 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-executor 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-task 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
+ "bitflags 1.3.2",
+ "futures-channel",
+ "futures-core",
+ "futures-executor",
+ "futures-task",
+ "futures-util",
+ "gio-sys",
+ "glib-macros",
+ "glib-sys",
+ "gobject-sys",
+ "libc",
+ "memchr",
+ "once_cell",
+ "smallvec",
+ "thiserror",
+]
+
+[[package]]
+name = "glib-macros"
+version = "0.17.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "eca5c79337338391f1ab8058d6698125034ce8ef31b72a442437fa6c8580de26"
+dependencies = [
+ "anyhow",
+ "heck",
+ "proc-macro-crate",
+ "proc-macro-error",
+ "proc-macro2",
+ "quote",
+ "syn 1.0.109",
 ]
 
 [[package]]
 name = "glib-sys"
-version = "0.9.1"
+version = "0.17.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d80aa6ea7bba0baac79222204aa786a6293078c210abe69ef1336911d4bdc4f0"
 dependencies = [
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc",
+ "system-deps",
 ]
 
 [[package]]
 name = "gobject-sys"
-version = "0.9.1"
+version = "0.17.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cd34c3317740a6358ec04572c1bcfd3ac0b5b6529275fae255b237b314bb8062"
 dependencies = [
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)",
+ "glib-sys",
+ "libc",
+ "system-deps",
 ]
 
 [[package]]
 name = "gtk"
-version = "0.8.1"
+version = "0.17.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b6c4222ab92b08d4d0bab90ddb6185b4e575ceeea8b8cdf00b938d7b6661d966"
 dependencies = [
- "atk 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "cairo-rs 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "cairo-sys-rs 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)",
- "gdk 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gdk-pixbuf 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "gdk-pixbuf-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gdk-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gio 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gio-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gtk-sys 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "pango 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "pango-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "atk",
+ "bitflags 1.3.2",
+ "cairo-rs",
+ "field-offset",
+ "futures-channel",
+ "gdk",
+ "gdk-pixbuf",
+ "gio",
+ "glib",
+ "gtk-sys",
+ "gtk3-macros",
+ "libc",
+ "once_cell",
+ "pango",
+ "pkg-config",
 ]
 
 [[package]]
 name = "gtk-sys"
-version = "0.9.2"
+version = "0.17.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4d8eb6a4b93e5a7e6980f7348d08c1cd93d31fae07cf97f20678c5ec41de3d7e"
+dependencies = [
+ "atk-sys",
+ "cairo-sys-rs",
+ "gdk-pixbuf-sys",
+ "gdk-sys",
+ "gio-sys",
+ "glib-sys",
+ "gobject-sys",
+ "libc",
+ "pango-sys",
+ "system-deps",
+]
+
+[[package]]
+name = "gtk3-macros"
+version = "0.17.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3efb84d682c9a39c10bd9f24f5a4b9c15cc8c7edc45c19cb2ca2c4fc38b2d95e"
 dependencies = [
- "atk-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "cairo-sys-rs 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "gdk-pixbuf-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gdk-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gio-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "pango-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)",
+ "anyhow",
+ "proc-macro-crate",
+ "proc-macro-error",
+ "proc-macro2",
+ "quote",
+ "syn 1.0.109",
 ]
 
 [[package]]
+name = "hashbrown"
+version = "0.14.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2c6201b9ff9fd90a5a3bac2e56a830d0caa509576f0e503818ee82c181b3437a"
+
+[[package]]
+name = "heck"
+version = "0.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8"
+
+[[package]]
 name = "hermit-abi"
-version = "0.1.10"
+version = "0.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "443144c8cdadd93ebf52ddb4056d257f5b52c04d3c804e657d19eb73fc33668b"
+
+[[package]]
+name = "indexmap"
+version = "2.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d5477fe2230a79769d8dc68e0eabf5437907c0457a5614a9e8dddb67f65eb65d"
+dependencies = [
+ "equivalent",
+ "hashbrown",
+]
+
+[[package]]
+name = "is-terminal"
+version = "0.4.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cb0889898416213fab133e1d33a0e5858a48177452750691bde3666d0fdbaf8b"
 dependencies = [
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
+ "hermit-abi",
+ "rustix",
+ "windows-sys",
 ]
 
 [[package]]
 name = "itoa"
-version = "0.4.5"
+version = "1.0.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "62b02a5381cc465bd3041d84623d0fa3b66738b52b8e2fc3bab8ad63ab032f4a"
 
 [[package]]
 name = "lazy_static"
 version = "1.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"
 
 [[package]]
 name = "libc"
-version = "0.2.68"
+version = "0.2.147"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b4668fb0ea861c1df094127ac5f1da3409a82116a4ba74fca2e58ef927159bb3"
 
 [[package]]
-name = "linked-hash-map"
-version = "0.5.2"
+name = "linux-raw-sys"
+version = "0.4.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09fc20d2ca12cb9f044c93e3bd6d32d523e6e2ec3db4f7b2939cd99026ecd3f0"
 
 [[package]]
 name = "marmoset"
 version = "0.9.4"
 dependencies = [
- "cairo-rs 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "gdk 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gdk-pixbuf 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "gio 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "gtk 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)",
- "num_cpus 1.12.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "rayon 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "serde 1.0.106 (registry+https://github.com/rust-lang/crates.io-index)",
- "serde_derive 1.0.106 (registry+https://github.com/rust-lang/crates.io-index)",
- "serde_yaml 0.8.11 (registry+https://github.com/rust-lang/crates.io-index)",
- "time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cairo-rs",
+ "clap",
+ "gdk",
+ "gdk-pixbuf",
+ "gio",
+ "glib",
+ "gtk",
+ "num-traits",
+ "num_cpus",
+ "prettytable-rs",
+ "rand",
+ "rayon",
+ "serde",
+ "serde_derive",
+ "serde_yaml",
+ "time",
 ]
 
 [[package]]
-name = "maybe-uninit"
-version = "2.0.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-
-[[package]]
 name = "memchr"
-version = "2.3.3"
+version = "2.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d"
 
 [[package]]
 name = "memoffset"
-version = "0.5.4"
+version = "0.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5a634b1c61a95585bd15607c6ab0c4e5b226e695ff2800ba0cdccddf208c406c"
 dependencies = [
- "autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "autocfg",
 ]
 
 [[package]]
 name = "num-traits"
-version = "0.2.11"
+version = "0.2.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd"
 dependencies = [
- "autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "autocfg",
 ]
 
 [[package]]
 name = "num_cpus"
-version = "1.12.0"
+version = "1.16.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43"
 dependencies = [
- "hermit-abi 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
+ "hermit-abi",
+ "libc",
 ]
 
 [[package]]
+name = "once_cell"
+version = "1.18.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dd8b5dd2ae5ed71462c540258bedcb51965123ad7e7ccf4b9a8cafaa4a63576d"
+
+[[package]]
 name = "pango"
-version = "0.8.0"
+version = "0.17.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "35be456fc620e61f62dff7ff70fbd54dcbaf0a4b920c0f16de1107c47d921d48"
 dependencies = [
- "bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "pango-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "bitflags 1.3.2",
+ "gio",
+ "glib",
+ "libc",
+ "once_cell",
+ "pango-sys",
 ]
 
 [[package]]
 name = "pango-sys"
-version = "0.9.1"
+version = "0.17.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3da69f9f3850b0d8990d462f8c709561975e95f689c1cdf0fecdebde78b35195"
 dependencies = [
- "glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)",
+ "glib-sys",
+ "gobject-sys",
+ "libc",
+ "system-deps",
 ]
 
 [[package]]
+name = "pin-project-lite"
+version = "0.2.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4c40d25201921e5ff0c862a505c6557ea88568a4e3ace775ab55e93f2f4f9d57"
+
+[[package]]
 name = "pin-utils"
-version = "0.1.0-alpha.4"
+version = "0.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"
 
 [[package]]
 name = "pkg-config"
-version = "0.3.17"
+version = "0.3.27"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "26072860ba924cbfa98ea39c8c19b4dd6a4a25423dbdf219c1eca91aa0cf6964"
 
 [[package]]
 name = "ppv-lite86"
-version = "0.2.6"
+version = "0.2.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de"
 
 [[package]]
 name = "prettytable-rs"
-version = "0.8.0"
+version = "0.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "eea25e07510aa6ab6547308ebe3c036016d162b8da920dbb079e3ba8acf3d95a"
 dependencies = [
- "atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)",
- "csv 1.1.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)",
+ "csv",
+ "encode_unicode",
+ "is-terminal",
+ "lazy_static",
+ "term",
+ "unicode-width",
 ]
 
 [[package]]
-name = "proc-macro-hack"
-version = "0.5.15"
+name = "proc-macro-crate"
+version = "1.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919"
+dependencies = [
+ "once_cell",
+ "toml_edit",
+]
 
 [[package]]
-name = "proc-macro-nested"
-version = "0.1.4"
+name = "proc-macro-error"
+version = "1.0.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c"
+dependencies = [
+ "proc-macro-error-attr",
+ "proc-macro2",
+ "quote",
+ "syn 1.0.109",
+ "version_check",
+]
 
 [[package]]
-name = "proc-macro2"
-version = "1.0.10"
+name = "proc-macro-error-attr"
+version = "1.0.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869"
 dependencies = [
- "unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "proc-macro2",
+ "quote",
+ "version_check",
 ]
 
 [[package]]
-name = "quote"
-version = "1.0.3"
+name = "proc-macro2"
+version = "1.0.64"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "78803b62cbf1f46fde80d7c0e803111524b9877184cfe7c3033659490ac7a7da"
 dependencies = [
- "proc-macro2 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)",
+ "unicode-ident",
 ]
 
 [[package]]
-name = "rand"
-version = "0.7.3"
+name = "quote"
+version = "1.0.29"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "573015e8ab27661678357f27dc26460738fd2b6c86e46f386fde94cb5d913105"
 dependencies = [
- "getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "rand_chacha 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "proc-macro2",
 ]
 
 [[package]]
-name = "rand_chacha"
-version = "0.2.2"
+name = "rand"
+version = "0.8.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"
 dependencies = [
- "ppv-lite86 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc",
+ "rand_chacha",
+ "rand_core",
 ]
 
 [[package]]
-name = "rand_core"
-version = "0.5.1"
+name = "rand_chacha"
+version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"
 dependencies = [
- "getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)",
+ "ppv-lite86",
+ "rand_core",
 ]
 
 [[package]]
-name = "rand_hc"
-version = "0.2.0"
+name = "rand_core"
+version = "0.6.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"
 dependencies = [
- "rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "getrandom",
 ]
 
 [[package]]
 name = "rayon"
-version = "1.3.0"
+version = "1.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1d2df5196e37bcc87abebc0053e20787d73847bb33134a69841207dd0a47f03b"
 dependencies = [
- "crossbeam-deque 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "rayon-core 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "either",
+ "rayon-core",
 ]
 
 [[package]]
 name = "rayon-core"
-version = "1.7.0"
+version = "1.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4b8f95bd6966f5c87776639160a66bd8ab9895d9d4ab01ddba9fc60661aebe8d"
 dependencies = [
- "crossbeam-deque 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "crossbeam-queue 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "crossbeam-utils 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "num_cpus 1.12.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "crossbeam-channel",
+ "crossbeam-deque",
+ "crossbeam-utils",
+ "num_cpus",
 ]
 
 [[package]]
 name = "redox_syscall"
-version = "0.1.56"
+version = "0.2.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a"
+dependencies = [
+ "bitflags 1.3.2",
+]
 
 [[package]]
 name = "redox_users"
-version = "0.3.4"
+version = "0.4.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b"
 dependencies = [
- "getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)",
- "redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)",
- "rust-argon2 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "getrandom",
+ "redox_syscall",
+ "thiserror",
 ]
 
 [[package]]
-name = "regex-automata"
-version = "0.1.9"
+name = "rustc_version"
+version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366"
 dependencies = [
- "byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
+ "semver",
 ]
 
 [[package]]
-name = "rust-argon2"
-version = "0.7.0"
+name = "rustix"
+version = "0.38.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0a962918ea88d644592894bc6dc55acc6c0956488adcebbfb6e273506b7fd6e5"
 dependencies = [
- "base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "blake2b_simd 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "constant_time_eq 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)",
- "crossbeam-utils 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "bitflags 2.3.3",
+ "errno",
+ "libc",
+ "linux-raw-sys",
+ "windows-sys",
 ]
 
 [[package]]
+name = "rustversion"
+version = "1.0.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dc31bd9b61a32c31f9650d18add92aa83a49ba979c143eefd27fe7177b05bd5f"
+
+[[package]]
 name = "ryu"
-version = "1.0.3"
+version = "1.0.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fe232bdf6be8c8de797b22184ee71118d63780ea42ac85b61d1baa6d3b782ae9"
 
 [[package]]
 name = "scopeguard"
 version = "1.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"
+
+[[package]]
+name = "semver"
+version = "1.0.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed"
 
 [[package]]
 name = "serde"
-version = "1.0.106"
+version = "1.0.171"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "30e27d1e4fd7659406c492fd6cfaf2066ba8773de45ca75e855590f856dc34a9"
 
 [[package]]
 name = "serde_derive"
-version = "1.0.106"
+version = "1.0.171"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "389894603bd18c46fa56231694f8d827779c0951a667087194cf9de94ed24682"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.26",
+]
+
+[[package]]
+name = "serde_spanned"
+version = "0.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "96426c9936fd7a0124915f9185ea1d20aa9445cc9821142f0a73bc9207a2e186"
 dependencies = [
- "proc-macro2 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "quote 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "syn 1.0.17 (registry+https://github.com/rust-lang/crates.io-index)",
+ "serde",
 ]
 
 [[package]]
 name = "serde_yaml"
-version = "0.8.11"
+version = "0.9.22"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "452e67b9c20c37fa79df53201dc03839651086ed9bbe92b3ca585ca9fdaa7d85"
 dependencies = [
- "dtoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)",
- "linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "serde 1.0.106 (registry+https://github.com/rust-lang/crates.io-index)",
- "yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "indexmap",
+ "itoa",
+ "ryu",
+ "serde",
+ "unsafe-libyaml",
 ]
 
 [[package]]
 name = "slab"
-version = "0.4.2"
+version = "0.4.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6528351c9bc8ab22353f9d776db39a20288e8d6c37ef8cfe3317cf875eecfc2d"
+dependencies = [
+ "autocfg",
+]
+
+[[package]]
+name = "smallvec"
+version = "1.11.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "62bb4feee49fdd9f707ef802e22365a35de4b7b299de4763d44bfea899442ff9"
 
 [[package]]
 name = "strsim"
-version = "0.8.0"
+version = "0.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"
 
 [[package]]
 name = "syn"
-version = "1.0.17"
+version = "1.0.109"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "unicode-ident",
+]
+
+[[package]]
+name = "syn"
+version = "2.0.26"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "45c3457aacde3c65315de5031ec191ce46604304d2446e803d71ade03308d970"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "unicode-ident",
+]
+
+[[package]]
+name = "system-deps"
+version = "6.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "30c2de8a4d8f4b823d634affc9cd2a74ec98c53a756f317e529a48046cbf71f3"
 dependencies = [
- "proc-macro2 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)",
- "quote 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cfg-expr",
+ "heck",
+ "pkg-config",
+ "toml",
+ "version-compare",
 ]
 
 [[package]]
+name = "target-lexicon"
+version = "0.12.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "df8e77cb757a61f51b947ec4a7e3646efd825b73561db1c232a8ccb639e611a0"
+
+[[package]]
 name = "term"
-version = "0.5.2"
+version = "0.7.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c59df8ac95d96ff9bede18eb7300b0fda5e5d8d90960e76f8e14ae765eedbf1f"
+dependencies = [
+ "dirs-next",
+ "rustversion",
+ "winapi",
+]
+
+[[package]]
+name = "thiserror"
+version = "1.0.43"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a35fc5b8971143ca348fa6df4f024d4d55264f3468c71ad1c2f365b0a4d58c42"
 dependencies = [
- "byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
- "dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "thiserror-impl",
 ]
 
 [[package]]
-name = "textwrap"
-version = "0.11.0"
+name = "thiserror-impl"
+version = "1.0.43"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "463fe12d7993d3b327787537ce8dd4dfa058de32fc2b195ef3cde03dc4771e8f"
 dependencies = [
- "unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)",
+ "proc-macro2",
+ "quote",
+ "syn 2.0.26",
 ]
 
 [[package]]
 name = "time"
-version = "0.1.42"
+version = "0.3.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "59e399c068f43a5d116fedaf73b203fa4f9c519f17e2b34f63221d3792f81446"
 dependencies = [
- "libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)",
- "redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "serde",
+ "time-core",
 ]
 
 [[package]]
+name = "time-core"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7300fbefb4dadc1af235a9cef3737cea692a9d97e1b9cbcd4ebdae6f8868e6fb"
+
+[[package]]
+name = "toml"
+version = "0.7.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c17e963a819c331dcacd7ab957d80bc2b9a9c1e71c804826d2f283dd65306542"
+dependencies = [
+ "serde",
+ "serde_spanned",
+ "toml_datetime",
+ "toml_edit",
+]
+
+[[package]]
+name = "toml_datetime"
+version = "0.6.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7cda73e2f1397b1262d6dfdcef8aafae14d1de7748d66822d3bfeeb6d03e5e4b"
+dependencies = [
+ "serde",
+]
+
+[[package]]
+name = "toml_edit"
+version = "0.19.14"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f8123f27e969974a3dfba720fdb560be359f57b44302d280ba72e76a74480e8a"
+dependencies = [
+ "indexmap",
+ "serde",
+ "serde_spanned",
+ "toml_datetime",
+ "winnow",
+]
+
+[[package]]
+name = "unicode-ident"
+version = "1.0.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "301abaae475aa91687eb82514b328ab47a211a533026cb25fc3e519b86adfc3c"
+
+[[package]]
 name = "unicode-width"
-version = "0.1.7"
+version = "0.1.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b"
+
+[[package]]
+name = "unsafe-libyaml"
+version = "0.2.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1865806a559042e51ab5414598446a5871b561d21b6764f2eabb0dd481d880a6"
+
+[[package]]
+name = "utf8parse"
+version = "0.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a"
 
 [[package]]
-name = "unicode-xid"
-version = "0.2.0"
+name = "version-compare"
+version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "579a42fc0b8e0c63b76519a339be31bed574929511fa53c1a3acae26eb258f29"
 
 [[package]]
-name = "vec_map"
-version = "0.8.1"
+name = "version_check"
+version = "0.9.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"
 
 [[package]]
 name = "wasi"
-version = "0.9.0+wasi-snapshot-preview1"
+version = "0.11.0+wasi-snapshot-preview1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"
 
 [[package]]
 name = "winapi"
-version = "0.3.8"
+version = "0.3.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
 dependencies = [
- "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi-i686-pc-windows-gnu",
+ "winapi-x86_64-pc-windows-gnu",
 ]
 
 [[package]]
 name = "winapi-i686-pc-windows-gnu"
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"
 
 [[package]]
 name = "winapi-x86_64-pc-windows-gnu"
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
 
 [[package]]
-name = "yaml-rust"
-version = "0.4.3"
+name = "windows-sys"
+version = "0.48.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
+dependencies = [
+ "windows-targets",
+]
+
+[[package]]
+name = "windows-targets"
+version = "0.48.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "05d4b17490f70499f20b9e791dcf6a299785ce8af4d709018206dc5b4953e95f"
 dependencies = [
- "linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "windows_aarch64_gnullvm",
+ "windows_aarch64_msvc",
+ "windows_i686_gnu",
+ "windows_i686_msvc",
+ "windows_x86_64_gnu",
+ "windows_x86_64_gnullvm",
+ "windows_x86_64_msvc",
 ]
 
-[metadata]
-"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)" = "ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b"
-"checksum arrayref 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)" = "a4c527152e37cf757a3f78aae5a06fbeefdb07ccc535c980a3208ee3060dd544"
-"checksum arrayvec 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)" = "cff77d8686867eceff3105329d4698d96c2391c176d5d03adc90c7389162b5b8"
-"checksum atk 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)" = "444daefa55f229af145ea58d77efd23725024ee1f6f3102743709aa6b18c663e"
-"checksum atk-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)" = "e552c1776737a4c80110d06b36d099f47c727335f9aaa5d942a72b6863a8ec6f"
-"checksum atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)" = "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8"
-"checksum autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)" = "f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d"
-"checksum base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)" = "b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7"
-"checksum bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)" = "cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693"
-"checksum blake2b_simd 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)" = "d8fb2d74254a3a0b5cac33ac9f8ed0e44aa50378d9dbb2e5d83bd21ed1dc2c8a"
-"checksum bstr 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)" = "2889e6d50f394968c8bf4240dc3f2a7eb4680844d27308f798229ac9d4725f41"
-"checksum byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de"
-"checksum cairo-rs 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)" = "157049ba9618aa3a61c39d5d785102c04d3b1f40632a706c621a9aedc21e6084"
-"checksum cairo-sys-rs 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)" = "ff65ba02cac715be836f63429ab00a767d48336efc5497c5637afb53b4f14d63"
-"checksum cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)" = "95e28fa049fda1c330bcf9d723be7663a899c4679724b34c81e9f5a326aab8cd"
-"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)" = "4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822"
-"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)" = "5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9"
-"checksum constant_time_eq 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)" = "245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc"
-"checksum crossbeam-deque 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)" = "9f02af974daeee82218205558e51ec8768b48cf524bd01d550abe5573a608285"
-"checksum crossbeam-epoch 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)" = "058ed274caafc1f60c4997b5fc07bf7dc7cca454af7c6e81edffe5f33f70dace"
-"checksum crossbeam-queue 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)" = "c695eeca1e7173472a32221542ae469b3e9aac3a4fc81f7696bcad82029493db"
-"checksum crossbeam-utils 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)" = "c3c7c73a2d1e9fc0886a08b93e98eb643461230d5f1925e4036204d5f2e261a8"
-"checksum csv 1.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "00affe7f6ab566df61b4be3ce8cf16bc2576bca0963ceb0955e45d514bf9a279"
-"checksum csv-core 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)" = "2b2466559f260f48ad25fe6317b3c8dac77b5bdb5763ac7d9d6103530663bc90"
-"checksum dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)" = "3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901"
-"checksum dtoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)" = "4358a9e11b9a09cf52383b451b49a169e8d797b68aa02301ff586d70d9661ea3"
-"checksum either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)" = "bb1f6b1ce1c140482ea30ddd3335fc0024ac7ee112895426e0a629a6c20adfe3"
-"checksum encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)" = "a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f"
-"checksum futures-channel 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "f0c77d04ce8edd9cb903932b608268b3fffec4163dc053b3b402bf47eac1f1a8"
-"checksum futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "f25592f769825e89b92358db00d26f965761e094951ac44d3663ef25b7ac464a"
-"checksum futures-executor 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "f674f3e1bcb15b37284a90cedf55afdba482ab061c407a9c0ebbd0f3109741ba"
-"checksum futures-io 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "a638959aa96152c7a4cddf50fcb1e3fede0583b27157c26e67d6f99904090dc6"
-"checksum futures-macro 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "9a5081aa3de1f7542a794a397cde100ed903b0630152d0973479018fd85423a7"
-"checksum futures-task 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "7b0a34e53cf6cdcd0178aa573aed466b646eb3db769570841fda0c7ede375a27"
-"checksum futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "22766cf25d64306bedf0384da004d05c9974ab104fcc4528f1236181c18004c5"
-"checksum gdk 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)" = "fbe5e8772fc0865c52460cdd7a59d7d47700f44d9809d1dd00eecceb769a7589"
-"checksum gdk-pixbuf 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)" = "e248220c46b329b097d4b158d2717f8c688f16dd76d0399ace82b3e98062bdd7"
-"checksum gdk-pixbuf-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)" = "d8991b060a9e9161bafd09bf4a202e6fd404f5b4dd1a08d53a1e84256fb34ab0"
-"checksum gdk-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)" = "6adf679e91d1bff0c06860287f80403e7db54c2d2424dce0a470023b56c88fbb"
-"checksum getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)" = "7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb"
-"checksum gio 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)" = "0cd10f9415cce39b53f8024bf39a21f84f8157afa52da53837b102e585a296a5"
-"checksum gio-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)" = "4fad225242b9eae7ec8a063bb86974aca56885014672375e5775dc0ea3533911"
-"checksum glib 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)" = "40fb573a09841b6386ddf15fd4bc6655b4f5b106ca962f57ecaecde32a0061c0"
-"checksum glib-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)" = "95856f3802f446c05feffa5e24859fe6a183a7cb849c8449afc35c86b1e316e2"
-"checksum gobject-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)" = "31d1a804f62034eccf370006ccaef3708a71c31d561fee88564abe71177553d9"
-"checksum gtk 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)" = "87e1e8d70290239c668594002d1b174fcc7d7ef5d26670ee141490ede8facf8f"
-"checksum gtk-sys 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)" = "53def660c7b48b00b510c81ef2d2fbd3c570f1527081d8d7947f471513e1a4c1"
-"checksum hermit-abi 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)" = "725cf19794cf90aa94e65050cb4191ff5d8fa87a498383774c47b332e3af952e"
-"checksum itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)" = "b8b7a7c0c47db5545ed3fef7468ee7bb5b74691498139e4b3f6a20685dc6dd8e"
-"checksum lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"
-"checksum libc 0.2.68 (registry+https://github.com/rust-lang/crates.io-index)" = "dea0c0405123bba743ee3f91f49b1c7cfb684eef0da0a50110f758ccf24cdff0"
-"checksum linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)" = "ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83"
-"checksum maybe-uninit 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)" = "60302e4db3a61da70c0cb7991976248362f30319e88850c487b9b95bbf059e00"
-"checksum memchr 2.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "3728d817d99e5ac407411fa471ff9800a778d88a24685968b36824eaf4bee400"
-"checksum memoffset 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)" = "b4fc2c02a7e374099d4ee95a193111f72d2110197fe200272371758f6c3643d8"
-"checksum num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)" = "c62be47e61d1842b9170f0fdeec8eba98e60e90e5446449a0545e5152acd7096"
-"checksum num_cpus 1.12.0 (registry+https://github.com/rust-lang/crates.io-index)" = "46203554f085ff89c235cd12f7075f3233af9b11ed7c9e16dfe2560d03313ce6"
-"checksum pango 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)" = "1e9c6b728f1be8edb5f9f981420b651d5ea30bdb9de89f1f1262d0084a020577"
-"checksum pango-sys 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)" = "86b93d84907b3cf0819bff8f13598ba72843bee579d5ebc2502e4b0367b4be7d"
-"checksum pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)" = "5894c618ce612a3fa23881b152b608bafb8c56cfc22f434a3ba3120b40f7b587"
-"checksum pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)" = "05da548ad6865900e60eaba7f589cc0783590a92e940c26953ff81ddbab2d677"
-"checksum ppv-lite86 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)" = "74490b50b9fbe561ac330df47c08f3f33073d2d00c150f719147d7c54522fa1b"
-"checksum prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)" = "0fd04b170004fa2daccf418a7f8253aaf033c27760b5f225889024cf66d7ac2e"
-"checksum proc-macro-hack 0.5.15 (registry+https://github.com/rust-lang/crates.io-index)" = "0d659fe7c6d27f25e9d80a1a094c223f5246f6a6596453e09d7229bf42750b63"
-"checksum proc-macro-nested 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)" = "8e946095f9d3ed29ec38de908c22f95d9ac008e424c7bcae54c75a79c527c694"
-"checksum proc-macro2 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)" = "df246d292ff63439fea9bc8c0a270bed0e390d5ebd4db4ba15aba81111b5abe3"
-"checksum quote 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)" = "2bdc6c187c65bca4260c9011c9e3132efe4909da44726bad24cf7572ae338d7f"
-"checksum rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)" = "6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03"
-"checksum rand_chacha 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402"
-"checksum rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)" = "90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19"
-"checksum rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c"
-"checksum rayon 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)" = "db6ce3297f9c85e16621bb8cca38a06779ffc31bb8184e1be4bed2be4678a098"
-"checksum rayon-core 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "08a89b46efaf957e52b18062fb2f4660f8b8a4dde1807ca002690868ef2c85a9"
-"checksum redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)" = "2439c63f3f6139d1b57529d16bc3b8bb855230c8efcc5d3a896c8bea7c3b1e84"
-"checksum redox_users 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "09b23093265f8d200fa7b4c2c76297f47e681c655f6f1285a8780d6a022f7431"
-"checksum regex-automata 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)" = "ae1ded71d66a4a97f5e961fd0cb25a5f366a42a41570d16a763a69c092c26ae4"
-"checksum rust-argon2 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "2bc8af4bda8e1ff4932523b94d3dd20ee30a87232323eda55903ffd71d2fb017"
-"checksum ryu 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)" = "535622e6be132bccd223f4bb2b8ac8d53cda3c7a6394944d3b2b33fb974f9d76"
-"checksum scopeguard 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"
-"checksum serde 1.0.106 (registry+https://github.com/rust-lang/crates.io-index)" = "36df6ac6412072f67cf767ebbde4133a5b2e88e76dc6187fa7104cd16f783399"
-"checksum serde_derive 1.0.106 (registry+https://github.com/rust-lang/crates.io-index)" = "9e549e3abf4fb8621bd1609f11dfc9f5e50320802273b12f3811a67e6716ea6c"
-"checksum serde_yaml 0.8.11 (registry+https://github.com/rust-lang/crates.io-index)" = "691b17f19fc1ec9d94ec0b5864859290dff279dbd7b03f017afda54eb36c3c35"
-"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)" = "c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8"
-"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)" = "8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a"
-"checksum syn 1.0.17 (registry+https://github.com/rust-lang/crates.io-index)" = "0df0eb663f387145cab623dea85b09c2c5b4b0aef44e945d928e682fce71bb03"
-"checksum term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)" = "edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42"
-"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)" = "d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060"
-"checksum time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)" = "db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f"
-"checksum unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)" = "caaa9d531767d1ff2150b9332433f32a24622147e5ebb1f26409d5da67afd479"
-"checksum unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c"
-"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)" = "05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a"
-"checksum wasi 0.9.0+wasi-snapshot-preview1 (registry+https://github.com/rust-lang/crates.io-index)" = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519"
-"checksum winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)" = "8093091eeb260906a183e6ae1abdba2ef5ef2257a21801128899c3fc699229c6"
-"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"
-"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
-"checksum yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)" = "65923dd1784f44da1d2c3dbbc5e822045628c590ba72123e1c73d3c230c4434d"
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.48.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.48.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.48.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.48.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.48.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.48.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.48.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a"
+
+[[package]]
+name = "winnow"
+version = "0.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "81fac9742fd1ad1bd9643b991319f72dd031016d44b77039a26977eb667141e7"
+dependencies = [
+ "memchr",
+]
Index: marmoset/Cargo.toml
===================================================================
--- marmoset.orig/Cargo.toml
+++ marmoset/Cargo.toml
@@ -42,28 +42,26 @@ path = "examples/simulate.rs"
 name = "genpng"
 path = "examples/genpng.rs"
 [dependencies.cairo-rs]
-version = "0.8.0"
+version = "0.17"
 features = ["png"]
 
 [dependencies.clap]
-version = "2.33.0"
+version = "4"
 
 [dependencies.gdk]
-version = "0.12.0"
+version = "0.17"
 
 [dependencies.gdk-pixbuf]
-version = "0.8.0"
+version = "0.17"
 
 [dependencies.gio]
-version = "0.8.0"
-features = ["v2_44"]
+version = "0.17"
 
 [dependencies.glib]
-version = "0.9.1"
+version = "0.17"
 
 [dependencies.gtk]
-version = "0.8.0"
-features = ["v3_18"]
+version = "0.17"
 
 [dependencies.num-traits]
 version = "0.2"
@@ -72,10 +70,10 @@ version = "0.2"
 version = "1.12"
 
 [dependencies.prettytable-rs]
-version = "0.8"
+version = "0.10"
 
 [dependencies.rand]
-version = "0.7"
+version = "0.8"
 
 [dependencies.rayon]
 version = "1.3"
@@ -87,7 +85,7 @@ version = "1.0"
 version = "1.0"
 
 [dependencies.serde_yaml]
-version = "0.8"
+version = "0.8"
 
 [dependencies.time]
-version = "0.1"
+version = "0.3"
Index: marmoset/examples/simulate.rs
===================================================================
--- marmoset.orig/examples/simulate.rs
+++ marmoset/examples/simulate.rs
@@ -51,8 +51,8 @@ extern crate prettytable;
 extern crate rand;
 extern crate time;
 
-use prettytable::Table;
 use prettytable::format::consts;
+use prettytable::Table;
 use rand::{thread_rng, Rng};
 use std::cmp;
 use std::sync::mpsc;
@@ -241,7 +241,7 @@ fn find_random_set(hand: &[usize]) -> Op
         None
     } else {
         let mut rng = thread_rng();
-        let random_ix = rng.gen_range(0, sets.len());
+        let random_ix = rng.gen_range(0..sets.len());
         Some(sets[random_ix])
     }
 }
@@ -331,7 +331,8 @@ fn main() {
         (about: "Gather statistics for simulated games of SET.")
         (@arg GAMES: -g --games +takes_value games_help)
         (@arg THREADS: -t --threads +takes_value "Sets number of threads")
-    ).get_matches();
+    )
+    .get_matches();
 
     let num_games = value_t!(matches, "GAMES", u64).unwrap_or(NUM_GAMES);
     let num_threads = value_t!(matches, "THREADS", u64).unwrap_or(num_cpus::get() as u64);
Index: marmoset/src/cell.rs
===================================================================
--- marmoset.orig/src/cell.rs
+++ marmoset/src/cell.rs
@@ -16,35 +16,39 @@
 //! Tableau cells.
 
 use cairo::{Matrix, Rectangle};
-use rand::{Rng, thread_rng};
 use core::card::Card;
 use core::geometry::*;
+use rand::{thread_rng, Rng};
 
 #[derive(Clone, Copy)]
 pub enum Cell {
     Deck,
     Score,
     Placeholder,
-    Card(RenderData)
+    Card(RenderData),
 }
 
 impl Cell {
     /// Convenience method for extracting `Card`
     pub fn card(&self) -> Option<Card> {
-	if let Cell::Card(data) = *self {
-	    Some(data.card)
-	} else {
-	    None
-	}
+        if let Cell::Card(data) = *self {
+            Some(data.card)
+        } else {
+            None
+        }
     }
 
     /// Convenience method for matching a hotkey to a `Card`
     pub fn card_for_key(&self, hotkey: char) -> Option<Card> {
-	if let Cell::Card(data) = *self {
-	    if data.hotkey == hotkey { Some(data.card) } else { None }
-	} else {
-	    None
-	}
+        if let Cell::Card(data) = *self {
+            if data.hotkey == hotkey {
+                Some(data.card)
+            } else {
+                None
+            }
+        } else {
+            None
+        }
     }
 }
 
@@ -58,7 +62,7 @@ const MAX_ROTATION: f64 = 3.0;
 /// to the nearest fifth of a degree, and converted to radians.
 fn random_angle(max: f64) -> f64 {
     let mut rng = thread_rng();
-    let angle = rng.gen_range(0.0, max * 2.0) - max;
+    let angle = rng.gen_range(0.0..max * 2.0) - max;
     // round to nearest fifth of a degree
     let degrees = f64::round(angle * 5.) / 5.;
     degrees.to_radians()
@@ -73,24 +77,28 @@ pub struct RenderData {
 
 impl RenderData {
     pub fn with_card_and_hotkey(card: Card, hotkey: char) -> RenderData {
-	let angle = random_angle(MAX_ROTATION);
-	RenderData { card, hotkey, angle }
+        let angle = random_angle(MAX_ROTATION);
+        RenderData {
+            card,
+            hotkey,
+            angle,
+        }
     }
 
     pub fn point_in_rect(&self, x: f64, y: f64, rect: Rectangle, transform: bool) -> bool {
-	if transform {
-	    let (cx, cy) = rect.center();
-	    let mut transform = Matrix::identity();
-
-	    transform.translate(cx, cy);
-	    transform.rotate(self.angle);
-	    transform.translate(-cx, -cy);
-	    transform.invert();
-
-	    let (tx, ty) = transform.transform_point(x, y);
-	    rect.contains_point(tx, ty)
-	} else {
-	    rect.contains_point(x, y)
-	}
+        if transform {
+            let (cx, cy) = rect.center();
+            let mut transform = Matrix::identity();
+
+            transform.translate(cx, cy);
+            transform.rotate(self.angle);
+            transform.translate(-cx, -cy);
+            transform.invert();
+
+            let (tx, ty) = transform.transform_point(x, y);
+            rect.contains_point(tx, ty)
+        } else {
+            rect.contains_point(x, y)
+        }
     }
 }
Index: marmoset/src/controller.rs
===================================================================
--- marmoset.orig/src/controller.rs
+++ marmoset/src/controller.rs
@@ -19,16 +19,16 @@ use gtk::prelude::*;
 use gtk::{Allocation, DrawingArea};
 use num_traits::ToPrimitive;
 use std::cell::RefCell;
-use std::{f64, i32};
 use std::rc::Rc;
+use std::{f64, i32};
 
 use crate::cell::Cell;
 use crate::config::{self, Config};
-use core::card::Card;
-use core::geometry::{RectangleExt, zero_rect};
-use core::graphics::{ContextExt, ColorScheme};
-use crate::game_state::{GameState, ROWS, COLUMNS};
+use crate::game_state::{GameState, COLUMNS, ROWS};
 use crate::rules::Rules;
+use core::card::Card;
+use core::geometry::{zero_rect, RectangleExt};
+use core::graphics::{ColorScheme, ContextExt};
 
 const CARD_WIDTH: f64 = 3.5;
 const CARD_HEIGHT: f64 = 2.25;
@@ -65,62 +65,62 @@ pub struct Controller {
 
 impl Controller {
     pub fn shared_with_config(config: Config) -> Rc<RefCell<Controller>> {
-	let drawing_area = Controller::new_drawing_area();
-	let controller = Controller {
-	    config,
-	    state: GameState::with_config(config),
-	    rules: config.rules(),
-	    selected: vec!(),
-	    undo_stack: vec!(),
-	    redo_stack: vec!(),
-	    undo_observers: vec!(),
-	    tableau_bounds: zero_rect(),
-	    cell_rects: vec![zero_rect(); ROWS*COLUMNS],
-	    view: drawing_area.clone(),
-	    clicked_card: None,
-	    inside_clicked_card: false,
-	    exploded_cell: None,
-	};
-
-	// need a shared reference that can be moved into event callbacks
-	let shared_controller = Rc::new(RefCell::new(controller));
-
-	macro_rules! connect {
-	    ($connect:ident :> $action:ident) => {{
-		let controller = shared_controller.clone();
-		drawing_area.$connect(
-		    move |a, b| controller.borrow_mut().$action(a, b)
-		);
-	    }}
-	}
-
-	connect!(connect_draw :> draw);
-	connect!(connect_size_allocate :> layout);
-	connect!(connect_button_press_event :> button_press);
-	connect!(connect_button_release_event :> button_release);
-	connect!(connect_key_press_event :> key_press);
-	connect!(connect_key_release_event :> key_release);
-	connect!(connect_motion_notify_event :> motion_notify);
+        let drawing_area = Controller::new_drawing_area();
+        let controller = Controller {
+            config,
+            state: GameState::with_config(config),
+            rules: config.rules(),
+            selected: vec![],
+            undo_stack: vec![],
+            redo_stack: vec![],
+            undo_observers: vec![],
+            tableau_bounds: zero_rect(),
+            cell_rects: vec![zero_rect(); ROWS * COLUMNS],
+            view: drawing_area.clone(),
+            clicked_card: None,
+            inside_clicked_card: false,
+            exploded_cell: None,
+        };
+
+        // need a shared reference that can be moved into event callbacks
+        let shared_controller = Rc::new(RefCell::new(controller));
+
+        macro_rules! connect {
+            ($connect:ident :> $action:ident) => {{
+                let controller = shared_controller.clone();
+                drawing_area.$connect(move |a, b| controller.borrow_mut().$action(a, b));
+            }};
+        }
+
+        connect!(connect_draw :> draw);
+        connect!(connect_size_allocate :> layout);
+        connect!(connect_button_press_event :> button_press);
+        connect!(connect_button_release_event :> button_release);
+        connect!(connect_key_press_event :> key_press);
+        connect!(connect_key_release_event :> key_release);
+        connect!(connect_motion_notify_event :> motion_notify);
 
-	shared_controller
+        shared_controller
     }
 
     fn new_drawing_area() -> DrawingArea {
-	let drawing_area = DrawingArea::new();
-	let event_mask = EventMask::POINTER_MOTION_MASK
-	    | EventMask::BUTTON_PRESS_MASK | EventMask::BUTTON_RELEASE_MASK
-	    | EventMask::KEY_PRESS_MASK | EventMask::KEY_RELEASE_MASK;
-
-	drawing_area.set_can_focus(true);
-	drawing_area.add_events(event_mask);
-
-	// establish a reasonable minimum view size
-	drawing_area.set_size_request(800, 450);
-	drawing_area
+        let drawing_area = DrawingArea::new();
+        let event_mask = EventMask::POINTER_MOTION_MASK
+            | EventMask::BUTTON_PRESS_MASK
+            | EventMask::BUTTON_RELEASE_MASK
+            | EventMask::KEY_PRESS_MASK
+            | EventMask::KEY_RELEASE_MASK;
+
+        drawing_area.set_can_focus(true);
+        drawing_area.add_events(event_mask);
+
+        // establish a reasonable minimum view size
+        drawing_area.set_size_request(800, 450);
+        drawing_area
     }
 
     pub fn get_drawing_area(&self) -> DrawingArea {
-	self.view.clone()
+        self.view.clone()
     }
 }
 
@@ -130,76 +130,80 @@ impl Controller {
 
 impl Controller {
     fn new_game_with_state(&mut self, start_state: Option<GameState>) {
-	if let Some(state) = start_state {
-	    self.state = state;
-	}
-
-	self.selected.clear();
-	self.reset_undo_stacks();
-	self.redraw();
+        if let Some(state) = start_state {
+            self.state = state;
+        }
+
+        self.selected.clear();
+        self.reset_undo_stacks();
+        self.redraw();
     }
 
     pub fn restart(&mut self) {
-	// state will be None if the undo stack is empty
-	let state = self.undo_stack.first().map(|item| item.state.clone());
-	self.new_game_with_state(state);
+        // state will be None if the undo stack is empty
+        let state = self.undo_stack.first().map(|item| item.state.clone());
+        self.new_game_with_state(state);
     }
 
     pub fn new_game(&mut self) {
-	let state = GameState::with_config(self.config);
-	self.new_game_with_state(Some(state));
+        let state = GameState::with_config(self.config);
+        self.new_game_with_state(Some(state));
     }
 
     pub fn show_hint(&mut self) -> Option<String> {
-	self.deselect_all();
+        self.deselect_all();
 
-	if let Some(hint_cards) = self.rules.hint(&self.state.cards()) {
-	    self.selected = hint_cards;
-	    self.redraw();
-	    None
-	} else if self.state.deck.is_empty() {
-	    Some("No more moves!".to_string())
-	} else {
-	    self.deal_more_cards()
-	}
+        if let Some(hint_cards) = self.rules.hint(&self.state.cards()) {
+            self.selected = hint_cards;
+            self.redraw();
+            None
+        } else if self.state.deck.is_empty() {
+            Some("No more moves!".to_string())
+        } else {
+            self.deal_more_cards()
+        }
     }
 
     pub fn deal_more_cards(&mut self) -> Option<String> {
-	if self.rules.stuck(&self.state.cards()) {
-	    if self.state.deck.is_empty() {
-		return Some("No more moves!".to_string());
-	    } else {
-		self.register_undo("Deal More Cards");
-		self.state.deal(self.rules.set_size());
-		self.redraw();
-	    }
-
-	    None
-	} else {
-	    let num_in_play = self.rules.count_sets(&self.state.cards());
-	    let string = if num_in_play == 1 {
-		format!("There is 1 {} available.", self.rules.name())
-	    } else {
-		format!("There are {} {}s available.", num_in_play, self.rules.name())
-	    };
+        if self.rules.stuck(&self.state.cards()) {
+            if self.state.deck.is_empty() {
+                return Some("No more moves!".to_string());
+            } else {
+                self.register_undo("Deal More Cards");
+                self.state.deal(self.rules.set_size());
+                self.redraw();
+            }
+
+            None
+        } else {
+            let num_in_play = self.rules.count_sets(&self.state.cards());
+            let string = if num_in_play == 1 {
+                format!("There is 1 {} available.", self.rules.name())
+            } else {
+                format!(
+                    "There are {} {}s available.",
+                    num_in_play,
+                    self.rules.name()
+                )
+            };
 
-	    Some(string)
-	}
+            Some(string)
+        }
     }
 
     fn check_for_set(&mut self) {
-	if self.selected.len() == self.rules.set_size() {
-	    // if we found a valid set, remove it, otherwise deselect the last selected card
-	    if self.rules.valid_set(&self.selected) {
-		let action_name = self.rules.name();
-		self.register_undo(action_name);
-
-		self.state.take_cards(&self.selected, &*self.rules);
-		self.deselect_all();
-	    } else if let Some(card) = self.selected.pop() {
-		self.redraw_cell(self.state.index_of_card(card));
-	    }
-	}
+        if self.selected.len() == self.rules.set_size() {
+            // if we found a valid set, remove it, otherwise deselect the last selected card
+            if self.rules.valid_set(&self.selected) {
+                let action_name = self.rules.name();
+                self.register_undo(action_name);
+
+                self.state.take_cards(&self.selected, &*self.rules);
+                self.deselect_all();
+            } else if let Some(card) = self.selected.pop() {
+                self.redraw_cell(self.state.index_of_card(card));
+            }
+        }
     }
 }
 
@@ -209,24 +213,24 @@ impl Controller {
 
 impl Controller {
     pub fn set_deck(&mut self, deck: config::Deck) {
-	self.config.set_deck(deck);
-	self.new_game();
+        self.config.set_deck(deck);
+        self.new_game();
     }
 
     pub fn set_variant(&mut self, variant: config::Variant) {
-	self.config.set_variant(variant);
-	self.rules = self.config.rules();
-	self.new_game();
+        self.config.set_variant(variant);
+        self.rules = self.config.rules();
+        self.new_game();
     }
 
     pub fn set_tidy_layout(&mut self, tidy: bool) {
-	self.config.set_tidy_layout(tidy);
-	self.redraw();
+        self.config.set_tidy_layout(tidy);
+        self.redraw();
     }
 
     pub fn set_color_scheme(&mut self, scheme: ColorScheme) {
-	self.config.set_color_scheme(scheme);
-	self.redraw();
+        self.config.set_color_scheme(scheme);
+        self.redraw();
     }
 }
 
@@ -236,25 +240,25 @@ impl Controller {
 
 impl Controller {
     fn deselect_all(&mut self) {
-	if !self.selected.is_empty() {
-	    self.selected.clear();
-	    self.redraw();
-	}
+        if !self.selected.is_empty() {
+            self.selected.clear();
+            self.redraw();
+        }
     }
 
     fn toggle_selected(&mut self, card: Card) {
-	if self.is_selected(card) {
-	    self.selected.retain(|&c| c != card);
-	} else if self.selected.len() < self.rules.set_size() {
-	    self.selected.push(card);
-	}
+        if self.is_selected(card) {
+            self.selected.retain(|&c| c != card);
+        } else if self.selected.len() < self.rules.set_size() {
+            self.selected.push(card);
+        }
 
-	self.redraw_cell(self.state.index_of_card(card));
+        self.redraw_cell(self.state.index_of_card(card));
     }
 
     fn is_selected(&self, card: Card) -> bool {
-	// this is an O(n) test, but n is <= 4
-	self.selected.contains(&card)
+        // this is an O(n) test, but n is <= 4
+        self.selected.contains(&card)
     }
 }
 
@@ -264,7 +268,7 @@ impl Controller {
 
 struct UndoItem {
     state: GameState,
-    action_name: &'static str
+    action_name: &'static str,
 }
 
 /// Undo and Redo are symmetrical operations. This is implemented from
@@ -272,66 +276,71 @@ struct UndoItem {
 /// corresponding parameters swapped.
 macro_rules! create_do {
     ($name:ident, $undo_stack:ident, $redo_stack:ident) => {
-	pub fn $name(&mut self) {
-	    if let Some(prev) = self.$undo_stack.pop() {
-		// push the current state onto the redo stack
-		let redo = UndoItem {
-		    state: self.state.clone(),
-		    action_name: prev.action_name
-		};
-		self.$redo_stack.push(redo);
-
-		// set the current state to the undo state
-		self.state = prev.state;
-		self.selected.clear();
-		self.redraw();
-
-		self.undo_status_changed();
-	    }
-	}
-    }
+        pub fn $name(&mut self) {
+            if let Some(prev) = self.$undo_stack.pop() {
+                // push the current state onto the redo stack
+                let redo = UndoItem {
+                    state: self.state.clone(),
+                    action_name: prev.action_name,
+                };
+                self.$redo_stack.push(redo);
+
+                // set the current state to the undo state
+                self.state = prev.state;
+                self.selected.clear();
+                self.redraw();
+
+                self.undo_status_changed();
+            }
+        }
+    };
 }
 
 impl Controller {
     fn register_undo(&mut self, action_name: &'static str) {
-	let item = UndoItem {
-	    state: self.state.clone(),
-	    action_name
-	};
-	self.undo_stack.push(item);
-	self.redo_stack.clear();
-	self.undo_status_changed();
+        let item = UndoItem {
+            state: self.state.clone(),
+            action_name,
+        };
+        self.undo_stack.push(item);
+        self.redo_stack.clear();
+        self.undo_status_changed();
     }
 
     fn reset_undo_stacks(&mut self) {
-	self.undo_stack.clear();
-	self.redo_stack.clear();
-	self.undo_status_changed();
+        self.undo_stack.clear();
+        self.redo_stack.clear();
+        self.undo_status_changed();
     }
 
     fn undo_status_changed(&self) {
-	// post undo nofifications
-	for f in &self.undo_observers { f(self) }
+        // post undo nofifications
+        for f in &self.undo_observers {
+            f(self)
+        }
     }
 
-    pub fn add_undo_observer<F>(&mut self, f: F) where F: Fn(&Controller) -> () + 'static {
-	self.undo_observers.push(Box::new(f));
+    pub fn add_undo_observer<F>(&mut self, f: F)
+    where
+        F: Fn(&Controller) -> () + 'static,
+    {
+        self.undo_observers.push(Box::new(f));
     }
 
     pub fn can_undo(&self) -> bool {
-	!self.undo_stack.is_empty()
+        !self.undo_stack.is_empty()
     }
 
     pub fn can_redo(&self) -> bool {
-	!self.redo_stack.is_empty()
+        !self.redo_stack.is_empty()
     }
 
     pub fn undo_action_name(&self) -> Option<&str> {
-	self.undo_stack.last().map(|item| item.action_name)
+        self.undo_stack.last().map(|item| item.action_name)
     }
 
     pub fn redo_action_name(&self) -> Option<&str> {
-	self.redo_stack.last().map(|item| item.action_name)
+        self.redo_stack.last().map(|item| item.action_name)
     }
 
     // pub fn undo(&mut self);
@@ -347,123 +356,123 @@ impl Controller {
 
 impl Controller {
     fn card_for_point(&self, x: f64, y: f64) -> Option<Card> {
-	// calculate the tableau row and column of the mouse location
-	let cell_width = self.tableau_bounds.width / COLUMNS as f64;
-	let cell_height = self.tableau_bounds.height / ROWS as f64;
-
-	let col = ((x - self.tableau_bounds.x) / cell_width) as i32;
-	let row = ((y - self.tableau_bounds.y) / cell_height) as i32;
-
-	let col_valid = 0 <= col && col < COLUMNS as i32;
-	let row_valid = 0 <= row && row < ROWS as i32;
-
-	if col_valid && row_valid {
-	    let cell_index = row as usize * COLUMNS + col as usize;
-	    let cell = self.state.tableau[cell_index];
-	    let cell_rect = self.cell_rects[cell_index];
-
-	    if let Cell::Card(data) = cell {
-		let transform = !self.config.tidy_layout;
-		if data.point_in_rect(x, y, cell_rect, transform) {
-		    return Some(data.card);
-		}
-	    }
-	}
+        // calculate the tableau row and column of the mouse location
+        let cell_width = self.tableau_bounds.width() / COLUMNS as f64;
+        let cell_height = self.tableau_bounds.height() / ROWS as f64;
+
+        let col = ((x - self.tableau_bounds.x()) / cell_width) as i32;
+        let row = ((y - self.tableau_bounds.y()) / cell_height) as i32;
+
+        let col_valid = 0 <= col && col < COLUMNS as i32;
+        let row_valid = 0 <= row && row < ROWS as i32;
+
+        if col_valid && row_valid {
+            let cell_index = row as usize * COLUMNS + col as usize;
+            let cell = self.state.tableau[cell_index];
+            let cell_rect = self.cell_rects[cell_index];
+
+            if let Cell::Card(data) = cell {
+                let transform = !self.config.tidy_layout;
+                if data.point_in_rect(x, y, cell_rect, transform) {
+                    return Some(data.card);
+                }
+            }
+        }
 
-	None
+        None
     }
 
     fn set_exploded_cell(&mut self, cell: Option<usize>) {
-	if self.exploded_cell != cell {
-	    // redisplay old cell
-	    self.redraw_cell(self.exploded_cell);
-	    self.exploded_cell = cell;
-	    // redisplay new cell
-	    self.redraw_cell(self.exploded_cell);
-	}
+        if self.exploded_cell != cell {
+            // redisplay old cell
+            self.redraw_cell(self.exploded_cell);
+            self.exploded_cell = cell;
+            // redisplay new cell
+            self.redraw_cell(self.exploded_cell);
+        }
     }
 
     fn set_inside_clicked_card(&mut self, flag: bool) {
-	if self.inside_clicked_card != flag {
-	    self.inside_clicked_card = flag;
+        if self.inside_clicked_card != flag {
+            self.inside_clicked_card = flag;
 
-	    if let Some(card) = self.clicked_card {
-		// we transitioned in or out of the clicked card, so
-		// we need to toggle its selection state
-		self.toggle_selected(card);
-	    }
-	}
+            if let Some(card) = self.clicked_card {
+                // we transitioned in or out of the clicked card, so
+                // we need to toggle its selection state
+                self.toggle_selected(card);
+            }
+        }
     }
 
     fn motion_notify(&mut self, _widget: &DrawingArea, event: &gdk::EventMotion) -> Inhibit {
-	let (x, y) = event.get_position();
-	let mouse_down_in_card = self.clicked_card.is_some();
-	let mut inside = false;
-
-	if let Some(card) = self.card_for_point(x, y) {
-	    inside = Some(card) == self.clicked_card;
-	    if !mouse_down_in_card || inside {
-		let ix = self.state.index_of_card(card);
-		self.set_exploded_cell(ix);
-	    }
-	} else {
-	    self.set_exploded_cell(None);
-	}
+        let (x, y) = event.position();
+        let mouse_down_in_card = self.clicked_card.is_some();
+        let mut inside = false;
+
+        if let Some(card) = self.card_for_point(x, y) {
+            inside = Some(card) == self.clicked_card;
+            if !mouse_down_in_card || inside {
+                let ix = self.state.index_of_card(card);
+                self.set_exploded_cell(ix);
+            }
+        } else {
+            self.set_exploded_cell(None);
+        }
 
-	self.set_inside_clicked_card(inside);
+        self.set_inside_clicked_card(inside);
 
-	Inhibit(false)
+        Inhibit(false)
     }
 
     fn button_press(&mut self, _widget: &DrawingArea, event: &gdk::EventButton) -> Inhibit {
-	let single = event.get_event_type() == gdk::EventType::ButtonPress;
-	let primary = event.get_button() == 1;
+        let single = event.event_type() == gdk::EventType::ButtonPress;
+        let primary = event.button() == 1;
 
-	if single && primary {
-	    let (x, y) = event.get_position();
+        if single && primary {
+            let (x, y) = event.position();
 
-	    if let Some(card) = self.card_for_point(x, y) {
-		self.clicked_card = Some(card);
-		self.inside_clicked_card = true;
-		self.toggle_selected(card);
-	    }
-	}
+            if let Some(card) = self.card_for_point(x, y) {
+                self.clicked_card = Some(card);
+                self.inside_clicked_card = true;
+                self.toggle_selected(card);
+            }
+        }
 
-	Inhibit(false)
+        Inhibit(false)
     }
 
     fn button_release(&mut self, _widget: &DrawingArea, event: &gdk::EventButton) -> Inhibit {
-	if event.get_button() == 1 {
-	    self.clicked_card = None;
-	    self.inside_clicked_card = false;
-	    self.check_for_set();
-	}
+        if event.button() == 1 {
+            self.clicked_card = None;
+            self.inside_clicked_card = false;
+            self.check_for_set();
+        }
 
-	Inhibit(false)
+        Inhibit(false)
     }
 
     fn key_press(&mut self, _widget: &DrawingArea, event: &gdk::EventKey) -> Inhibit {
-	if let Some(byte) = event.get_keyval().to_u8() {
-	    let letter = byte as char;
+        if let Some(byte) = event.keyval().to_u8() {
+            let letter = byte as char;
 
-	    // only pay attention to lowercase letters with no modifiers
-	    if letter.is_alphabetic() && event.get_state().is_empty() {
-		if let Some(hotkey) = letter.to_lowercase().next() {
-		    if let Some(card) = self.state.card_for_key(hotkey) {
-			self.toggle_selected(card);
-		    }
-		}
-	    }
-	}
-
-	// make sure we don't lose focus
-	let inhibit = event.get_keyval() == gdk::enums::key::Tab;
-	Inhibit(inhibit)
+            // only pay attention to lowercase letters with no modifiers
+            if letter.is_alphabetic() && event.state().is_empty() {
+                if let Some(hotkey) = letter.to_lowercase().next() {
+                    if let Some(card) = self.state.card_for_key(hotkey) {
+                        self.toggle_selected(card);
+                    }
+                }
+            }
+        }
+
+        // make sure we don't lose focus
+        let inhibit = event.keyval() == gdk::keys::constants::Tab;
+        Inhibit(inhibit)
     }
 
     fn key_release(&mut self, _widget: &DrawingArea, _event: &gdk::EventKey) -> Inhibit {
-	self.check_for_set();
-	Inhibit(false)
+        self.check_for_set();
+        Inhibit(false)
     }
 }
 
@@ -479,107 +488,120 @@ fn span(n: usize, item: f64, spacing: f6
 
 impl Controller {
     fn layout(&mut self, _widget: &DrawingArea, allocation: &Allocation) {
-	let (w, h) = (allocation.width, allocation.height);
+        let (w, h) = (allocation.width(), allocation.height());
 
-	// figure out the tableau aspect ratio
-	let spacing_percentage = 0.15;
-	let tableau_spacing = CARD_WIDTH * spacing_percentage;
-	let tableau_width = span(COLUMNS, CARD_WIDTH, tableau_spacing);
-	let tableau_height = span(ROWS, CARD_HEIGHT, tableau_spacing);
-	let tableau_aspect_ratio = tableau_width / tableau_height;
-
-	// figure out the view aspect ratio
-	let (view_width, view_height) = (f64::from(w), f64::from(h));
-	let view_aspect_ratio = view_width / view_height;
-
-	// now squeeze the tableau into the view
-	let effective_view_width = if view_aspect_ratio > tableau_aspect_ratio {
-	    // height constrained...
-	    view_height * tableau_aspect_ratio
-	} else {
-	    view_width
-	};
-
-	let card_width = effective_view_width / span(COLUMNS, 1., spacing_percentage);
-	let card_height = CARD_HEIGHT / CARD_WIDTH * card_width;
-	let spacing = card_width * spacing_percentage;
-
-	// ... and center it
-	let offset_x = (view_width - span(COLUMNS, card_width, spacing)) / 2.;
-	let offset_y = (view_height - span(ROWS, card_height, spacing)) / 2.;
-
-	for y in 0..ROWS {
-	    let dy = offset_y + span(y, card_height, spacing);
-	    for x in 0..COLUMNS {
-		let dx = offset_x + span(x, card_width, spacing);
-		let rect = Rectangle {
-		    x: dx,
-		    y: dy,
-		    width: card_width,
-		    height: card_height
-		};
-		self.cell_rects[y * COLUMNS + x] = rect.round();
-	    }
-	}
-
-	let bounds = Rectangle {
-	    x: offset_x,
-	    y: offset_y,
-	    width: span(COLUMNS, card_width, spacing),
-	    height: span(ROWS, card_height, spacing)
-	};
+        // figure out the tableau aspect ratio
+        let spacing_percentage = 0.15;
+        let tableau_spacing = CARD_WIDTH * spacing_percentage;
+        let tableau_width = span(COLUMNS, CARD_WIDTH, tableau_spacing);
+        let tableau_height = span(ROWS, CARD_HEIGHT, tableau_spacing);
+        let tableau_aspect_ratio = tableau_width / tableau_height;
+
+        // figure out the view aspect ratio
+        let (view_width, view_height) = (f64::from(w), f64::from(h));
+        let view_aspect_ratio = view_width / view_height;
+
+        // now squeeze the tableau into the view
+        let effective_view_width = if view_aspect_ratio > tableau_aspect_ratio {
+            // height constrained...
+            view_height * tableau_aspect_ratio
+        } else {
+            view_width
+        };
+
+        let card_width = effective_view_width / span(COLUMNS, 1., spacing_percentage);
+        let card_height = CARD_HEIGHT / CARD_WIDTH * card_width;
+        let spacing = card_width * spacing_percentage;
+
+        // ... and center it
+        let offset_x = (view_width - span(COLUMNS, card_width, spacing)) / 2.;
+        let offset_y = (view_height - span(ROWS, card_height, spacing)) / 2.;
+
+        for y in 0..ROWS {
+            let dy = offset_y + span(y, card_height, spacing);
+            for x in 0..COLUMNS {
+                let dx = offset_x + span(x, card_width, spacing);
+                let rect = Rectangle::new(dx, dy, card_width, card_height);
+                self.cell_rects[y * COLUMNS + x] = rect.round();
+            }
+        }
+
+        let bounds = Rectangle::new(
+            offset_x,
+            offset_y,
+            span(COLUMNS, card_width, spacing),
+            span(ROWS, card_height, spacing),
+        );
 
-	self.tableau_bounds = bounds.inset(spacing, spacing);
+        self.tableau_bounds = bounds.inset(spacing, spacing);
     }
 
     fn draw(&self, _widget: &DrawingArea, ctx: &Context) -> Inhibit {
-	let remainder = self.state.deck.remainder();
-	let remainder_label = if remainder == 1 { "card left" } else { "cards left" };
-	let scheme = self.config.color_scheme;
-
-	// view background
-	if VISUALIZE_REDRAWS { ctx.set_source_random_rgb() } else { ctx.set_source_gray(0.8) }
-	ctx.paint();
-
-	let iter = self.state.tableau.iter().zip(self.cell_rects.iter());
-	for (ix, (&cell, &rect)) in iter.enumerate() {
-	    match cell {
-		Cell::Deck => ctx.draw_badge(rect, remainder, remainder_label),
-		Cell::Score => ctx.draw_badge(rect, self.state.score, "found"),
-		Cell::Placeholder => ctx.draw_card_placeholder(rect),
-		Cell::Card(data) => {
-		    ctx.save();
-		    ctx.with_pivot(rect.center(), || {
-			if self.exploded_cell == Some(ix) { ctx.scale(EXPLODE, EXPLODE) }
-			if !self.config.tidy_layout { ctx.rotate(data.angle) }
-		    });
-		    if self.is_selected(data.card) { ctx.draw_card_selection(rect) }
-		    ctx.draw_card(data.card, rect, Some(&data.hotkey.to_string()), scheme);
-		    ctx.restore();
-		}
-	    }
-	}
+        let remainder = self.state.deck.remainder();
+        let remainder_label = if remainder == 1 {
+            "card left"
+        } else {
+            "cards left"
+        };
+        let scheme = self.config.color_scheme;
+
+        // view background
+        if VISUALIZE_REDRAWS {
+            ctx.set_source_random_rgb()
+        } else {
+            ctx.set_source_gray(0.8)
+        }
+        ctx.paint().unwrap();
+
+        let iter = self.state.tableau.iter().zip(self.cell_rects.iter());
+        for (ix, (&cell, &rect)) in iter.enumerate() {
+            match cell {
+                Cell::Deck => ctx.draw_badge(rect, remainder, remainder_label),
+                Cell::Score => ctx.draw_badge(rect, self.state.score, "found"),
+                Cell::Placeholder => ctx.draw_card_placeholder(rect),
+                Cell::Card(data) => {
+                    ctx.save().unwrap();
+                    ctx.with_pivot(rect.center(), || {
+                        if self.exploded_cell == Some(ix) {
+                            ctx.scale(EXPLODE, EXPLODE)
+                        }
+                        if !self.config.tidy_layout {
+                            ctx.rotate(data.angle)
+                        }
+                    });
+                    if self.is_selected(data.card) {
+                        ctx.draw_card_selection(rect).unwrap();
+                    }
+                    ctx.draw_card(data.card, rect, Some(&data.hotkey.to_string()), scheme)
+                        .unwrap();
+                    ctx.restore()
+                }
+            }
+            .unwrap();
+        }
 
-	Inhibit(false)
+        Inhibit(false)
     }
 
     fn redraw(&self) {
-	self.view.queue_draw();
+        self.view.queue_draw();
     }
 
     fn redraw_in_rect(&self, rect: Rectangle) {
-	let integral_rect = rect.round();
-	self.view.queue_draw_area(integral_rect.x as i32,
-				  integral_rect.y as i32,
-				  integral_rect.width as i32,
-				  integral_rect.height as i32);
+        let integral_rect = rect.round();
+        self.view.queue_draw_area(
+            integral_rect.x() as i32,
+            integral_rect.y() as i32,
+            integral_rect.width() as i32,
+            integral_rect.height() as i32,
+        );
     }
 
     fn redraw_cell(&self, cell_index: Option<usize>) {
-	if let Some(ix) = cell_index {
-	    let rect = self.cell_rects[ix];
-	    let padding = rect.width * 0.2;
-	    self.redraw_in_rect(rect.inset(-padding, -padding));
-	}
+        if let Some(ix) = cell_index {
+            let rect = self.cell_rects[ix];
+            let padding = rect.width() * 0.2;
+            self.redraw_in_rect(rect.inset(-padding, -padding));
+        }
     }
 }
Index: marmoset/src/core/geometry.rs
===================================================================
--- marmoset.orig/src/core/geometry.rs
+++ marmoset/src/core/geometry.rs
@@ -13,8 +13,8 @@
 // You should have received a copy of the GNU General Public License
 // along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
-use std::f64;
 use cairo::Rectangle;
+use std::f64;
 
 pub type Point = (f64, f64);
 
@@ -30,58 +30,52 @@ pub trait RectangleExt {
 
 #[inline]
 pub fn zero_rect() -> Rectangle {
-    Rectangle { x: 0., y: 0., width: 0., height: 0. }
+    Rectangle::new(0., 0., 0., 0.)
 }
 
 impl RectangleExt for Rectangle {
     #[inline]
     fn center(&self) -> Point {
-        (self.x + self.width / 2., self.y + self.height / 2.)
+        (self.x() + self.width() / 2., self.y() + self.height() / 2.)
     }
 
     #[inline]
     fn max_x(&self) -> f64 {
-        self.x + self.width
+        self.x() + self.width()
     }
 
     #[inline]
     fn max_y(&self) -> f64 {
-        self.y + self.height
+        self.y() + self.height()
     }
 
     #[inline]
     fn inset(&self, dx: f64, dy: f64) -> Rectangle {
-        Rectangle {
-            x: self.x + dx / 2.,
-            y: self.y + dy / 2.,
-            width: self.width - dx,
-            height: self.height - dy
-        }
+        Rectangle::new(
+            self.x() + dx / 2.,
+            self.y() + dy / 2.,
+            self.width() - dx,
+            self.height() - dy,
+        )
     }
 
     #[inline]
     fn offset(&self, dx: f64, dy: f64) -> Rectangle {
-        Rectangle {
-            x: self.x + dx,
-            y: self.y + dy,
-            width: self.width,
-            height: self.height
-        }
+        Rectangle::new(self.x() + dx, self.y() + dy, self.width(), self.height())
     }
 
     #[inline]
     fn round(&self) -> Rectangle {
-        Rectangle {
-            x: f64::round(self.x),
-            y: f64::round(self.y),
-            width: f64::round(self.width),
-            height: f64::round(self.height)
-        }
+        Rectangle::new(
+            f64::round(self.x()),
+            f64::round(self.y()),
+            f64::round(self.width()),
+            f64::round(self.height()),
+        )
     }
 
     #[inline]
     fn contains_point(&self, x: f64, y: f64) -> bool {
-        x >= self.x && x <= self.max_x() &&
-            y >= self.y && y <= self.max_y()
+        x >= self.x() && x <= self.max_x() && y >= self.y() && y <= self.max_y()
     }
 }
Index: marmoset/src/core/graphics.rs
===================================================================
--- marmoset.orig/src/core/graphics.rs
+++ marmoset/src/core/graphics.rs
@@ -15,12 +15,12 @@
 
 #![allow(clippy::cast_lossless)]
 
-use cairo::{Context, Rectangle};
 use crate::card::{Card, Color, Shading, Shape};
 use crate::geometry::RectangleExt;
-use rand::{Rng, thread_rng};
-use std::f64::consts::{PI, FRAC_PI_2};
+use cairo::{Context, Error, Rectangle};
+use rand::{thread_rng, Rng};
 use std::f64;
+use std::f64::consts::{FRAC_PI_2, PI};
 
 const CORNER_RADIUS_PERCENTAGE: f64 = 0.08;
 const BADGE_BACKGROUND_GRAY: f64 = 0.68;
@@ -30,8 +30,8 @@ const TABLEAU_BACKGROUND_GRAY: f64 = 0.8
 const MOCK_STRIPE_TRANSLUCENCY: f64 = 0.4;
 
 #[inline]
-pub fn card_corner_radius(Rectangle { height, .. }: Rectangle) -> f64 {
-    CORNER_RADIUS_PERCENTAGE * height
+pub fn card_corner_radius(rect: Rectangle) -> f64 {
+    CORNER_RADIUS_PERCENTAGE * rect.height()
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -46,7 +46,7 @@ pub enum ColorScheme {
 
 impl ColorScheme {
     pub fn card_color(self, card: Card) -> (f64, f64, f64) {
-        let (r,g,b) = match self {
+        let (r, g, b) = match self {
             // This scheme is intended to be friendlier to those with
             // color vision deficiencies
             ColorScheme::CMYK => match card.color() {
@@ -72,7 +72,9 @@ impl ColorScheme {
 
 pub trait ContextExt {
     /// Perform transform operations around a pivot point.
-    fn with_pivot<F>(&self, pivot: (f64, f64), f: F) where F: Fn() -> ();
+    fn with_pivot<F>(&self, pivot: (f64, f64), f: F)
+    where
+        F: Fn() -> ();
 
     fn set_source_gray(&self, g: f64);
     fn set_source_random_rgb(&self);
@@ -81,15 +83,29 @@ pub trait ContextExt {
     fn diamond_in_rect(&self, rect: Rectangle);
     fn squiggle_in_rect(&self, rect: Rectangle);
 
-    fn draw_badge(&self, rect: Rectangle, count: usize, label: &str);
-    fn draw_card_background(&self, rect: Rectangle, label: Option<&str>, gray: f64);
-    fn draw_card_placeholder(&self, rect: Rectangle);
-    fn draw_card_selection(&self, rect: Rectangle);
-    fn draw_card(&self, card: Card, rect: Rectangle, label: Option<&str>, scheme: ColorScheme);
+    fn draw_badge(&self, rect: Rectangle, count: usize, label: &str) -> Result<(), Error>;
+    fn draw_card_background(
+        &self,
+        rect: Rectangle,
+        label: Option<&str>,
+        gray: f64,
+    ) -> Result<(), Error>;
+    fn draw_card_placeholder(&self, rect: Rectangle) -> Result<(), Error>;
+    fn draw_card_selection(&self, rect: Rectangle) -> Result<(), Error>;
+    fn draw_card(
+        &self,
+        card: Card,
+        rect: Rectangle,
+        label: Option<&str>,
+        scheme: ColorScheme,
+    ) -> Result<(), Error>;
 }
 
 impl ContextExt for Context {
-    fn with_pivot<F>(&self, (px, py): (f64, f64), f: F) where F: Fn() -> () {
+    fn with_pivot<F>(&self, (px, py): (f64, f64), f: F)
+    where
+        F: Fn() -> (),
+    {
         self.translate(px, py);
         f();
         self.translate(-px, -py);
@@ -101,15 +117,18 @@ impl ContextExt for Context {
 
     fn set_source_random_rgb(&self) {
         let mut rng = thread_rng();
-        let r = rng.gen_range(0.0, 1.0);
-        let g = rng.gen_range(0.0, 1.0);
-        let b = rng.gen_range(0.0, 1.0);
+        let r = rng.gen_range(0.0..1.0);
+        let g = rng.gen_range(0.0..1.0);
+        let b = rng.gen_range(0.0..1.0);
 
         self.set_source_rgb(r, g, b);
     }
 
     fn rounded_rect(&self, rect: Rectangle, radius: f64) {
-        let Rectangle {x, y, width, height} = rect;
+        let x = rect.x();
+        let y = rect.y();
+        let width = rect.width();
+        let height = rect.height();
         let r = f64::min(radius, f64::min(width / 2., height / 2.));
 
         self.new_sub_path();
@@ -121,7 +140,10 @@ impl ContextExt for Context {
     }
 
     fn diamond_in_rect(&self, rect: Rectangle) {
-        let Rectangle {x, y, width, height} = rect;
+        let x = rect.x();
+        let y = rect.y();
+        let width = rect.width();
+        let height = rect.height();
         let half_width = width / 2.;
         let half_height = height / 2.;
 
@@ -134,118 +156,169 @@ impl ContextExt for Context {
     }
 
     fn squiggle_in_rect(&self, rect: Rectangle) {
-        let Rectangle {x, y, width, height} = rect;
+        let x = rect.x();
+        let y = rect.y();
+        let width = rect.width();
+        let height = rect.height();
 
         self.new_sub_path();
         self.move_to(x + width / 3., y);
 
-        self.curve_to(x + width * 4. / 5., y,
-                      x + width, y + height / 6.,
-                      x + width, y + height / 3.);
-
-        self.curve_to(x + width, y + height / 2.,
-                      x + width * 5. / 6., y + height / 2.,
-                      x + width * 5. / 6., y + height * 2. / 3.);
-
-        self.curve_to(x + width * 5. / 6., y + height * 5. / 6.,
-                      x + width, y + height * 5. / 6.,
-                      x + width, y + height * 11. / 12.);
-
-        self.curve_to(x + width, y + height * 23. / 24.,
-                      x + width * 5. / 6., y + height,
-                      x + width * 2. / 3., y + height);
-
-        self.curve_to(x + width / 5., y + height,
-                      x, y + height * 5. / 6.,
-                      x, y + height * 2. / 3.);
-
-        self.curve_to(x, y + height / 2.,
-                      x + width / 6., y + height / 2.,
-                      x + width / 6., y + height / 3.);
-
-        self.curve_to(x + width / 6., y + height / 6.,
-                      x, y + height / 6.,
-                      x, y + height / 12.);
-
-        self.curve_to(x, y + height / 24.,
-                      x + width / 6., y,
-                      x + width / 3., y);
+        self.curve_to(
+            x + width * 4. / 5.,
+            y,
+            x + width,
+            y + height / 6.,
+            x + width,
+            y + height / 3.,
+        );
+
+        self.curve_to(
+            x + width,
+            y + height / 2.,
+            x + width * 5. / 6.,
+            y + height / 2.,
+            x + width * 5. / 6.,
+            y + height * 2. / 3.,
+        );
+
+        self.curve_to(
+            x + width * 5. / 6.,
+            y + height * 5. / 6.,
+            x + width,
+            y + height * 5. / 6.,
+            x + width,
+            y + height * 11. / 12.,
+        );
+
+        self.curve_to(
+            x + width,
+            y + height * 23. / 24.,
+            x + width * 5. / 6.,
+            y + height,
+            x + width * 2. / 3.,
+            y + height,
+        );
+
+        self.curve_to(
+            x + width / 5.,
+            y + height,
+            x,
+            y + height * 5. / 6.,
+            x,
+            y + height * 2. / 3.,
+        );
+
+        self.curve_to(
+            x,
+            y + height / 2.,
+            x + width / 6.,
+            y + height / 2.,
+            x + width / 6.,
+            y + height / 3.,
+        );
+
+        self.curve_to(
+            x + width / 6.,
+            y + height / 6.,
+            x,
+            y + height / 6.,
+            x,
+            y + height / 12.,
+        );
+
+        self.curve_to(x, y + height / 24., x + width / 6., y, x + width / 3., y);
 
         self.close_path();
     }
 
-    fn draw_badge(&self, rect: Rectangle, count: usize, label: &str) {
-        let badge_height = rect.height * (2. / 3.);
-        let label_height = rect.height - badge_height;
+    fn draw_badge(&self, rect: Rectangle, count: usize, label: &str) -> Result<(), Error> {
+        let badge_height = rect.height() * (2. / 3.);
+        let label_height = rect.height() - badge_height;
         let count_string = count.to_string();
 
-        let padding = rect.width * 0.2;
-        let badge_rect = Rectangle {
-            x: rect.x,
-            y: rect.y,
-            width: rect.width,
-            height: badge_height
-        }.inset(padding, padding / 8.);
+        let padding = rect.width() * 0.2;
+
+        let badge_rect = Rectangle::new(rect.x(), rect.y(), rect.width(), badge_height)
+            .inset(padding, padding / 8.);
 
         // draw badge background
         self.set_source_gray(BADGE_BACKGROUND_GRAY);
         self.rounded_rect(badge_rect.round(), f64::INFINITY);
-        self.fill();
+        self.fill()?;
 
         // draw the label (same gray as badge background)
         self.set_font_size(label_height * 0.9);
-        let extents = self.text_extents(label);
-        let x = rect.x + (rect.width - extents.width) / 2.;
-        let y = rect.max_y() - (label_height - extents.height) / 3.;
+        let extents = self.text_extents(label)?;
+        let x = rect.x() + (rect.width() - extents.width()) / 2.;
+        let y = rect.max_y() - (label_height - extents.height()) / 3.;
 
         self.move_to(x, y);
-        self.show_text(label);
+        self.show_text(label)?;
 
         // draw count
         self.set_font_size(badge_height * 0.75);
-        let extents = self.text_extents(&count_string);
-        let x = rect.x + (rect.width - extents.width) / 2. - extents.x_bearing;
-        let y = badge_rect.max_y() - (badge_rect.height - extents.height) / 2.;
+        let extents = self.text_extents(&count_string)?;
+        let x = rect.x() + (rect.width() - extents.width()) / 2. - extents.x_bearing();
+        let y = badge_rect.max_y() - (badge_rect.height() - extents.height()) / 2.;
 
         self.move_to(x, y);
         self.set_source_gray(TABLEAU_BACKGROUND_GRAY);
-        self.show_text(&count_string);
+        self.show_text(&count_string)?;
+        Ok(())
     }
 
-    fn draw_card_background(&self, rect: Rectangle, label: Option<&str>, gray: f64) {
+    fn draw_card_background(
+        &self,
+        rect: Rectangle,
+        label: Option<&str>,
+        gray: f64,
+    ) -> Result<(), Error> {
         let corner_radius = card_corner_radius(rect);
         self.rounded_rect(rect, corner_radius);
         self.set_source_gray(gray);
-        self.fill();
+        self.fill()?;
 
         if let Some(text) = label {
-            let font_size = f64::min(rect.height * 0.15, 24.);
+            let font_size = f64::min(rect.height() * 0.15, 24.);
             self.set_font_size(font_size);
-            self.move_to(rect.x + corner_radius, rect.max_y() - corner_radius);
+            self.move_to(rect.x() + corner_radius, rect.max_y() - corner_radius);
             self.set_source_gray(CARD_LABEL_GRAY);
-            self.show_text(text);
+            self.show_text(text)?;
         }
+
+        Ok(())
     }
 
-    fn draw_card_placeholder(&self, rect: Rectangle) {
-        self.draw_card_background(rect, None, PLACEHOLDER_GRAY);
+    fn draw_card_placeholder(&self, rect: Rectangle) -> Result<(), Error> {
+        self.draw_card_background(rect, None, PLACEHOLDER_GRAY)
     }
 
-    fn draw_card_selection(&self, rect: Rectangle) {
-        let Rectangle { height, .. } = rect;
+    fn draw_card_selection(&self, rect: Rectangle) -> Result<(), Error> {
+        let height = rect.height();
         let corner_radius = card_corner_radius(rect);
         let selection_width = (height * 0.035).round() * 2.;
 
         self.rounded_rect(rect, corner_radius);
         self.set_source_gray(0.);
         self.set_line_width(selection_width);
-        self.stroke();
+        self.stroke()?;
+        Ok(())
     }
 
-    fn draw_card(&self, card: Card, rect: Rectangle, label: Option<&str>, scheme: ColorScheme) {
-        let Rectangle { x, y, width, height } = rect;
+    fn draw_card(
+        &self,
+        card: Card,
+        rect: Rectangle,
+        label: Option<&str>,
+        scheme: ColorScheme,
+    ) -> Result<(), Error> {
+        let x = rect.height();
+        let y = rect.width();
+        let width = rect.width();
+        let height = rect.height();
         // render the background
-        self.draw_card_background(rect, label, 1.0);
+        self.draw_card_background(rect, label, 1.0)?;
 
         // calculate shape bounds and margins
         let vertical_margin = 0.15 * height;
@@ -259,19 +332,19 @@ impl ContextExt for Context {
         let horizontal_margin = (width - shape_extent) / 2.;
 
         // bounds of a single shape
-        let mut shape_rect = Rectangle {
-            x: x + horizontal_margin,
-            y: y + vertical_margin,
-            width: shape_width,
-            height: shape_height
-        };
+        let mut shape_rect = Rectangle::new(
+            x + horizontal_margin,
+            y + vertical_margin,
+            shape_width,
+            shape_height,
+        );
 
         // add the shapes to the context
         for _ in 0..count {
             match card.shape() {
                 Shape::Oval => self.rounded_rect(shape_rect, f64::INFINITY),
                 Shape::Squiggle => self.squiggle_in_rect(shape_rect),
-                Shape::Diamond => self.diamond_in_rect(shape_rect)
+                Shape::Diamond => self.diamond_in_rect(shape_rect),
             }
             shape_rect = shape_rect.offset(shape_width + spacing, 0.);
         }
@@ -285,25 +358,25 @@ impl ContextExt for Context {
 
         // finally, do the rendering based on the shading
         match card.shading() {
-            Shading::Solid => self.fill(),
+            Shading::Solid => self.fill()?,
             Shading::Outlined => {
                 // clip to the path so that the stroked shape has the
                 // same footprint as the filled shape
                 self.clip_preserve();
                 // double the width since half the stroke is clipped away
                 self.set_line_width(stroke_width * 2.);
-                self.stroke();
+                self.stroke()?;
                 self.reset_clip();
             }
             Shading::Striped => {
                 // a translucent fill is more attractive than stripes
                 self.set_source_rgba(r, g, b, MOCK_STRIPE_TRANSLUCENCY);
-                self.fill_preserve();
+                self.fill_preserve()?;
 
                 // draw a white band between the stroke and the translucent fill
                 self.set_source_gray(1.0);
                 self.set_line_width(stroke_width * 3.);
-                self.stroke_preserve();
+                self.stroke_preserve()?;
 
                 // draw the outside stroke in the card color
                 self.set_source_rgb(r, g, b);
@@ -311,9 +384,10 @@ impl ContextExt for Context {
                 // clip to the path so that the stroked shape has the
                 // same footprint as the filled shape
                 self.clip_preserve();
-                self.stroke();
+                self.stroke()?;
                 self.reset_clip();
             }
         }
+        Ok(())
     }
 }
Index: marmoset/src/core/shuffle.rs
===================================================================
--- marmoset.orig/src/core/shuffle.rs
+++ marmoset/src/core/shuffle.rs
@@ -19,7 +19,7 @@
 //! https://en.wikipedia.org/wiki/Fisher-Yates_shuffle
 //!
 
-use rand::{Rng, thread_rng};
+use rand::{thread_rng, Rng};
 
 pub trait Shuffle {
     fn shuffle(&mut self);
@@ -31,7 +31,7 @@ impl<T> Shuffle for [T] {
         let n = self.len();
 
         for i in (1..n).rev() {
-            let j = rng.gen_range(0, i+1);
+            let j = rng.gen_range(0..i + 1);
             self.swap(i, j);
         }
     }
Index: marmoset/src/main.rs
===================================================================
--- marmoset.orig/src/main.rs
+++ marmoset/src/main.rs
@@ -23,7 +23,8 @@ extern crate gtk;
 extern crate num_traits;
 extern crate rand;
 extern crate serde;
-#[macro_use] extern crate serde_derive;
+#[macro_use]
+extern crate serde_derive;
 extern crate serde_yaml;
 
 pub mod cell;
@@ -32,10 +33,10 @@ pub mod controller;
 pub mod game_state;
 pub mod rules;
 
+use gdk::prelude::*;
 use gdk::ModifierType;
-use gdk_pixbuf::{Pixbuf, PixbufLoader, PixbufLoaderExt};
+use gdk_pixbuf::{Pixbuf, PixbufLoader};
 use glib::{clone, Error};
-use gio::prelude::*;
 use gtk::prelude::*;
 use gtk::{AccelGroup, Application, ApplicationWindow, MenuItem};
 use std::cell::RefCell;
@@ -46,14 +47,17 @@ use crate::controller::Controller;
 use core::graphics::ColorScheme::{Classic, CMYK};
 
 /// A convenience type for passing data to menu building functions
-type MenuData<'a> = (&'a ApplicationWindow, &'a AccelGroup, &'a Rc<RefCell<Controller>>);
+type MenuData<'a> = (
+    &'a ApplicationWindow,
+    &'a AccelGroup,
+    &'a Rc<RefCell<Controller>>,
+);
 
 fn main() {
-    let app = Application::new(Some("org.nybble.marmoset"), Default::default())
-	.expect("Failed to initialize GTK application...");
+    let app = Application::new(Some("org.nybble.marmoset"), Default::default());
 
     app.connect_activate(|app| init(app));
-    app.run(&[]);
+    app.run();
 }
 
 fn init(app: &Application) {
@@ -95,12 +99,12 @@ fn build_window(app: &Application, contr
 
     // quit if the window is closed
     window.connect_delete_event(
-	clone!(@strong controller, @weak window => @default-return Inhibit(false), move |_, _| {
-	    // save the current window size in the config
-	    let config = &mut controller.borrow_mut().config;
-	    config.set_window_size(window.get_size());
-	    Inhibit(false)
-	})
+        clone!(@strong controller, @weak window => @default-return Inhibit(false), move |_, _| {
+            // save the current window size in the config
+            let config = &mut controller.borrow_mut().config;
+            config.set_window_size(window.size());
+            Inhibit(false)
+        }),
     );
 
     window
@@ -112,7 +116,7 @@ fn build_window(app: &Application, contr
 
 macro_rules! build_menu {
     ($menu:expr, [$( $e:expr ),*]) => {{
-	let menu = MenuItem::new_with_mnemonic($menu);
+	let menu = MenuItem::with_mnemonic($menu);
 	let submenu = gtk::Menu::new();
 	$( submenu.append(&$e); )*
 	menu.set_submenu(Some(&submenu));
@@ -120,13 +124,21 @@ macro_rules! build_menu {
     }}
 }
 
-fn make_menu_item(mnemonic: &str, accel_group: &AccelGroup,
-		  modifier: ModifierType, keys: &[char]) -> MenuItem
-{
-    let item = MenuItem::new_with_mnemonic(mnemonic);
+fn make_menu_item(
+    mnemonic: &str,
+    accel_group: &AccelGroup,
+    modifier: ModifierType,
+    keys: &[char],
+) -> MenuItem {
+    let item = MenuItem::with_mnemonic(mnemonic);
     for &key in keys.iter() {
-	item.add_accelerator("activate", accel_group, key as u32, modifier,
-			     gtk::AccelFlags::VISIBLE);
+        item.add_accelerator(
+            "activate",
+            accel_group,
+            key as u32,
+            modifier,
+            gtk::AccelFlags::VISIBLE,
+        );
     }
     item
 }
@@ -140,36 +152,37 @@ fn build_game_menu(menu_data: MenuData)
 
     // create menu items
     let new_game = make_menu_item("_New Game", accel_group, ModifierType::CONTROL_MASK, &['N']);
-    let restart = MenuItem::new_with_mnemonic("_Restart Game");
+    let restart = MenuItem::with_mnemonic("_Restart Game");
     let close = make_menu_item("_Close", accel_group, ModifierType::CONTROL_MASK, &['W']);
 
     new_game.connect_activate(
-	clone!(@strong controller => move |_| controller.borrow_mut().new_game())
+        clone!(@strong controller => move |_| controller.borrow_mut().new_game()),
     );
 
-    restart.connect_activate(
-	clone!(@strong controller => move |_| controller.borrow_mut().restart())
-    );
+    restart
+        .connect_activate(clone!(@strong controller => move |_| controller.borrow_mut().restart()));
 
-    close.connect_activate(
-	clone!(@weak window => move |_| window.close())
-    );
+    close.connect_activate(clone!(@weak window => move |_| window.close()));
 
     // disable restart menu by default
     restart.set_sensitive(false);
     // update restart status based on undo stack changes
     controller.borrow_mut().add_undo_observer(
-	clone!(@weak restart => move |controller| restart.set_sensitive(controller.can_undo()))
+        clone!(@weak restart => move |controller| restart.set_sensitive(controller.can_undo())),
     );
 
-    build_menu!("_Game",
-		[new_game,
-		 restart,
-		 gtk::SeparatorMenuItem::new(),
-		 build_variant_submenu(menu_data),
-		 build_deck_submenu(menu_data),
-		 gtk::SeparatorMenuItem::new(),
-		 close])
+    build_menu!(
+        "_Game",
+        [
+            new_game,
+            restart,
+            gtk::SeparatorMenuItem::new(),
+            build_variant_submenu(menu_data),
+            build_deck_submenu(menu_data),
+            gtk::SeparatorMenuItem::new(),
+            close
+        ]
+    )
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -180,29 +193,25 @@ fn build_variant_submenu(menu_data: Menu
     let (window, _accel_group, controller) = menu_data;
 
     // create menu items
-    let set_variant = gtk::RadioMenuItem::new_with_mnemonic("_Set");
-    let superset_variant = gtk::RadioMenuItem::new_with_mnemonic("S_uperSet");
+    let set_variant = gtk::RadioMenuItem::with_mnemonic("_Set");
+    let superset_variant = gtk::RadioMenuItem::with_mnemonic("S_uperSet");
     superset_variant.join_group(Some(&set_variant));
 
     // reflect config settings
     match controller.borrow().config.variant {
-	Variant::Set => set_variant.set_active(true),
-	Variant::SuperSet => superset_variant.set_active(true)
+        Variant::Set => set_variant.set_active(true),
+        Variant::SuperSet => superset_variant.set_active(true),
     }
 
-    set_variant.connect_toggled(
-	clone!(@strong controller, @weak window => move |_| {
-	    controller.borrow_mut().set_variant(Variant::Set);
-	    window.set_title("Set");
-	})
-    );
-
-    superset_variant.connect_toggled(
-	clone!(@strong controller, @weak window => move |_| {
-	    controller.borrow_mut().set_variant(Variant::SuperSet);
-	    window.set_title("SuperSet");
-	})
-    );
+    set_variant.connect_toggled(clone!(@strong controller, @weak window => move |_| {
+        controller.borrow_mut().set_variant(Variant::Set);
+        window.set_title("Set");
+    }));
+
+    superset_variant.connect_toggled(clone!(@strong controller, @weak window => move |_| {
+        controller.borrow_mut().set_variant(Variant::SuperSet);
+        window.set_title("SuperSet");
+    }));
 
     build_menu!("_Variant", [set_variant, superset_variant])
 }
@@ -215,25 +224,21 @@ fn build_deck_submenu(menu_data: MenuDat
     let (_window, _accel_group, controller) = menu_data;
 
     // create menu items
-    let beginner_deck = gtk::RadioMenuItem::new_with_mnemonic("_Beginner");
-    let full_deck = gtk::RadioMenuItem::new_with_mnemonic("_Full");
+    let beginner_deck = gtk::RadioMenuItem::with_mnemonic("_Beginner");
+    let full_deck = gtk::RadioMenuItem::with_mnemonic("_Full");
     full_deck.join_group(Some(&beginner_deck));
 
     // reflect config settings
     match controller.borrow().config.deck {
-	Deck::Simplified => beginner_deck.set_active(true),
-	Deck::Full => full_deck.set_active(true)
+        Deck::Simplified => beginner_deck.set_active(true),
+        Deck::Full => full_deck.set_active(true),
     }
 
-    beginner_deck.connect_toggled(
-	clone!(@strong controller => move |_|
-	       controller.borrow_mut().set_deck(Deck::Simplified))
-    );
+    beginner_deck.connect_toggled(clone!(@strong controller => move |_|
+	       controller.borrow_mut().set_deck(Deck::Simplified)));
 
-    full_deck.connect_toggled(
-	clone!(@strong controller => move |_|
-	       controller.borrow_mut().set_deck(Deck::Full))
-    );
+    full_deck.connect_toggled(clone!(@strong controller => move |_|
+	       controller.borrow_mut().set_deck(Deck::Full)));
 
     build_menu!("_Deck", [beginner_deck, full_deck])
 }
@@ -243,37 +248,33 @@ fn build_deck_submenu(menu_data: MenuDat
 ////////////////////////////////////////////////////////////////////////////////
 
 fn connect_undo_redo(controller: &Rc<RefCell<Controller>>, undo: &MenuItem, redo: &MenuItem) {
-    undo.connect_activate(
-	clone!(@strong controller => move |_| controller.borrow_mut().undo())
-    );
+    undo.connect_activate(clone!(@strong controller => move |_| controller.borrow_mut().undo()));
 
-    redo.connect_activate(
-	clone!(@strong controller => move |_| controller.borrow_mut().redo())
-    );
+    redo.connect_activate(clone!(@strong controller => move |_| controller.borrow_mut().redo()));
 
     // undo and redo are disabled by default
     undo.set_sensitive(false);
     redo.set_sensitive(false);
 
     // update undo/redo status based on undo stack changes
-    controller.borrow_mut().add_undo_observer(
-	clone!(@weak undo, @weak redo => move |controller| {
-	    undo.set_sensitive(controller.can_undo());
-	    redo.set_sensitive(controller.can_redo());
-
-	    if let Some(action) = controller.undo_action_name() {
-		undo.set_label(&format!("_Undo {}", action));
-	    } else {
-		undo.set_label("_Undo");
-	    }
-
-	    if let Some(action) = controller.redo_action_name() {
-		redo.set_label(&format!("_Redo {}", action));
-	    } else {
-		redo.set_label("_Redo");
-	    }
-	})
-    );
+    controller
+        .borrow_mut()
+        .add_undo_observer(clone!(@weak undo, @weak redo => move |controller| {
+            undo.set_sensitive(controller.can_undo());
+            redo.set_sensitive(controller.can_redo());
+
+            if let Some(action) = controller.undo_action_name() {
+            undo.set_label(&format!("_Undo {}", action));
+            } else {
+            undo.set_label("_Undo");
+            }
+
+            if let Some(action) = controller.redo_action_name() {
+            redo.set_label(&format!("_Redo {}", action));
+            } else {
+            redo.set_label("_Redo");
+            }
+        }));
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -291,8 +292,8 @@ fn build_control_menu(menu_data: MenuDat
     let redo = make_menu_item("_Redo", accel_group, ctrl_shift, &['Z']);
     let hint = make_menu_item("_Hint", accel_group, no_modifier, &['?', '/']);
     let deal_more = make_menu_item("_Deal More Cards", accel_group, no_modifier, &['+', '=']);
-    let tidy_layout = gtk::CheckMenuItem::new_with_mnemonic("_Tidy Layout");
-    let classic_colors = gtk::CheckMenuItem::new_with_mnemonic("_Classic Colors");
+    let tidy_layout = gtk::CheckMenuItem::with_mnemonic("_Tidy Layout");
+    let classic_colors = gtk::CheckMenuItem::with_mnemonic("_Classic Colors");
 
     // reflect config settings
     tidy_layout.set_active(config.tidy_layout);
@@ -301,41 +302,37 @@ fn build_control_menu(menu_data: MenuDat
     // undo and redo require a bit more setup than other menu items
     connect_undo_redo(controller, &undo, &redo);
 
-    hint.connect_activate(
-	clone!(@strong controller, @weak window => move |_| {
-	    let message = controller.borrow_mut().show_hint();
-	    show_message_dialog(message, &window);
-	})
-    );
-
-    deal_more.connect_activate(
-	clone!(@strong controller, @weak window => move |_| {
-	    let message = controller.borrow_mut().deal_more_cards();
-	    show_message_dialog(message, &window);
-	})
-    );
-
-    tidy_layout.connect_toggled(
-	clone!(@strong controller => move |w|
-	       controller.borrow_mut().set_tidy_layout(w.get_active()))
-    );
-
-    classic_colors.connect_toggled(
-	clone!(@strong controller => move |w|  {
-	    let scheme = if w.get_active() { Classic } else { CMYK };
-	    controller.borrow_mut().set_color_scheme(scheme);
-	})
-    );
-
-    build_menu!("_Control",
-		[undo,
-		 redo,
-		 gtk::SeparatorMenuItem::new(),
-		 hint,
-		 deal_more,
-		 gtk::SeparatorMenuItem::new(),
-		 tidy_layout,
-		 classic_colors])
+    hint.connect_activate(clone!(@strong controller, @weak window => move |_| {
+        let message = controller.borrow_mut().show_hint();
+        show_message_dialog(message, &window);
+    }));
+
+    deal_more.connect_activate(clone!(@strong controller, @weak window => move |_| {
+        let message = controller.borrow_mut().deal_more_cards();
+        show_message_dialog(message, &window);
+    }));
+
+    tidy_layout.connect_toggled(clone!(@strong controller => move |w|
+	       controller.borrow_mut().set_tidy_layout(w.is_active())));
+
+    classic_colors.connect_toggled(clone!(@strong controller => move |w|  {
+        let scheme = if w.is_active() { Classic } else { CMYK };
+        controller.borrow_mut().set_color_scheme(scheme);
+    }));
+
+    build_menu!(
+        "_Control",
+        [
+            undo,
+            redo,
+            gtk::SeparatorMenuItem::new(),
+            hint,
+            deal_more,
+            gtk::SeparatorMenuItem::new(),
+            tidy_layout,
+            classic_colors
+        ]
+    )
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -349,7 +346,7 @@ static COMMENT: &str = include_str!("../
 fn logo_loader() -> Result<PixbufLoader, Error> {
     let data = include_bytes!("../resources/logo.png");
 
-    let loader = PixbufLoader::new_with_type("png")?;
+    let loader = PixbufLoader::with_type("png")?;
     loader.write(data)?;
     loader.close()?;
 
@@ -358,30 +355,30 @@ fn logo_loader() -> Result<PixbufLoader,
 
 fn logo() -> Option<Pixbuf> {
     match logo_loader() {
-	Ok(loader) => loader.get_pixbuf(),
-	Err(_) => None,
+        Ok(loader) => loader.pixbuf(),
+        Err(_) => None,
     }
 }
 
 fn build_help_menu(window: &ApplicationWindow) -> MenuItem {
-    let about = MenuItem::new_with_mnemonic("_About");
-    about.connect_activate(
-	clone!(@weak window => move |_| {
-	    let a = gtk::AboutDialog::new();
-	    a.set_program_name("Marmoset");
-	    a.set_logo(logo().as_ref());
-	    a.set_comments(Some(COMMENT));
-	    a.set_copyright(Some("Copyright © 2017-2020 Steve Sprang"));
-	    a.set_license_type(gtk::License::Gpl30);
-	    a.set_license(Some(LICENSE));
-	    a.set_website(Some("https://github.com/sprang/marmoset"));
-	    a.set_website_label(Some("Marmoset Website"));
-	    a.set_version(Some(VERSION));
-	    a.set_transient_for(Some(&window));
-	    a.run();
-	    a.destroy();
-	})
-    );
+    let about = MenuItem::with_mnemonic("_About");
+    about.connect_activate(clone!(@weak window => move |_| {
+        let a = gtk::AboutDialog::new();
+        a.set_program_name("Marmoset");
+        a.set_logo(logo().as_ref());
+        a.set_comments(Some(COMMENT));
+        a.set_copyright(Some("Copyright © 2017-2020 Steve Sprang"));
+        a.set_license_type(gtk::License::Gpl30);
+        a.set_license(Some(LICENSE));
+        a.set_website(Some("https://github.com/sprang/marmoset"));
+        a.set_website_label(Some("Marmoset Website"));
+        a.set_version(Some(VERSION));
+        a.set_transient_for(Some(&window));
+        a.run();
+        unsafe {
+        a.destroy();
+        }
+    }));
 
     build_menu!("_Help", [about])
 }
@@ -392,13 +389,17 @@ fn build_help_menu(window: &ApplicationW
 
 fn show_message_dialog(message: Option<String>, window: &ApplicationWindow) {
     if let Some(string) = message {
-	let md = gtk::MessageDialog::new(Some(window),
-					 gtk::DialogFlags::empty(),
-					 gtk::MessageType::Info,
-					 gtk::ButtonsType::Ok,
-					 &string);
-	md.set_markup(&format!("<big>{}</big>", string));
-	md.run();
-	md.destroy();
+        let md = gtk::MessageDialog::new(
+            Some(window),
+            gtk::DialogFlags::empty(),
+            gtk::MessageType::Info,
+            gtk::ButtonsType::Ok,
+            &string,
+        );
+        md.set_markup(&format!("<big>{}</big>", string));
+        md.run();
+        unsafe {
+            md.destroy();
+        }
     }
 }
