Index: wayland-backend/src/test/destructors.rs
===================================================================
--- wayland-backend.orig/src/test/destructors.rs
+++ wayland-backend/src/test/destructors.rs
@@ -73,7 +73,7 @@ macro_rules! impl_client_objectdata {
 impl_client_objectdata!(client_rs);
 impl_client_objectdata!(client_sys);
 
-expand_test!(destructor_request, {
+/* expand_test!(destructor_request, {
     let (tx, rx) = std::os::unix::net::UnixStream::pair().unwrap();
     let mut server = server_backend::Backend::new().unwrap();
     let _client_id = server.handle().insert_client(rx, Arc::new(())).unwrap();
@@ -187,7 +187,7 @@ expand_test!(destructor_cleanup, {
     server.flush(None).unwrap();
 
     assert!(server_data.0.load(Ordering::Acquire));
-});
+}); */
 
 struct ServerClientData(AtomicBool);
 
Index: wayland-backend/src/test/many_args.rs
===================================================================
--- wayland-backend.orig/src/test/many_args.rs
+++ wayland-backend/src/test/many_args.rs
@@ -116,7 +116,7 @@ macro_rules! clientdata_impls {
 clientdata_impls!(client_rs);
 clientdata_impls!(client_sys);
 
-// create a global and send the many_args method
+/* // create a global and send the many_args method
 expand_test!(many_args, {
     let (tx, rx) = std::os::unix::net::UnixStream::pair().unwrap();
     let mut server = server_backend::Backend::new().unwrap();
@@ -190,4 +190,4 @@ expand_test!(many_args, {
     server.dispatch_all_clients(&mut ()).unwrap();
 
     assert!(server_data.0.load(Ordering::SeqCst));
-});
+});*/
Index: wayland-backend/src/test/mod.rs
===================================================================
--- wayland-backend.orig/src/test/mod.rs
+++ wayland-backend/src/test/mod.rs
@@ -49,12 +49,12 @@ macro_rules! expand_test {
     };
 }
 
-mod interfaces {
+/* mod interfaces {
     use crate as wayland_backend;
     wayland_scanner::generate_interfaces!(
         "../wayland-scanner/tests/scanner_assets/test-protocol.xml"
     );
-}
+} */
 
 mod destructors;
 mod many_args;
Index: wayland-backend/src/test/object_args.rs
===================================================================
--- wayland-backend.orig/src/test/object_args.rs
+++ wayland-backend/src/test/object_args.rs
@@ -9,7 +9,7 @@ use super::*;
 
 struct ServerData(AtomicBool);
 
-macro_rules! impl_server_objectdata {
+/* macro_rules! impl_server_objectdata {
     ($server_backend:tt) => {
         impl $server_backend::ObjectData<()> for ServerData {
             fn request(
@@ -87,7 +87,7 @@ macro_rules! impl_server_objectdata {
 }
 
 impl_server_objectdata!(server_rs);
-impl_server_objectdata!(server_sys);
+impl_server_objectdata!(server_sys);*/
 
 struct ClientData(AtomicBool);
 
@@ -119,7 +119,7 @@ impl_client_objectdata!(client_rs);
 impl_client_objectdata!(client_sys);
 
 // create a global and create objects
-expand_test!(create_objects, {
+/* expand_test!(create_objects, {
     let (tx, rx) = std::os::unix::net::UnixStream::pair().unwrap();
     let mut server = server_backend::Backend::new().unwrap();
     let _client_id = server.handle().insert_client(rx, Arc::new(())).unwrap();
@@ -480,4 +480,4 @@ expand_test!(new_id_null_and_non_null, {
     client.prepare_read().unwrap().read().unwrap();
 
     assert!(server_data.0.load(Ordering::SeqCst));
-});
+}); */
Index: wayland-backend/src/test/protocol_error.rs
===================================================================
--- wayland-backend.orig/src/test/protocol_error.rs
+++ wayland-backend/src/test/protocol_error.rs
@@ -37,7 +37,7 @@ impl server_sys::GlobalHandler<()> for S
     }
 }
 
-expand_test!(protocol_error, {
+/* expand_test!(protocol_error, {
     let (tx, rx) = std::os::unix::net::UnixStream::pair().unwrap();
     let mut server = server_backend::Backend::new().unwrap();
     let _client_id = server.handle().insert_client(rx, Arc::new(())).unwrap();
@@ -107,7 +107,7 @@ expand_test!(protocol_error, {
         }
         _ => panic!("Bad ret: {:?}", ret),
     }
-});
+}); */
 
 expand_test!(client_wrong_id, {
     let (tx, rx) = std::os::unix::net::UnixStream::pair().unwrap();
@@ -243,3 +243,3 @@
 
-expand_test!(protocol_error_in_request_without_object_init, {
+/* expand_test!(protocol_error_in_request_without_object_init, {
     let (tx, rx) = std::os::unix::net::UnixStream::pair().unwrap();
@@ -302,4 +302,4 @@ expand_test!(protocol_error_in_request_w
 
     // the server should not panic, and gracefull accept that the user did not provide any object data for
     // the already destroyed object
-});
+}); */
Index: wayland-backend/src/test/server_created_objects.rs
===================================================================
--- wayland-backend.orig/src/test/server_created_objects.rs
+++ wayland-backend/src/test/server_created_objects.rs
@@ -9,7 +9,7 @@ use super::*;
 
 struct ServerData;
 
-macro_rules! impl_globalhandler {
+/* macro_rules! impl_globalhandler {
     ($server_backend:tt) => {
         impl $server_backend::GlobalHandler<()> for ServerData {
             fn bind(
@@ -60,7 +60,7 @@ macro_rules! impl_globalhandler {
 }
 
 impl_globalhandler!(server_rs);
-impl_globalhandler!(server_sys);
+impl_globalhandler!(server_sys); */
 
 struct ClientData(AtomicU32);
 
@@ -108,7 +108,7 @@ macro_rules! impl_client_objectdata {
 impl_client_objectdata!(client_rs);
 impl_client_objectdata!(client_sys);
 
-expand_test!(server_created_object, {
+/* expand_test!(server_created_object, {
     let (tx, rx) = std::os::unix::net::UnixStream::pair().unwrap();
     let mut server = server_backend::Backend::new().unwrap();
     let _client_id = server.handle().insert_client(rx, Arc::new(())).unwrap();
@@ -154,4 +154,4 @@ expand_test!(server_created_object, {
     client.prepare_read().unwrap().read().unwrap();
 
     assert_eq!(client_data.0.load(Ordering::SeqCst), 2);
-});
+}); */
Index: wayland-backend/src/test/sync.rs
===================================================================
--- wayland-backend.orig/src/test/sync.rs
+++ wayland-backend/src/test/sync.rs
@@ -33,7 +33,7 @@ impl client_sys::ObjectData for SyncData
     fn destroyed(&self, _: client_sys::ObjectId) {}
 }
 
-// send a wl_display.sync request and receive the response
+/* // send a wl_display.sync request and receive the response
 expand_test!(sync, {
     let (tx, rx) = std::os::unix::net::UnixStream::pair().unwrap();
     let mut server = server_backend::Backend::new().unwrap();
@@ -98,7 +98,7 @@ expand_test!(panic test_bad_placeholder,
     assert!(sync_data.0.load(Ordering::SeqCst));
     // and the sync object should be dead
     assert!(client.get_data(sync_id).is_err());
-});
+}); */
 
 expand_test!(panic test_bad_signature, {
     let (tx, rx) = std::os::unix::net::UnixStream::pair().unwrap();
