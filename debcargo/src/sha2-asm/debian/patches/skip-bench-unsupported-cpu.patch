Index: rust-sha2-asm-0.6.2/Cargo.toml
===================================================================
--- rust-sha2-asm-0.6.2.orig/Cargo.toml
+++ rust-sha2-asm-0.6.2/Cargo.toml
@@ -23,3 +23,6 @@ license = "MIT"
 repository = "https://github.com/RustCrypto/asm-hashes"
 [build-dependencies.cc]
 version = "1.0"
+
+[target."cfg(any(target_arch = \"aarch64\", target_arch = \"x86_64\", target_arch = \"x86\"))".dev-dependencies.cpufeatures]
+version = "0.2"
Index: rust-sha2-asm-0.6.2/benches/lib.rs
===================================================================
--- rust-sha2-asm-0.6.2.orig/benches/lib.rs
+++ rust-sha2-asm-0.6.2/benches/lib.rs
@@ -1,4 +1,3 @@
-#![no_std]
 #![feature(test)]
 
 extern crate test;
@@ -6,8 +5,18 @@ extern crate test;
 use test::Bencher;
 
 #[cfg(any(target_arch = "x86_64", target_arch = "x86", target_arch = "aarch64"))]
+#[cfg(target_arch = "aarch64")]
+cpufeatures::new!(hwsuitable, "sha2");
+#[cfg(any(target_arch = "x86_64", target_arch = "x86"))]
+cpufeatures::new!(hwsuitable, "sha", "sse2", "ssse3", "sse4.1");
+
+#[cfg(any(target_arch = "x86_64", target_arch = "x86", target_arch = "aarch64"))]
 #[bench]
 fn bench_compress256(b: &mut Bencher) {
+    if !hwsuitable::get() {
+        println!("your hardware is not suitable for the assemnbler implementations in this crate, skipping bench");
+        return;
+    }
     let mut state = Default::default();
     let data = [[0u8; 64]];
 
@@ -21,6 +30,10 @@ fn bench_compress256(b: &mut Bencher) {
 #[cfg(any(target_arch = "x86_64", target_arch = "x86"))]
 #[bench]
 fn bench_compress512(b: &mut Bencher) {
+    if !hwsuitable::get() {
+        println!("your hardware is not suitable for the assemnbler implementations in this crate, skipping bench");
+        return;
+    }
     let mut state = Default::default();
     let data = [[0u8; 128]];
 
