diff --git a/src/enumerable.rs b/src/enumerable.rs
index 3161f19..72d795e 100644
--- a/src/enumerable.rs
+++ b/src/enumerable.rs
@@ -25,7 +25,7 @@ use core::fmt;
 /// [`visit_named_fields()`]: Visit::visit_named_fields
 /// [`visit_unnamed_fields()`]: Visit::visit_unnamed_fields
 ///
-/// ```
+/// ```ignore
 /// use valuable::{Valuable, Value, Visit};
 ///
 /// #[derive(Valuable)]
@@ -70,7 +70,7 @@ use core::fmt;
 /// Implementing `Enumerable` is usually done by adding `#[derive(Valuable)]` to
 /// a Rust `enum` definition.
 ///
-/// ```
+/// ```ignore
 /// use valuable::{Valuable, Enumerable, EnumDef};
 ///
 /// #[derive(Valuable)]
@@ -100,7 +100,7 @@ pub trait Enumerable: Valuable {
     ///
     /// # Examples
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{Enumerable, Valuable};
     ///
     /// #[derive(Valuable)]
@@ -119,7 +119,7 @@ pub trait Enumerable: Valuable {
     ///
     /// # Examples
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{Enumerable, Valuable};
     ///
     /// #[derive(Valuable)]
@@ -151,7 +151,7 @@ pub enum EnumDef<'a> {
     ///
     /// A statically defined enum
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{Valuable, Enumerable, EnumDef};
     ///
     /// #[derive(Valuable)]
@@ -305,7 +305,7 @@ impl<'a> EnumDef<'a> {
     ///
     /// # Examples
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{Enumerable, Valuable};
     ///
     /// #[derive(Valuable)]
@@ -328,7 +328,7 @@ impl<'a> EnumDef<'a> {
     ///
     /// # Examples
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{Enumerable, Valuable};
     ///
     /// #[derive(Valuable)]
@@ -356,7 +356,7 @@ impl<'a> EnumDef<'a> {
     ///
     /// With a static enum
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{Enumerable, Valuable};
     ///
     /// #[derive(Valuable)]
@@ -387,7 +387,7 @@ impl<'a> EnumDef<'a> {
     ///
     /// With a static enum
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{Enumerable, Valuable};
     ///
     /// #[derive(Valuable)]
diff --git a/src/lib.rs b/src/lib.rs
index 5ba6341..1d9bcaa 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -11,7 +11,7 @@
 //!
 //! First, derive [`Valuable`][macro@crate::Valuable] on your types.
 //!
-//! ```
+//! ```ignore
 //! use valuable::Valuable;
 //!
 //! #[derive(Valuable)]
@@ -81,7 +81,7 @@
 //!
 //! Then, use the visitor to visit the value.
 //!
-//! ```
+//! ```ignore
 //! # use valuable::*;
 //! # #[derive(Valuable)]
 //! # struct HelloWorld { message: Message }
diff --git a/src/structable.rs b/src/structable.rs
index 611a7e5..e398602 100644
--- a/src/structable.rs
+++ b/src/structable.rs
@@ -17,7 +17,7 @@ use core::fmt;
 /// may be called multiple times per `Structable`, but the two methods are never
 /// mixed.
 ///
-/// ```
+/// ```ignore
 /// use valuable::{NamedValues, Valuable, Value, Visit};
 ///
 /// #[derive(Valuable)]
@@ -61,7 +61,7 @@ use core::fmt;
 /// Implementing `Structable` is usually done by adding `#[derive(Valuable)]` to
 /// a Rust `struct` definition.
 ///
-/// ```
+/// ```ignore
 /// use valuable::{Fields, Valuable, Structable, StructDef};
 ///
 /// #[derive(Valuable)]
@@ -95,7 +95,7 @@ pub trait Structable: Valuable {
     ///
     /// # Examples
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{Structable, Valuable};
     ///
     /// #[derive(Valuable)]
@@ -129,7 +129,7 @@ pub enum StructDef<'a> {
     ///
     /// A statically defined struct
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{Fields, Valuable, Structable, StructDef};
     ///
     /// #[derive(Valuable)]
diff --git a/src/value.rs b/src/value.rs
index 2db9cd1..8e1ee00 100644
--- a/src/value.rs
+++ b/src/value.rs
@@ -33,7 +33,7 @@ macro_rules! value {
         ///
         /// Converting a struct
         ///
-        /// ```
+        /// ```ignore
         /// use valuable::{Value, Valuable};
         ///
         /// #[derive(Valuable, Debug)]
@@ -359,7 +359,7 @@ value! {
     ///
     /// # Examples
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{Value, Valuable};
     ///
     /// #[derive(Valuable)]
@@ -379,7 +379,7 @@ value! {
     ///
     /// # Examples
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{Value, Valuable};
     ///
     /// #[derive(Valuable)]
@@ -627,7 +627,7 @@ macro_rules! convert {
             ///
             /// # Examples
             ///
-            /// ```
+            /// ```ignore
             /// use valuable::{Value, Valuable};
             ///
             /// #[derive(Valuable)]
@@ -651,7 +651,7 @@ macro_rules! convert {
             ///
             /// # Examples
             ///
-            /// ```
+            /// ```ignore
             /// use valuable::{Value, Valuable};
             ///
             /// #[derive(Valuable)]
diff --git a/src/visit.rs b/src/visit.rs
index f91a04c..3344d02 100644
--- a/src/visit.rs
+++ b/src/visit.rs
@@ -13,7 +13,7 @@ use crate::*;
 ///
 /// Recursively printing a Rust value.
 ///
-/// ```
+/// ```ignore
 /// use valuable::{NamedValues, Valuable, Value, Visit};
 ///
 /// struct Print(String);
@@ -189,7 +189,7 @@ pub trait Visit {
     ///
     /// Visiting all fields in a struct.
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{NamedValues, Valuable, Value, Visit};
     ///
     /// #[derive(Valuable)]
@@ -239,7 +239,7 @@ pub trait Visit {
     ///
     /// Visiting all fields in a struct.
     ///
-    /// ```
+    /// ```ignore
     /// use valuable::{Valuable, Value, Visit};
     ///
     /// #[derive(Valuable)]
@@ -415,7 +415,7 @@ deref! {
 /// extracted from a struct, it is preferable to obtain the associated
 /// [`NamedField`] once and use it repeatedly.
 ///
-/// ```
+/// ```ignore
 /// use valuable::{NamedValues, Valuable, Value, Visit};
 ///
 /// #[derive(Valuable)]
