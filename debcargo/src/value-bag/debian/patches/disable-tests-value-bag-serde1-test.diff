Index: value-bag/src/internal/serde/v1.rs
===================================================================
--- value-bag.orig/src/internal/serde/v1.rs
+++ value-bag/src/internal/serde/v1.rs
@@ -835,13 +835,13 @@ mod tests {
         );
     }
 
-    #[test]
+    /*#[test]
     #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
     fn serde1_structured() {
         use value_bag_serde1::test::{assert_ser_tokens, Token};
 
         assert_ser_tokens(&ValueBag::from(42u64), &[Token::U64(42)]);
-    }
+    }*/
 
     #[test]
     #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
@@ -914,7 +914,7 @@ mod tests {
 
         use crate::std::vec::Vec;
 
-        #[test]
+        /*#[test]
         #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
         fn serde1_stream_str_seq() {
             use value_bag_serde1::test::{assert_ser_tokens, Token};
@@ -929,7 +929,7 @@ mod tests {
                     Token::SeqEnd,
                 ],
             );
-        }
+        }*/
 
         #[test]
         #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
Index: value-bag/src/internal/sval/v2.rs
===================================================================
--- value-bag.orig/src/internal/sval/v2.rs
+++ value-bag/src/internal/sval/v2.rs
@@ -759,7 +759,7 @@ mod tests {
             .expect("failed to visit value");
     }
 
-    #[test]
+    /*#[test]
     #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
     #[cfg(feature = "serde1")]
     fn sval2_serde1() {
@@ -777,7 +777,7 @@ mod tests {
         }
 
         assert_ser_tokens(&ValueBag::capture_sval2(&TestSval), &[Token::U64(42)]);
-    }
+    }*/
 
     #[cfg(feature = "seq")]
     mod seq_support {
