Description: set override for tests.
 autopkgtests runs tests in an environment that causes colorisation to be
 disabled by default which causes many of the tests to fail. This patch
 forciblly enables colorisation for such tests.
Author: Peter Michael Green <plugwash@debian.org>

--- rust-colored-2.1.0.orig/src/lib.rs
+++ rust-colored-2.1.0/src/lib.rs
@@ -634,6 +634,7 @@ impl From<ColoredString> for Box<dyn Err
 #[cfg(test)]
 mod tests {
     use super::*;
+    use crate::control::set_override;
 
     #[test]
     fn formatting() {
@@ -698,6 +699,7 @@ mod tests {
     fn compute_style_simple_fg_blue() {
         let blue = "\x1B[34m";
 
+        set_override(true);
         assert_eq!(blue, "".blue().compute_style());
     }
 
@@ -706,6 +708,7 @@ mod tests {
     fn compute_style_simple_bg_blue() {
         let on_blue = "\x1B[44m";
 
+        set_override(true);
         assert_eq!(on_blue, "".on_blue().compute_style());
     }
 
@@ -713,7 +716,7 @@ mod tests {
     #[test]
     fn compute_style_blue_on_blue() {
         let blue_on_blue = "\x1B[44;34m";
-
+        set_override(true);
         assert_eq!(blue_on_blue, "".blue().on_blue().compute_style());
     }
 
@@ -722,6 +725,7 @@ mod tests {
     fn compute_style_simple_fg_bright_blue() {
         let blue = "\x1B[94m";
 
+        set_override(true);
         assert_eq!(blue, "".bright_blue().compute_style());
     }
 
@@ -730,6 +734,7 @@ mod tests {
     fn compute_style_simple_bg_bright_blue() {
         let on_blue = "\x1B[104m";
 
+        set_override(true);
         assert_eq!(on_blue, "".on_bright_blue().compute_style());
     }
 
@@ -738,6 +743,7 @@ mod tests {
     fn compute_style_bright_blue_on_bright_blue() {
         let blue_on_blue = "\x1B[104;94m";
 
+        set_override(true);
         assert_eq!(
             blue_on_blue,
             "".bright_blue().on_bright_blue().compute_style()
@@ -749,6 +755,7 @@ mod tests {
     fn compute_style_simple_bold() {
         let bold = "\x1B[1m";
 
+        set_override(true);
         assert_eq!(bold, "".bold().compute_style());
     }
 
@@ -756,7 +763,7 @@ mod tests {
     #[test]
     fn compute_style_blue_bold() {
         let blue_bold = "\x1B[1;34m";
-
+        set_override(true);
         assert_eq!(blue_bold, "".blue().bold().compute_style());
     }
 
@@ -765,6 +772,7 @@ mod tests {
     fn compute_style_blue_bold_on_blue() {
         let blue_bold_on_blue = "\x1B[1;44;34m";
 
+        set_override(true);
         assert_eq!(
             blue_bold_on_blue,
             "".blue().bold().on_blue().compute_style()
@@ -800,6 +808,7 @@ mod tests {
         let input = format!("start {} end", String::from("hello world !").red());
         let style = input.blue();
 
+        set_override(true);
         let output = style.escape_inner_reset_sequences();
         let blue = "\x1B[34m";
         let red = "\x1B[31m";
@@ -819,6 +828,7 @@ mod tests {
         );
         let style = input.blue();
 
+        set_override(true);
         let output = style.escape_inner_reset_sequences();
         let blue = "\x1B[34m";
         let italic = "\x1B[3m";
--- rust-colored-2.1.0.orig/tests/ansi_term_compat.rs
+++ rust-colored-2.1.0/tests/ansi_term_compat.rs
@@ -11,6 +11,7 @@ macro_rules! test_simple_color {
     ($string:expr, $colored_name:ident, $ansi_term_name:ident) => {
         #[test]
         fn $colored_name() {
+            set_override(true);
             let s = format!("{} {}", $string, stringify!($colored_name));
             assert_eq!(
                 s.$colored_name().to_string(),
@@ -23,6 +24,7 @@ macro_rules! test_simple_color {
 mod compat_colors {
     use super::ansi_term::*;
     use super::colored::*;
+    use colored::control::set_override;
 
     test_simple_color!("test string", black, Black);
     test_simple_color!("test string", red, Red);
@@ -38,6 +40,7 @@ macro_rules! test_simple_style {
     ($string:expr, $style:ident) => {
         #[test]
         fn $style() {
+            set_override(true);
             let s = format!("{} {}", $string, stringify!($style));
             assert_eq!(
                 s.$style().to_string(),
@@ -52,6 +55,7 @@ mod compat_styles {
     use super::ansi_term::*;
     use super::colored;
     use super::colored::*;
+    use colored::control::set_override;
 
     test_simple_style!("test string", bold);
     test_simple_style!("test string", dimmed);
@@ -66,6 +70,7 @@ macro_rules! test_simple_bgcolor {
     ($string:expr, $colored_name:ident, $ansi_term_name:ident) => {
         #[test]
         fn $colored_name() {
+            set_override(true);
             let s = format!("{} {}", $string, stringify!($colored_name));
             assert_eq!(
                 s.$colored_name().to_string(),
@@ -83,6 +88,7 @@ mod compat_bgcolors {
     use super::ansi_term::*;
     use super::colored;
     use super::colored::*;
+    use colored::control::set_override;
 
     test_simple_bgcolor!("test string", on_black, Black);
     test_simple_bgcolor!("test string", on_red, Red);
@@ -99,9 +105,11 @@ mod compat_complex {
     use super::ansi_term::*;
     use super::colored;
     use super::colored::*;
+    use colored::control::set_override;
 
     #[test]
     fn complex1() {
+        set_override(true);
         let s = "test string";
         let ansi = Colour::Red.on(Colour::Black).bold().italic().paint(s);
         assert_eq!(
@@ -112,6 +120,7 @@ mod compat_complex {
 
     #[test]
     fn complex2() {
+        set_override(true);
         let s = "test string";
         let ansi = Colour::Green.on(Colour::Yellow).underline().paint(s);
         assert_eq!(
@@ -126,9 +135,11 @@ mod compat_overrides {
     use super::ansi_term::*;
     use super::colored;
     use super::colored::*;
+    use colored::control::set_override;
 
     #[test]
     fn overrides1() {
+        set_override(true);
         let s = "test string";
         let ansi = Colour::Red.on(Colour::Black).on(Colour::Blue).paint(s);
         assert_eq!(ansi.to_string(), s.red().on_blue().to_string());
@@ -136,6 +147,7 @@ mod compat_overrides {
 
     #[test]
     fn overrides2() {
+        set_override(true);
         let s = "test string";
         let ansi = Colour::Green.on(Colour::Yellow).paint(s);
         assert_eq!(
