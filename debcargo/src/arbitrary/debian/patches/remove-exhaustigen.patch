Index: arbitrary/Cargo.toml
===================================================================
--- arbitrary.orig/Cargo.toml
+++ arbitrary/Cargo.toml
@@ -46,8 +46,5 @@ required-features = ["derive"]
 version = "1.3.2"
 optional = true
 
-[dev-dependencies.exhaustigen]
-version = "0.1.0"
-
 [features]
 derive = ["derive_arbitrary"]
Index: arbitrary/src/lib.rs
===================================================================
--- arbitrary.orig/src/lib.rs
+++ arbitrary/src/lib.rs
@@ -1196,7 +1196,7 @@ impl<'a> Arbitrary<'a> for IpAddr {
 mod test {
     use super::*;
 
-    /// Assert that the given expected values are all generated.
+    /* /// Assert that the given expected values are all generated.
     ///
     /// Exhaustively enumerates all buffers up to length 10 containing the
     /// following bytes: `0x00`, `0x01`, `0x61` (aka ASCII 'a'), and `0xff`
@@ -1244,7 +1244,7 @@ mod test {
              T::arbitrary did not generate: {arbitrary_expected:#?}\n\n\
              T::arbitrary_take_rest did not generate {arbitrary_take_rest_expected:#?}"
         )
-    }
+    } */
 
     /// Generates an arbitrary `T`, and checks that the result is consistent with the
     /// `size_hint()` reported by `T`.
@@ -1309,7 +1309,7 @@ mod test {
         assert_eq!(z, [0, 0]);
     }
 
-    #[test]
+    /*#[test]
     fn arbitrary_for_integers() {
         let x = [1, 2, 3, 4];
         let mut buf = Unstructured::new(&x);
@@ -1326,7 +1326,7 @@ mod test {
             i32::from_ne_bytes([1, 1, 1, 1]),
             i32::from_ne_bytes([0xff, 0xff, 0xff, 0xff]),
         ]);
-    }
+    }*/
 
     #[test]
     fn arbitrary_for_bytes() {
@@ -1346,7 +1346,7 @@ mod test {
         assert_eq!(expected, actual);
     }
 
-    #[test]
+    /*#[test]
     fn arbitrary_for_vec_u8() {
         assert_generates::<Vec<u8>>([
             vec![],
@@ -1407,12 +1407,12 @@ mod test {
             vec![vec![], vec![vec![]], vec![]],
             vec![vec![], vec![], vec![vec![]]],
         ]);
-    }
+    }*/
 
-    #[test]
+    /*#[test]
     fn arbitrary_for_string() {
         assert_generates::<String>(["".into(), "a".into(), "aa".into(), "aaa".into()]);
-    }
+    }*/
 
     #[test]
     fn arbitrary_collection() {
