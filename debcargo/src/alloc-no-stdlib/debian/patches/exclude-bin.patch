diff --git a/Cargo.toml b/Cargo.toml
index c547177..06fefe3 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -13,7 +13,6 @@
 name = "alloc-no-stdlib"
 version = "2.0.4"
 authors = ["Daniel Reiter Horn <danielrh@dropbox.com>"]
-autobins = false
 description = "A dynamic allocator that may be used with or without the stdlib. This allows a package with nostd to allocate memory dynamically and be used either with a custom allocator, items on the stack, or by a package that wishes to simply use Box<>. It also provides options to use calloc or a mutable global variable for pre-zeroed memory"
 homepage = "https://github.com/dropbox/rust-alloc-no-stdlib"
 documentation = "https://raw.githubusercontent.com/dropbox/rust-alloc-no-stdlib/master/tests/lib.rs"
@@ -28,8 +27,5 @@ keywords = [
 license = "BSD-3-Clause"
 repository = "https://github.com/dropbox/rust-alloc-no-stdlib"
 
-[[bin]]
-name = "example"
-
 [features]
 unsafe = []
diff --git a/src/allocated_memory/index_macro.rs b/src/allocated_memory/index_macro.rs
old mode 100755
new mode 100644
diff --git a/src/bin/example.rs b/src/bin/example.rs
deleted file mode 100644
index 60cc42a..0000000
--- a/src/bin/example.rs
+++ /dev/null
@@ -1,116 +0,0 @@
-//#![feature(trace_macros)]
-#[macro_use]
-extern crate alloc_no_stdlib;
-extern crate core;
-use core::ops;
-mod heap_alloc;
-
-pub use heap_alloc::HeapAllocator;
-mod tests;
-extern {
-  fn calloc(n_elem : usize, el_size : usize) -> *mut u8;
-}
-extern {
-  fn free(ptr : *mut u8);
-}
-
-
-//use alloc::AllocatedSlice;
-use alloc_no_stdlib::SliceWrapper;
-use alloc_no_stdlib::SliceWrapperMut;
-use alloc_no_stdlib::AllocatedStackMemory;
-use alloc_no_stdlib::Allocator;
-use alloc_no_stdlib::StackAllocator;
-
-use alloc_no_stdlib::bzero;
-declare_stack_allocator_struct!(CallocAllocatedFreelist4, 4, calloc);
-declare_stack_allocator_struct!(StackAllocatedFreelist16, 16, stack);
-#[repr(C)]
-
-#[derive(PartialEq, Copy, Clone, Debug)]
-pub struct HuffmanCode {
-  pub value: u16, // symbol value or table offset
-  pub bits: u8, // number of bits used for this symbol
-}
-
-
-impl Default for HuffmanCode {
-  fn default() -> Self {
-    HuffmanCode {
-      value: 0,
-      bits: 0,
-    }
-  }
-}
-
-fn main() {
-
-  let mut global_buffer = unsafe {define_allocator_memory_pool!(4, u8, [0; 1024 * 1024 * 200], calloc)};
-  {
-  let gbref = &mut global_buffer;
-{
-  let mut ags = CallocAllocatedFreelist4::<u8>::new_allocator(gbref.data, bzero);
-
-  {
-  let mut x = ags.alloc_cell(9999);
-  x.slice_mut()[0] = 4;
-  let mut y = ags.alloc_cell(4);
-  y[0] = 5;
-  ags.free_cell(y);
-
-  let mut three = ags.alloc_cell(3);
-  three[0] = 6;
-  ags.free_cell(three);
-
-  let mut z = ags.alloc_cell(4);
-  z.slice_mut()[1] = 8;
-  let mut reget_three = ags.alloc_cell(4);
-  reget_three.slice_mut()[1] = 9;
-  //y.mem[0] = 6; // <-- this is an error (use after free)
-  println!("x[0] = {:?} z[0] = {:?}  z[1] = {:?} r3[0] = {:?} r3[1] = {:?}", x.mem[0], z.mem[0], z.mem[1], reget_three[0], reget_three.slice()[1]);
-  let mut _z = ags.alloc_cell(1);
-  }
-  }
-  }
-
-
-  let mut stack_global_buffer = define_allocator_memory_pool!(16, u8, [0; 1024 * 1024], stack);
-  let mut stack_global_buffer_hc = define_allocator_memory_pool!(16, HuffmanCode, [HuffmanCode::default(); 1024 * 1024], stack);
-  {
-  let mut stackallocatorhc = StackAllocatedFreelist16::<HuffmanCode>::new_allocator(&mut stack_global_buffer_hc, bzero);
-    stackallocatorhc.alloc_cell(9999);
-  }
-  let mut stackallocator = StackAllocatedFreelist16::<u8>::new_allocator(&mut stack_global_buffer, bzero);
-  {
-    let mut x = stackallocator.alloc_cell(9999);
-    x.slice_mut()[0] = 3;
-    let mut y = stackallocator.alloc_cell(4);
-    y[0] = 5;
-    stackallocator.free_cell(y);
-
-    let mut three = stackallocator.alloc_cell(3);
-    three[0] = 6;
-    stackallocator.free_cell(three);
-
-    let mut z = stackallocator.alloc_cell(4);
-    z.slice_mut()[1] = 8;
-    let mut reget_three = stackallocator.alloc_cell(4);
-    reget_three.slice_mut()[1] = 9;
-    //y.mem[0] = 6; // <-- this is an error (use after free)
-    println!("x[0] = {:?} z[0] = {:?}  z[1] = {:?} r3[0] = {:?} r3[1] = {:?}", x.mem[0], z.mem[0], z.mem[1], reget_three[0], reget_three.slice()[1]);
-    let mut _z = stackallocator.alloc_cell(1);
-  }
-
-  let mut halloc : HeapAllocator<u8> = HeapAllocator::<u8>{default_value: 0};
-  for _i in 1..10 { // heap test
-      let mut x = halloc.alloc_cell(100000);
-      x[0] = 4;
-      let mut y = halloc.alloc_cell(110000);
-      y[0] = 5;
-      let mut z = halloc.alloc_cell(120000);
-      z[0] = 6;
-      halloc.free_cell(y);
-      println!("x[0] {:?} x[9] {:?} y[0] {:?} z[0] {:?}",
-               x[0], x[9], -999, z[0]);
-  }
-}
diff --git a/src/bin/heap_alloc.rs b/src/bin/heap_alloc.rs
deleted file mode 100644
index 6372b5f..0000000
--- a/src/bin/heap_alloc.rs
+++ /dev/null
@@ -1,45 +0,0 @@
-use alloc_no_stdlib;
-use core;
-use alloc_no_stdlib::{SliceWrapper, SliceWrapperMut};
-
-pub struct Rebox<T> {
-   b : Box<[T]>,
-}
-
-impl<T> core::default::Default for Rebox<T> {
-    fn default() -> Self {
-       let v : Vec<T> = Vec::new();
-       let b = v.into_boxed_slice();
-       return Rebox::<T>{b : b};
-    }
-}
-define_index_ops_mut!(T, Rebox<T>);
-
-impl<T> alloc_no_stdlib::SliceWrapper<T> for Rebox<T> {
-    fn slice(&self) -> & [T] {
-       return &*self.b
-    }
-}
-
-impl<T> alloc_no_stdlib::SliceWrapperMut<T> for Rebox<T> {
-    fn slice_mut(&mut self) -> &mut [T] {
-       return &mut*self.b
-    }
-}
-
-pub struct HeapAllocator<T : core::clone::Clone>{
-   pub default_value : T,
-}
-
-impl<T : core::clone::Clone> alloc_no_stdlib::Allocator<T> for HeapAllocator<T> {
-   type AllocatedMemory = Rebox<T>;
-   fn alloc_cell(self : &mut HeapAllocator<T>, len : usize) -> Rebox<T> {
-
-       let v : Vec<T> = vec![self.default_value.clone();len];
-       let b = v.into_boxed_slice();
-       return Rebox::<T>{b : b};
-   }
-   fn free_cell(self : &mut HeapAllocator<T>, _data : Rebox<T>) {
-
-   }
-}
diff --git a/src/bin/tests.rs b/src/bin/tests.rs
deleted file mode 100755
index e6d9a46..0000000
--- a/src/bin/tests.rs
+++ /dev/null
@@ -1,68 +0,0 @@
-#![allow(unused_imports)]
-#[cfg(test)]
-extern crate core;
-use alloc_no_stdlib::Allocator;
-use super::HeapAllocator;
-#[cfg(feature="stdlib")]
-use alloc_no_stdlib::HeapAlloc;
-#[cfg(all(feature="unsafe", feature="stdlib"))]
-use alloc_no_stdlib::HeapAllocUninitialized;
-#[test]
-fn heap_test() {
-  let mut halloc : HeapAllocator<u8> = HeapAllocator::<u8>{default_value: 0};
-  for _i in 1..10 { // heap test
-      let mut x = halloc.alloc_cell(100000);
-      x[0] = 4;
-      let mut y = halloc.alloc_cell(110000);
-      y[0] = 5;
-      let mut z = halloc.alloc_cell(120000);
-      z[0] = 6;
-      assert_eq!(y[0], 5);
-      halloc.free_cell(y);
-      assert_eq!(x[0], 4);
-      assert_eq!(x[9], 0);
-      assert_eq!(z[0], 6);
-  }
-
-}
-
-
-#[cfg(all(feature="unsafe", feature="stdlib"))]
-#[test]
-fn std_unsafe_heap_test() {
-  let mut halloc = unsafe{HeapAllocUninitialized::<u8>::new()};
-  for _i in 1..10 { // heap test
-      let mut x = halloc.alloc_cell(100000);
-      x[0] = 4;
-      let mut y = halloc.alloc_cell(110000);
-      y[0] = 5;
-      let mut z = halloc.alloc_cell(120000);
-      z[0] = 6;
-      assert_eq!(y[0], 5);
-      halloc.free_cell(y);
-      assert_eq!(x[0], 4);
-      assert_eq!(x[9], 0);
-      assert_eq!(z[0], 6);
-  }
-
-}
-
-#[cfg(feature="stdlib")]
-#[test]
-fn std_heap_test() {
-  let mut halloc = HeapAlloc::<u8>::new(0);
-  for _i in 1..10 { // heap test
-      let mut x = halloc.alloc_cell(100000);
-      x[0] = 4;
-      let mut y = halloc.alloc_cell(110000);
-      y[0] = 5;
-      let mut z = halloc.alloc_cell(120000);
-      z[0] = 6;
-      assert_eq!(y[0], 5);
-      halloc.free_cell(y);
-      assert_eq!(x[0], 4);
-      assert_eq!(x[9], 0);
-      assert_eq!(z[0], 6);
-  }
-
-}
diff --git a/src/lib.rs b/src/lib.rs
old mode 100755
new mode 100644
