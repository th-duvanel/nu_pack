Description: Ignore tests which rely on fixtures
 Upstream's git repo has a script/fetch-fixtures script which clones various
 git repos to use for testing.  These aren't distributed in the crate, so they
 can't currently be tested.
Forwarded: not-needed

Index: tree-sitter-cli/src/tests/corpus_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/corpus_test.rs
+++ tree-sitter-cli/src/tests/corpus_test.rs
@@ -14,69 +14,81 @@ use crate::{
     test::{parse_tests, print_diff, print_diff_key, strip_sexp_fields, TestEntry},
     util,
 };
-use proc_macro::test_with_seed;
+//use proc_macro::test_with_seed;
 use std::{env, fs};
 use tree_sitter::{LogType, Node, Parser, Point, Range, Tree};
+/*#[ignore="Fixtures aren't in the crate"]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_bash(seed: usize) {
     test_language_corpus(seed, "bash");
 }
+#[ignore="Fixtures aren't in the crate"]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_c(seed: usize) {
     test_language_corpus(seed, "c");
 }
+#[ignore="Fixtures aren't in the crate"]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_cpp(seed: usize) {
     test_language_corpus(seed, "cpp");
 }
+#[ignore="Fixtures aren't in the crate"]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_embedded_template(seed: usize) {
     test_language_corpus(seed, "embedded-template");
 }
+#[ignore="Fixtures aren't in the crate"]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_go(seed: usize) {
     test_language_corpus(seed, "go");
 }
+#[ignore="Fixtures aren't in the crate"]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_html(seed: usize) {
     test_language_corpus(seed, "html");
 }
+#[ignore="Fixtures aren't in the crate"]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_javascript(seed: usize) {
     test_language_corpus(seed, "javascript");
 }
+#[ignore="Fixtures aren't in the crate"]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_json(seed: usize) {
     test_language_corpus(seed, "json");
 }
+#[ignore="Fixtures aren't in the crate"]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_php(seed: usize) {
     test_language_corpus(seed, "php");
 }
+#[ignore="Fixtures aren't in the crate"]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_python(seed: usize) {
     test_language_corpus(seed, "python");
 }
+#[ignore="Fixtures aren't in the crate"]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_ruby(seed: usize) {
     test_language_corpus(seed, "ruby");
 }
+#[ignore="Fixtures aren't in the crate"]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_rust(seed: usize) {
     test_language_corpus(seed, "rust");
-}
+}*/
 
 fn test_language_corpus(start_seed: usize, language_name: &str) {
     let grammars_dir = fixtures_dir().join("grammars");
@@ -235,7 +247,8 @@ fn test_language_corpus(start_seed: usiz
     }
 }
 
-#[test]
+/*#[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_feature_corpus_files() {
     let test_grammars_dir = fixtures_dir().join("test_grammars");
 
@@ -341,7 +354,7 @@ fn test_feature_corpus_files() {
     if failure_count > 0 {
         panic!("{} corpus tests failed", failure_count);
     }
-}
+}*/
 
 fn check_consistent_sizes(tree: &Tree, input: &Vec<u8>) {
     fn check(node: Node, line_offsets: &Vec<usize>) {
Index: tree-sitter-cli/src/tests/highlight_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/highlight_test.rs
+++ tree-sitter-cli/src/tests/highlight_test.rs
@@ -58,6 +58,7 @@ lazy_static! {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_javascript() {
     let source = "const a = function(b) { return b + c; }";
     assert_eq!(
@@ -91,6 +92,7 @@ fn test_highlighting_javascript() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_injected_html_in_javascript() {
     let source = vec!["const s = html `<div>${a < b}</div>`;"].join("\n");
 
@@ -126,6 +128,7 @@ fn test_highlighting_injected_html_in_ja
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_injected_javascript_in_html_mini() {
     let source = "<script>const x = new Thing();</script>";
 
@@ -155,6 +158,7 @@ fn test_highlighting_injected_javascript
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_injected_javascript_in_html() {
     let source = vec![
         "<body>",
@@ -210,6 +214,7 @@ fn test_highlighting_injected_javascript
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_multiline_nodes_to_html() {
     let source = vec![
         "const SOMETHING = `",
@@ -234,6 +239,7 @@ fn test_highlighting_multiline_nodes_to_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_with_local_variable_tracking() {
     let source = vec![
         "module.exports = function a(b) {",
@@ -294,6 +300,7 @@ fn test_highlighting_with_local_variable
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_empty_lines() {
     let source = vec![
         "class A {",
@@ -325,6 +332,7 @@ fn test_highlighting_empty_lines() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_carriage_returns() {
     let source = "a = \"a\rb\"\r\nb\r";
 
@@ -338,6 +346,7 @@ fn test_highlighting_carriage_returns()
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_ejs_with_html_and_javascript() {
     let source = vec!["<div><% foo() %></div><script> bar() </script>"].join("\n");
 
@@ -373,6 +382,7 @@ fn test_highlighting_ejs_with_html_and_j
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_javascript_with_jsdoc() {
     // Regression test: the middle comment has no highlights. This should not prevent
     // later injections from highlighting properly.
@@ -403,6 +413,7 @@ fn test_highlighting_javascript_with_jsd
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_with_content_children_included() {
     let source = vec!["assert!(", "    a.b.c() < D::e::<F>()", ");"].join("\n");
 
@@ -442,6 +453,7 @@ fn test_highlighting_with_content_childr
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_cancellation() {
     // An HTML document with a large injected JavaScript document:
     let mut source = "<script>\n".to_string();
@@ -481,6 +493,7 @@ fn test_highlighting_cancellation() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlighting_via_c_api() {
     let highlights = vec![
         "class=tag\0",
Index: tree-sitter-cli/src/tests/node_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/node_test.rs
+++ tree-sitter-cli/src/tests/node_test.rs
@@ -54,6 +54,7 @@ const GRAMMAR_WITH_ALIASES_AND_EXTRAS: &
 }"#;
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_child() {
     let tree = parse_json_example();
     let array_node = tree.root_node().child(0).unwrap();
@@ -168,6 +169,7 @@ fn test_node_child() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_children() {
     let tree = parse_json_example();
     let mut cursor = tree.walk();
@@ -200,6 +202,7 @@ fn test_node_children() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_children_by_field_name() {
     let mut parser = Parser::new();
     parser.set_language(get_language("python")).unwrap();
@@ -228,6 +231,7 @@ fn test_node_children_by_field_name() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_parent_of_child_by_field_name() {
     let mut parser = Parser::new();
     parser.set_language(get_language("javascript")).unwrap();
@@ -249,6 +253,7 @@ fn test_node_parent_of_child_by_field_na
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_field_name_for_child() {
     let mut parser = Parser::new();
     parser.set_language(get_language("c")).unwrap();
@@ -274,6 +279,7 @@ fn test_node_field_name_for_child() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_child_by_field_name_with_extra_hidden_children() {
     let mut parser = Parser::new();
     parser.set_language(get_language("python")).unwrap();
@@ -292,6 +298,7 @@ fn test_node_child_by_field_name_with_ex
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_named_child() {
     let tree = parse_json_example();
     let array_node = tree.root_node().child(0).unwrap();
@@ -386,6 +393,7 @@ fn test_node_named_child_with_aliases_an
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_descendant_for_range() {
     let tree = parse_json_example();
     let array_node = tree.root_node().child(0).unwrap();
@@ -498,6 +506,7 @@ fn test_node_descendant_for_range() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_edit() {
     let mut code = JSON_EXAMPLE.as_bytes().to_vec();
     let mut tree = parse_json_example();
@@ -530,6 +539,7 @@ fn test_node_edit() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_root_node_with_offset() {
     let mut parser = Parser::new();
     parser.set_language(get_language("javascript")).unwrap();
@@ -558,6 +568,7 @@ fn test_root_node_with_offset() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_is_extra() {
     let mut parser = Parser::new();
     parser.set_language(get_language("javascript")).unwrap();
@@ -573,6 +584,7 @@ fn test_node_is_extra() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_sexp() {
     let mut parser = Parser::new();
     parser.set_language(get_language("javascript")).unwrap();
@@ -749,6 +761,7 @@ fn test_node_field_calls_in_language_wit
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_is_named_but_aliased_as_anonymous() {
     let (parser_name, parser_code) = generate_parser_for_grammar(
         &fs::read_to_string(
@@ -780,6 +793,7 @@ fn test_node_is_named_but_aliased_as_ano
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_node_numeric_symbols_respect_simple_aliases() {
     let mut parser = Parser::new();
     parser.set_language(get_language("python")).unwrap();
Index: tree-sitter-cli/src/tests/parser_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/parser_test.rs
+++ tree-sitter-cli/src/tests/parser_test.rs
@@ -8,7 +8,7 @@ use crate::{
     generate::generate_parser_for_grammar,
     parse::{perform_edit, Edit},
 };
-use proc_macro::retry;
+//use proc_macro::retry;
 use std::{
     sync::atomic::{AtomicUsize, Ordering},
     thread, time,
@@ -16,6 +16,7 @@ use std::{
 use tree_sitter::{IncludedRangesError, InputEdit, LogType, Parser, Point, Range};
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_simple_string() {
     let mut parser = Parser::new();
     parser.set_language(get_language("rust")).unwrap();
@@ -47,6 +48,7 @@ fn test_parsing_simple_string() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_logging() {
     let mut parser = Parser::new();
     parser.set_language(get_language("rust")).unwrap();
@@ -84,6 +86,7 @@ fn test_parsing_with_logging() {
 
 #[test]
 #[cfg(unix)]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_debug_graph_enabled() {
     use std::io::{BufRead, BufReader, Seek};
 
@@ -110,6 +113,7 @@ fn test_parsing_with_debug_graph_enabled
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_custom_utf8_input() {
     let mut parser = Parser::new();
     parser.set_language(get_language("rust")).unwrap();
@@ -153,6 +157,7 @@ fn test_parsing_with_custom_utf8_input()
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_custom_utf16_input() {
     let mut parser = Parser::new();
     parser.set_language(get_language("rust")).unwrap();
@@ -192,6 +197,7 @@ fn test_parsing_with_custom_utf16_input(
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_callback_returning_owned_strings() {
     let mut parser = Parser::new();
     parser.set_language(get_language("rust")).unwrap();
@@ -213,6 +219,7 @@ fn test_parsing_with_callback_returning_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_text_with_byte_order_mark() {
     let mut parser = Parser::new();
     parser.set_language(get_language("rust")).unwrap();
@@ -272,6 +279,7 @@ fn test_parsing_text_with_byte_order_mar
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_invalid_chars_at_eof() {
     let mut parser = Parser::new();
     parser.set_language(get_language("json")).unwrap();
@@ -280,6 +288,7 @@ fn test_parsing_invalid_chars_at_eof() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_unexpected_null_characters_within_source() {
     let mut parser = Parser::new();
     parser.set_language(get_language("javascript")).unwrap();
@@ -291,6 +300,7 @@ fn test_parsing_unexpected_null_characte
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_ends_when_input_callback_returns_empty() {
     let mut parser = Parser::new();
     parser.set_language(get_language("javascript")).unwrap();
@@ -315,6 +325,7 @@ fn test_parsing_ends_when_input_callback
 // Incremental parsing
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_after_editing_beginning_of_code() {
     let mut parser = Parser::new();
     parser.set_language(get_language("javascript")).unwrap();
@@ -362,6 +373,7 @@ fn test_parsing_after_editing_beginning_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_after_editing_end_of_code() {
     let mut parser = Parser::new();
     parser.set_language(get_language("javascript")).unwrap();
@@ -409,6 +421,7 @@ fn test_parsing_after_editing_end_of_cod
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_empty_file_with_reused_tree() {
     let mut parser = Parser::new();
     parser.set_language(get_language("rust")).unwrap();
@@ -421,6 +434,7 @@ fn test_parsing_empty_file_with_reused_t
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_after_editing_tree_that_depends_on_column_values() {
     let (grammar, path) = get_test_grammar("uses_current_column");
     let (grammar_name, parser_code) = generate_parser_for_grammar(&grammar).unwrap();
@@ -498,6 +512,7 @@ h + i
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_after_detecting_error_in_the_middle_of_a_string_token() {
     let mut parser = Parser::new();
     parser.set_language(get_language("python")).unwrap();
@@ -538,6 +553,7 @@ fn test_parsing_after_detecting_error_in
 // Thread safety
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_on_multiple_threads() {
     // Parse this source file so that each thread has a non-trivial amount of
     // work to do.
@@ -589,6 +605,7 @@ fn test_parsing_on_multiple_threads() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_cancelled_by_another_thread() {
     let cancellation_flag = std::sync::Arc::new(AtomicUsize::new(0));
 
@@ -639,7 +656,8 @@ fn test_parsing_cancelled_by_another_thr
 // Timeouts
 
 #[test]
-#[retry(10)]
+#[ignore="Fixtures aren't in the crate"]
+//#[retry(10)]
 fn test_parsing_with_a_timeout() {
     let mut parser = Parser::new();
     parser.set_language(get_language("json")).unwrap();
@@ -697,6 +715,7 @@ fn test_parsing_with_a_timeout() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_a_timeout_and_a_reset() {
     let mut parser = Parser::new();
     parser.set_language(get_language("json")).unwrap();
@@ -752,6 +771,7 @@ fn test_parsing_with_a_timeout_and_a_res
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_a_timeout_and_implicit_reset() {
     allocations::record(|| {
         let mut parser = Parser::new();
@@ -785,6 +805,7 @@ fn test_parsing_with_a_timeout_and_impli
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_timeout_and_no_completion() {
     allocations::record(|| {
         let mut parser = Parser::new();
@@ -804,6 +825,7 @@ fn test_parsing_with_timeout_and_no_comp
 // Included Ranges
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_one_included_range() {
     let source_code = "<span>hi</span><script>console.log('sup');</script>";
 
@@ -835,6 +857,7 @@ fn test_parsing_with_one_included_range(
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_multiple_included_ranges() {
     let source_code = "html `<div>Hello, ${name.toUpperCase()}, it's <b>${now()}</b>.</div>`";
 
@@ -930,6 +953,7 @@ fn test_parsing_with_multiple_included_r
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_included_range_containing_mismatched_positions() {
     let source_code = "<div>test</div>{_ignore_this_part_}";
 
@@ -1007,6 +1031,7 @@ fn test_parsing_error_in_invalid_include
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_utf16_code_with_errors_at_the_end_of_an_included_range() {
     let source_code = "<script>a.</script>";
     let utf16_source_code: Vec<u16> = source_code.as_bytes().iter().map(|c| *c as u16).collect();
@@ -1029,6 +1054,7 @@ fn test_parsing_utf16_code_with_errors_a
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_external_scanner_that_uses_included_range_boundaries() {
     let source_code = "a <%= b() %> c <% d() %>";
     let range1_start_byte = source_code.find(" b() ").unwrap();
@@ -1076,6 +1102,7 @@ fn test_parsing_with_external_scanner_th
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_a_newly_excluded_range() {
     let mut source_code = String::from("<div><span><%= something %></span></div>");
 
@@ -1157,6 +1184,7 @@ fn test_parsing_with_a_newly_excluded_ra
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_parsing_with_a_newly_included_range() {
     let source_code = "<div><%= foo() %></div><span><%= bar() %></span><%= baz() %>";
     let range1_start = source_code.find(" foo").unwrap();
@@ -1293,6 +1321,7 @@ fn test_parsing_with_included_ranges_and
     assert_eq!(root.child(3).unwrap().start_byte(), 4);
 }
 
+#[ignore="Fixtures aren't in the crate"]
 fn simple_range(start: usize, end: usize) -> Range {
     Range {
         start_byte: start,
Index: tree-sitter-cli/src/tests/pathological_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/pathological_test.rs
+++ tree-sitter-cli/src/tests/pathological_test.rs
@@ -2,6 +2,7 @@ use super::helpers::{allocations, fixtur
 use tree_sitter::Parser;
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_pathological_example_1() {
     let language = "cpp";
     let source = r#"*ss<s"ss<sqXqss<s._<s<sq<(qqX<sqss<s.ss<sqsssq<(qss<qssqXqss<s._<s<sq<(qqX<sqss<s.ss<sqsssq<(qss<sqss<sqss<s._<s<sq>(qqX<sqss<s.ss<sqsssq<(qss<sq&=ss<s<sqss<s._<s<sq<(qqX<sqss<s.ss<sqs"#;
Index: tree-sitter-cli/src/tests/query_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/query_test.rs
+++ tree-sitter-cli/src/tests/query_test.rs
@@ -18,6 +18,7 @@ lazy_static! {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_errors_on_invalid_syntax() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -189,6 +190,7 @@ fn test_query_errors_on_invalid_syntax()
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_errors_on_invalid_symbols() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -267,6 +269,7 @@ fn test_query_errors_on_invalid_symbols(
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_errors_on_invalid_predicates() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -310,6 +313,7 @@ fn test_query_errors_on_invalid_predicat
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_errors_on_impossible_patterns() {
     let js_lang = get_language("javascript");
     let rb_lang = get_language("ruby");
@@ -454,6 +458,7 @@ fn test_query_errors_on_impossible_patte
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_verifies_possible_patterns_with_aliased_parent_nodes() {
     allocations::record(|| {
         let ruby = get_language("ruby");
@@ -478,6 +483,7 @@ fn test_query_verifies_possible_patterns
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_simple_pattern() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -500,6 +506,7 @@ fn test_query_matches_with_simple_patter
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_multiple_on_same_root() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -546,6 +553,7 @@ fn test_query_matches_with_multiple_on_s
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_multiple_patterns_different_roots() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -576,6 +584,7 @@ fn test_query_matches_with_multiple_patt
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_multiple_patterns_same_root() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -611,6 +620,7 @@ fn test_query_matches_with_multiple_patt
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_nesting_and_no_fields() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -647,6 +657,7 @@ fn test_query_matches_with_nesting_and_n
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_many_results() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -662,6 +673,7 @@ fn test_query_matches_with_many_results(
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_many_overlapping_results() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -709,6 +721,7 @@ fn test_query_matches_with_many_overlapp
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_capturing_error_nodes() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -730,6 +743,7 @@ fn test_query_matches_capturing_error_no
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_extra_children() {
     allocations::record(|| {
         let language = get_language("ruby");
@@ -773,6 +787,7 @@ fn test_query_matches_with_extra_childre
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_named_wildcard() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -805,6 +820,7 @@ fn test_query_matches_with_named_wildcar
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_wildcard_at_the_root() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -852,6 +868,7 @@ fn test_query_matches_with_wildcard_at_t
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_immediate_siblings() {
     allocations::record(|| {
         let language = get_language("python");
@@ -931,6 +948,7 @@ fn test_query_matches_with_immediate_sib
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_last_named_child() {
     allocations::record(|| {
         let language = get_language("c");
@@ -957,6 +975,7 @@ fn test_query_matches_with_last_named_ch
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_negated_fields() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1022,6 +1041,7 @@ fn test_query_matches_with_negated_field
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_field_at_root() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1040,6 +1060,7 @@ fn test_query_matches_with_field_at_root
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_repeated_leaf_nodes() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1103,6 +1124,7 @@ fn test_query_matches_with_repeated_leaf
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_optional_nodes_inside_of_repetitions() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1123,6 +1145,7 @@ fn test_query_matches_with_optional_node
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_top_level_repetitions() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1155,6 +1178,7 @@ fn test_query_matches_with_top_level_rep
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_non_terminal_repetitions_within_root() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1174,6 +1198,7 @@ fn test_query_matches_with_non_terminal_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_nested_repetitions() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1208,6 +1233,7 @@ fn test_query_matches_with_nested_repeti
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_multiple_repetition_patterns_that_intersect_other_pattern() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1257,6 +1283,7 @@ fn test_query_matches_with_multiple_repe
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_trailing_repetitions_of_last_child() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1285,6 +1312,7 @@ fn test_query_matches_with_trailing_repe
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_leading_zero_or_more_repeated_leaf_nodes() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1338,6 +1366,7 @@ fn test_query_matches_with_leading_zero_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_trailing_optional_nodes() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1373,6 +1402,7 @@ fn test_query_matches_with_trailing_opti
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_nested_optional_nodes() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1415,6 +1445,7 @@ fn test_query_matches_with_nested_option
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_repeated_internal_nodes() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1445,6 +1476,7 @@ fn test_query_matches_with_repeated_inte
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_simple_alternatives() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1484,6 +1516,7 @@ fn test_query_matches_with_simple_altern
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_alternatives_in_repetitions() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1520,6 +1553,7 @@ fn test_query_matches_with_alternatives_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_alternatives_at_root() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1561,6 +1595,7 @@ fn test_query_matches_with_alternatives_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_alternatives_under_fields() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1596,6 +1631,7 @@ fn test_query_matches_with_alternatives_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_in_language_with_simple_aliases() {
     allocations::record(|| {
         let language = get_language("html");
@@ -1627,6 +1663,7 @@ fn test_query_matches_in_language_with_s
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_different_tokens_with_the_same_string_value() {
     allocations::record(|| {
         // In Rust, there are two '<' tokens: one for the binary operator,
@@ -1656,6 +1693,7 @@ fn test_query_matches_with_different_tok
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_too_many_permutations_to_track() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1690,6 +1728,7 @@ fn test_query_matches_with_too_many_perm
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_sibling_patterns_dont_match_children_of_an_error() {
     allocations::record(|| {
         let language = get_language("rust");
@@ -1750,6 +1789,7 @@ fn test_query_sibling_patterns_dont_matc
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_alternatives_and_too_many_permutations_to_track() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1789,6 +1829,7 @@ fn test_query_matches_with_alternatives_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_anonymous_tokens() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1817,6 +1858,7 @@ fn test_query_matches_with_anonymous_tok
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_supertypes() {
     allocations::record(|| {
         let language = get_language("python");
@@ -1859,6 +1901,7 @@ fn test_query_matches_with_supertypes()
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_within_byte_range() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1914,6 +1957,7 @@ fn test_query_matches_within_byte_range(
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_within_point_range() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1979,6 +2023,7 @@ fn test_query_matches_within_point_range
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_within_byte_range() {
     allocations::record(|| {
         let language = get_language("c");
@@ -2018,6 +2063,7 @@ fn test_query_captures_within_byte_range
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_unrooted_patterns_intersecting_byte_range() {
     allocations::record(|| {
         let language = get_language("rust");
@@ -2072,6 +2118,7 @@ fn test_query_matches_with_unrooted_patt
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_wildcard_at_root_intersecting_byte_range() {
     allocations::record(|| {
         let language = get_language("python");
@@ -2134,6 +2181,7 @@ fn test_query_matches_with_wildcard_at_r
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_within_byte_range_assigned_after_iterating() {
     allocations::record(|| {
         let language = get_language("rust");
@@ -2220,6 +2268,7 @@ fn test_query_captures_within_byte_range
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_within_range_of_long_repetition() {
     allocations::record(|| {
         let language = get_language("rust");
@@ -2271,6 +2320,7 @@ fn test_query_matches_within_range_of_lo
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_different_queries_same_cursor() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2332,6 +2382,7 @@ fn test_query_matches_different_queries_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_multiple_captures_on_a_node() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2385,6 +2436,7 @@ fn test_query_matches_with_multiple_capt
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_captured_wildcard_at_root() {
     allocations::record(|| {
         let language = get_language("python");
@@ -2472,6 +2524,7 @@ fn test_query_matches_with_captured_wild
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_no_captures() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2502,6 +2555,7 @@ fn test_query_matches_with_no_captures()
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_repeated_fields() {
     allocations::record(|| {
         let language = get_language("c");
@@ -2529,6 +2583,7 @@ fn test_query_matches_with_repeated_fiel
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_deeply_nested_patterns_with_fields() {
     allocations::record(|| {
         let language = get_language("python");
@@ -2617,6 +2672,7 @@ fn test_query_matches_with_deeply_nested
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_matches_with_indefinite_step_containing_no_captures() {
     allocations::record(|| {
         // This pattern depends on the field declarations within the
@@ -2667,6 +2723,7 @@ fn test_query_matches_with_indefinite_st
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_basic() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2742,6 +2799,7 @@ fn test_query_captures_basic() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_with_text_conditions() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2797,6 +2855,7 @@ fn test_query_captures_with_text_conditi
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_with_predicates() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2845,6 +2904,7 @@ fn test_query_captures_with_predicates()
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_with_quoted_predicate_args() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2892,6 +2952,7 @@ fn test_query_captures_with_quoted_predi
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_with_duplicates() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2925,6 +2986,7 @@ fn test_query_captures_with_duplicates()
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_with_many_nested_results_without_fields() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2988,6 +3050,7 @@ fn test_query_captures_with_many_nested_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_with_many_nested_results_with_fields() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3055,6 +3118,7 @@ fn test_query_captures_with_many_nested_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_with_too_many_nested_results() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3147,6 +3211,7 @@ fn test_query_captures_with_too_many_nes
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_with_definite_pattern_containing_many_nested_matches() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3195,6 +3260,7 @@ fn test_query_captures_with_definite_pat
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_ordered_by_both_start_and_end_positions() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3235,6 +3301,7 @@ fn test_query_captures_ordered_by_both_s
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_with_matches_removed() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3274,6 +3341,7 @@ fn test_query_captures_with_matches_remo
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_with_matches_removed_before_they_finish() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3321,6 +3389,7 @@ fn test_query_captures_with_matches_remo
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_captures_and_matches_iterators_are_fused() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3364,6 +3433,7 @@ fn test_query_captures_and_matches_itera
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_text_callback_returns_chunks() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3437,6 +3507,7 @@ fn test_query_text_callback_returns_chun
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_start_byte_for_pattern() {
     let language = get_language("javascript");
 
@@ -3478,6 +3549,7 @@ fn test_query_start_byte_for_pattern() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_capture_names() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3510,6 +3582,7 @@ fn test_query_capture_names() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_lifetime_is_separate_from_nodes_lifetime() {
     allocations::record(|| {
         let query = r#"(call_expression) @call"#;
@@ -3566,6 +3639,7 @@ fn test_query_lifetime_is_separate_from_
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_with_no_patterns() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3576,6 +3650,7 @@ fn test_query_with_no_patterns() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_comments() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3605,6 +3680,7 @@ fn test_query_comments() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_disable_pattern() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3644,6 +3720,7 @@ fn test_query_disable_pattern() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_alternative_predicate_prefix() {
     allocations::record(|| {
         let language = get_language("c");
@@ -3677,6 +3754,7 @@ fn test_query_alternative_predicate_pref
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_random() {
     use pretty_assertions::assert_eq;
 
@@ -3741,6 +3819,7 @@ fn test_query_random() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_is_pattern_guaranteed_at_step() {
     struct Row {
         language: Language,
@@ -4045,6 +4124,7 @@ fn test_query_is_pattern_guaranteed_at_s
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_is_pattern_rooted() {
     struct Row {
         description: &'static str,
@@ -4136,6 +4216,7 @@ fn test_query_is_pattern_rooted() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_query_is_pattern_non_local() {
     struct Row {
         description: &'static str,
@@ -4233,6 +4314,7 @@ fn test_query_is_pattern_non_local() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_capture_quantifiers() {
     struct Row {
         description: &'static str,
Index: tree-sitter-cli/src/tests/tags_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/tags_test.rs
+++ tree-sitter-cli/src/tests/tags_test.rs
@@ -82,6 +82,7 @@ const RUBY_TAG_QUERY: &'static str = r#"
 "#;
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tags_python() {
     let language = get_language("python");
     let tags_config = TagsConfiguration::new(language, PYTHON_TAG_QUERY, "").unwrap();
@@ -129,6 +130,7 @@ fn test_tags_python() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tags_javascript() {
     let language = get_language("javascript");
     let tags_config = TagsConfiguration::new(language, JS_TAG_QUERY, "").unwrap();
@@ -183,6 +185,7 @@ fn test_tags_javascript() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tags_columns_measured_in_utf16_code_units() {
     let language = get_language("python");
     let tags_config = TagsConfiguration::new(language, PYTHON_TAG_QUERY, "").unwrap();
@@ -204,6 +207,7 @@ fn test_tags_columns_measured_in_utf16_c
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tags_ruby() {
     let language = get_language("ruby");
     let locals_query =
@@ -259,6 +263,7 @@ fn test_tags_ruby() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tags_cancellation() {
     use std::sync::atomic::{AtomicUsize, Ordering};
 
@@ -292,6 +297,7 @@ fn test_tags_cancellation() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_invalid_capture() {
     let language = get_language("python");
     let e = TagsConfiguration::new(language, "(identifier) @method", "")
@@ -300,6 +306,7 @@ fn test_invalid_capture() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tags_with_parse_error() {
     let language = get_language("python");
     let tags_config = TagsConfiguration::new(language, PYTHON_TAG_QUERY, "").unwrap();
@@ -331,6 +338,7 @@ fn test_tags_with_parse_error() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tags_via_c_api() {
     allocations::record(|| {
         let tagger = c::ts_tagger_new();
Index: tree-sitter-cli/src/tests/test_highlight_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/test_highlight_test.rs
+++ tree-sitter-cli/src/tests/test_highlight_test.rs
@@ -5,6 +5,7 @@ use tree_sitter::{Parser, Point};
 use tree_sitter_highlight::{Highlight, Highlighter};
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_highlight_test_with_basic_test() {
     let language = get_language("javascript");
     let config = get_highlight_config(
Index: tree-sitter-cli/src/tests/test_tags_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/test_tags_test.rs
+++ tree-sitter-cli/src/tests/test_tags_test.rs
@@ -5,6 +5,7 @@ use tree_sitter::{Parser, Point};
 use tree_sitter_tags::TagsContext;
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tags_test_with_basic_test() {
     let language = get_language("python");
     let config = get_tags_config("python");
Index: tree-sitter-cli/src/tests/tree_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/tree_test.rs
+++ tree-sitter-cli/src/tests/tree_test.rs
@@ -5,6 +5,7 @@ use std::str;
 use tree_sitter::{InputEdit, Parser, Point, Range, Tree};
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tree_edit() {
     let mut parser = Parser::new();
     parser.set_language(get_language("javascript")).unwrap();
@@ -233,6 +234,7 @@ fn test_tree_edit() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tree_edit_with_included_ranges() {
     let mut parser = Parser::new();
     parser.set_language(get_language("html")).unwrap();
@@ -298,6 +300,7 @@ fn test_tree_edit_with_included_ranges()
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tree_cursor() {
     let mut parser = Parser::new();
     parser.set_language(get_language("rust")).unwrap();
@@ -334,6 +337,7 @@ fn test_tree_cursor() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tree_cursor_fields() {
     let mut parser = Parser::new();
     parser.set_language(get_language("javascript")).unwrap();
@@ -371,6 +375,7 @@ fn test_tree_cursor_fields() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tree_cursor_child_for_point() {
     let mut parser = Parser::new();
     parser.set_language(get_language("javascript")).unwrap();
@@ -478,6 +483,7 @@ fn test_tree_cursor_child_for_point() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_tree_node_equality() {
     let mut parser = Parser::new();
     parser.set_language(get_language("rust")).unwrap();
@@ -490,6 +496,7 @@ fn test_tree_node_equality() {
 }
 
 #[test]
+#[ignore="Fixtures aren't in the crate"]
 fn test_get_changed_ranges() {
     let source_code = b"{a: null};\n".to_vec();
 
