Index: tree-sitter-cli/src/tests/corpus_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/corpus_test.rs
+++ tree-sitter-cli/src/tests/corpus_test.rs
@@ -24,72 +24,84 @@ fn test_corpus_for_bash(seed: usize) {
     test_language_corpus(seed, "bash");
 }
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_c(seed: usize) {
     test_language_corpus(seed, "c");
 }
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_cpp(seed: usize) {
     test_language_corpus(seed, "cpp");
 }
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_embedded_template(seed: usize) {
     test_language_corpus(seed, "embedded-template");
 }
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_go(seed: usize) {
     test_language_corpus(seed, "go");
 }
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_html(seed: usize) {
     test_language_corpus(seed, "html");
 }
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_javascript(seed: usize) {
     test_language_corpus(seed, "javascript");
 }
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_json(seed: usize) {
     test_language_corpus(seed, "json");
 }
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_php(seed: usize) {
     test_language_corpus(seed, "php");
 }
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_python(seed: usize) {
     test_language_corpus(seed, "python");
 }
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_ruby(seed: usize) {
     test_language_corpus(seed, "ruby");
 }
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 
 #[test_with_seed(retry=10, seed=*START_SEED, seed_fn=new_seed)]
 fn test_corpus_for_rust(seed: usize) {
     test_language_corpus(seed, "rust");
 }*/
 
+#[cfg(target_has_atomic = "64")]
 fn test_language_corpus(start_seed: usize, language_name: &str) {
     let grammars_dir = fixtures_dir().join("grammars");
     let error_corpus_dir = fixtures_dir().join("error_corpus");
@@ -249,6 +261,7 @@ fn test_language_corpus(start_seed: usiz
 
 /*#[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_feature_corpus_files() {
     let test_grammars_dir = fixtures_dir().join("test_grammars");
 
Index: tree-sitter-cli/src/tests/helpers/allocations.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/helpers/allocations.rs
+++ tree-sitter-cli/src/tests/helpers/allocations.rs
@@ -2,12 +2,15 @@ use std::{
     collections::HashMap,
     os::raw::c_void,
     sync::{
-        atomic::{AtomicBool, AtomicU64, Ordering::SeqCst},
+        atomic::{AtomicBool, Ordering::SeqCst},
         Mutex,
     },
 };
+#[cfg(target_has_atomic = "64")]
+use std::sync::atomic::AtomicU64;
 
 #[ctor::ctor]
+#[cfg(target_has_atomic = "64")]
 unsafe fn initialize_allocation_recording() {
     tree_sitter::set_allocator(
         Some(ts_record_malloc),
@@ -22,6 +25,7 @@ struct Allocation(*const c_void);
 unsafe impl Send for Allocation {}
 unsafe impl Sync for Allocation {}
 
+#[cfg(target_has_atomic = "64")]
 #[derive(Default)]
 struct AllocationRecorder {
     enabled: AtomicBool,
@@ -29,6 +33,7 @@ struct AllocationRecorder {
     outstanding_allocations: Mutex<HashMap<Allocation, u64>>,
 }
 
+#[cfg(target_has_atomic = "64")]
 thread_local! {
     static RECORDER: AllocationRecorder = Default::default();
 }
@@ -40,6 +45,7 @@ extern "C" {
     fn free(ptr: *mut c_void);
 }
 
+#[cfg(target_has_atomic = "64")]
 pub fn record<T>(f: impl FnOnce() -> T) -> T {
     RECORDER.with(|recorder| {
         recorder.enabled.store(true, SeqCst);
@@ -69,6 +75,7 @@ pub fn record<T>(f: impl FnOnce() -> T)
     value
 }
 
+#[cfg(target_has_atomic = "64")]
 fn record_alloc(ptr: *mut c_void) {
     RECORDER.with(|recorder| {
         if recorder.enabled.load(SeqCst) {
@@ -82,6 +89,7 @@ fn record_alloc(ptr: *mut c_void) {
     });
 }
 
+#[cfg(target_has_atomic = "64")]
 fn record_dealloc(ptr: *mut c_void) {
     RECORDER.with(|recorder| {
         if recorder.enabled.load(SeqCst) {
@@ -94,18 +102,21 @@ fn record_dealloc(ptr: *mut c_void) {
     });
 }
 
+#[cfg(target_has_atomic = "64")]
 unsafe extern "C" fn ts_record_malloc(size: usize) -> *mut c_void {
     let result = malloc(size);
     record_alloc(result);
     result
 }
 
+#[cfg(target_has_atomic = "64")]
 unsafe extern "C" fn ts_record_calloc(count: usize, size: usize) -> *mut c_void {
     let result = calloc(count, size);
     record_alloc(result);
     result
 }
 
+#[cfg(target_has_atomic = "64")]
 unsafe extern "C" fn ts_record_realloc(ptr: *mut c_void, size: usize) -> *mut c_void {
     record_dealloc(ptr);
     let result = realloc(ptr, size);
@@ -113,6 +124,7 @@ unsafe extern "C" fn ts_record_realloc(p
     result
 }
 
+#[cfg(target_has_atomic = "64")]
 unsafe extern "C" fn ts_record_free(ptr: *mut c_void) {
     record_dealloc(ptr);
     free(ptr);
Index: tree-sitter-cli/src/tests/parser_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/parser_test.rs
+++ tree-sitter-cli/src/tests/parser_test.rs
@@ -772,6 +772,7 @@ fn test_parsing_with_a_timeout_and_a_res
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_parsing_with_a_timeout_and_implicit_reset() {
     allocations::record(|| {
         let mut parser = Parser::new();
@@ -806,6 +807,7 @@ fn test_parsing_with_a_timeout_and_impli
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_parsing_with_timeout_and_no_completion() {
     allocations::record(|| {
         let mut parser = Parser::new();
Index: tree-sitter-cli/src/tests/pathological_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/pathological_test.rs
+++ tree-sitter-cli/src/tests/pathological_test.rs
@@ -3,6 +3,7 @@ use tree_sitter::Parser;
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_pathological_example_1() {
     let language = "cpp";
     let source = r#"*ss<s"ss<sqXqss<s._<s<sq<(qqX<sqss<s.ss<sqsssq<(qss<qssqXqss<s._<s<sq<(qqX<sqss<s.ss<sqsssq<(qss<sqss<sqss<s._<s<sq>(qqX<sqss<s.ss<sqsssq<(qss<sq&=ss<s<sqss<s._<s<sq<(qqX<sqss<s.ss<sqs"#;
Index: tree-sitter-cli/src/tests/query_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/query_test.rs
+++ tree-sitter-cli/src/tests/query_test.rs
@@ -19,6 +19,7 @@ lazy_static! {
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_errors_on_invalid_syntax() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -191,6 +192,7 @@ fn test_query_errors_on_invalid_syntax()
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_errors_on_invalid_symbols() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -270,6 +272,7 @@ fn test_query_errors_on_invalid_symbols(
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_errors_on_invalid_predicates() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -314,6 +317,7 @@ fn test_query_errors_on_invalid_predicat
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_errors_on_impossible_patterns() {
     let js_lang = get_language("javascript");
     let rb_lang = get_language("ruby");
@@ -459,6 +463,7 @@ fn test_query_errors_on_impossible_patte
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_verifies_possible_patterns_with_aliased_parent_nodes() {
     allocations::record(|| {
         let ruby = get_language("ruby");
@@ -484,6 +489,7 @@ fn test_query_verifies_possible_patterns
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_simple_pattern() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -507,6 +513,7 @@ fn test_query_matches_with_simple_patter
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_multiple_on_same_root() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -554,6 +561,7 @@ fn test_query_matches_with_multiple_on_s
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_multiple_patterns_different_roots() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -585,6 +593,7 @@ fn test_query_matches_with_multiple_patt
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_multiple_patterns_same_root() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -621,6 +630,7 @@ fn test_query_matches_with_multiple_patt
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_nesting_and_no_fields() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -658,6 +668,7 @@ fn test_query_matches_with_nesting_and_n
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_many_results() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -674,6 +685,7 @@ fn test_query_matches_with_many_results(
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_many_overlapping_results() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -722,6 +734,7 @@ fn test_query_matches_with_many_overlapp
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_capturing_error_nodes() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -744,6 +757,7 @@ fn test_query_matches_capturing_error_no
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_extra_children() {
     allocations::record(|| {
         let language = get_language("ruby");
@@ -788,6 +802,7 @@ fn test_query_matches_with_extra_childre
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_named_wildcard() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -821,6 +836,7 @@ fn test_query_matches_with_named_wildcar
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_wildcard_at_the_root() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -869,6 +885,7 @@ fn test_query_matches_with_wildcard_at_t
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_immediate_siblings() {
     allocations::record(|| {
         let language = get_language("python");
@@ -949,6 +966,7 @@ fn test_query_matches_with_immediate_sib
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_last_named_child() {
     allocations::record(|| {
         let language = get_language("c");
@@ -976,6 +994,7 @@ fn test_query_matches_with_last_named_ch
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_negated_fields() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1042,6 +1061,7 @@ fn test_query_matches_with_negated_field
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_field_at_root() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1061,6 +1081,7 @@ fn test_query_matches_with_field_at_root
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_repeated_leaf_nodes() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1125,6 +1146,7 @@ fn test_query_matches_with_repeated_leaf
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_optional_nodes_inside_of_repetitions() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1146,6 +1168,7 @@ fn test_query_matches_with_optional_node
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_top_level_repetitions() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1179,6 +1202,7 @@ fn test_query_matches_with_top_level_rep
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_non_terminal_repetitions_within_root() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1199,6 +1223,7 @@ fn test_query_matches_with_non_terminal_
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_nested_repetitions() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1234,6 +1259,7 @@ fn test_query_matches_with_nested_repeti
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_multiple_repetition_patterns_that_intersect_other_pattern() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1284,6 +1310,7 @@ fn test_query_matches_with_multiple_repe
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_trailing_repetitions_of_last_child() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1313,6 +1340,7 @@ fn test_query_matches_with_trailing_repe
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_leading_zero_or_more_repeated_leaf_nodes() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1367,6 +1395,7 @@ fn test_query_matches_with_leading_zero_
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_trailing_optional_nodes() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1403,6 +1432,7 @@ fn test_query_matches_with_trailing_opti
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_nested_optional_nodes() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1446,6 +1476,7 @@ fn test_query_matches_with_nested_option
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_repeated_internal_nodes() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1477,6 +1508,7 @@ fn test_query_matches_with_repeated_inte
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_simple_alternatives() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1517,6 +1549,7 @@ fn test_query_matches_with_simple_altern
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_alternatives_in_repetitions() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1554,6 +1587,7 @@ fn test_query_matches_with_alternatives_
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_alternatives_at_root() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1596,6 +1630,7 @@ fn test_query_matches_with_alternatives_
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_alternatives_under_fields() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1632,6 +1667,7 @@ fn test_query_matches_with_alternatives_
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_in_language_with_simple_aliases() {
     allocations::record(|| {
         let language = get_language("html");
@@ -1664,6 +1700,7 @@ fn test_query_matches_in_language_with_s
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_different_tokens_with_the_same_string_value() {
     allocations::record(|| {
         // In Rust, there are two '<' tokens: one for the binary operator,
@@ -1694,6 +1731,7 @@ fn test_query_matches_with_different_tok
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_too_many_permutations_to_track() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1729,6 +1767,7 @@ fn test_query_matches_with_too_many_perm
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_sibling_patterns_dont_match_children_of_an_error() {
     allocations::record(|| {
         let language = get_language("rust");
@@ -1790,6 +1829,7 @@ fn test_query_sibling_patterns_dont_matc
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_alternatives_and_too_many_permutations_to_track() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1830,6 +1870,7 @@ fn test_query_matches_with_alternatives_
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_anonymous_tokens() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1859,6 +1900,7 @@ fn test_query_matches_with_anonymous_tok
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_supertypes() {
     allocations::record(|| {
         let language = get_language("python");
@@ -1902,6 +1944,7 @@ fn test_query_matches_with_supertypes()
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_within_byte_range() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -1958,6 +2001,7 @@ fn test_query_matches_within_byte_range(
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_within_point_range() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2024,6 +2068,7 @@ fn test_query_matches_within_point_range
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_within_byte_range() {
     allocations::record(|| {
         let language = get_language("c");
@@ -2064,6 +2109,7 @@ fn test_query_captures_within_byte_range
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_unrooted_patterns_intersecting_byte_range() {
     allocations::record(|| {
         let language = get_language("rust");
@@ -2119,6 +2165,7 @@ fn test_query_matches_with_unrooted_patt
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_wildcard_at_root_intersecting_byte_range() {
     allocations::record(|| {
         let language = get_language("python");
@@ -2182,6 +2229,7 @@ fn test_query_matches_with_wildcard_at_r
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_within_byte_range_assigned_after_iterating() {
     allocations::record(|| {
         let language = get_language("rust");
@@ -2269,6 +2317,7 @@ fn test_query_captures_within_byte_range
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_within_range_of_long_repetition() {
     allocations::record(|| {
         let language = get_language("rust");
@@ -2321,6 +2370,7 @@ fn test_query_matches_within_range_of_lo
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_different_queries_same_cursor() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2383,6 +2433,7 @@ fn test_query_matches_different_queries_
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_multiple_captures_on_a_node() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2437,6 +2488,7 @@ fn test_query_matches_with_multiple_capt
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_captured_wildcard_at_root() {
     allocations::record(|| {
         let language = get_language("python");
@@ -2525,6 +2577,7 @@ fn test_query_matches_with_captured_wild
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_no_captures() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2556,6 +2609,7 @@ fn test_query_matches_with_no_captures()
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_repeated_fields() {
     allocations::record(|| {
         let language = get_language("c");
@@ -2584,6 +2638,7 @@ fn test_query_matches_with_repeated_fiel
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_deeply_nested_patterns_with_fields() {
     allocations::record(|| {
         let language = get_language("python");
@@ -2673,6 +2728,7 @@ fn test_query_matches_with_deeply_nested
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_matches_with_indefinite_step_containing_no_captures() {
     allocations::record(|| {
         // This pattern depends on the field declarations within the
@@ -2724,6 +2780,7 @@ fn test_query_matches_with_indefinite_st
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_basic() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2800,6 +2857,7 @@ fn test_query_captures_basic() {
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_with_text_conditions() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2856,6 +2914,7 @@ fn test_query_captures_with_text_conditi
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_with_predicates() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2905,6 +2964,7 @@ fn test_query_captures_with_predicates()
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_with_quoted_predicate_args() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2953,6 +3013,7 @@ fn test_query_captures_with_quoted_predi
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_with_duplicates() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -2987,6 +3048,7 @@ fn test_query_captures_with_duplicates()
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_with_many_nested_results_without_fields() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3051,6 +3113,7 @@ fn test_query_captures_with_many_nested_
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_with_many_nested_results_with_fields() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3119,6 +3182,7 @@ fn test_query_captures_with_many_nested_
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_with_too_many_nested_results() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3212,6 +3276,7 @@ fn test_query_captures_with_too_many_nes
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_with_definite_pattern_containing_many_nested_matches() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3261,6 +3326,7 @@ fn test_query_captures_with_definite_pat
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_ordered_by_both_start_and_end_positions() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3302,6 +3368,7 @@ fn test_query_captures_ordered_by_both_s
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_with_matches_removed() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3342,6 +3409,7 @@ fn test_query_captures_with_matches_remo
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_with_matches_removed_before_they_finish() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3390,6 +3458,7 @@ fn test_query_captures_with_matches_remo
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_captures_and_matches_iterators_are_fused() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3434,6 +3503,7 @@ fn test_query_captures_and_matches_itera
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_text_callback_returns_chunks() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3550,6 +3620,7 @@ fn test_query_start_byte_for_pattern() {
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_capture_names() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3583,6 +3654,7 @@ fn test_query_capture_names() {
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_lifetime_is_separate_from_nodes_lifetime() {
     allocations::record(|| {
         let query = r#"(call_expression) @call"#;
@@ -3640,6 +3712,7 @@ fn test_query_lifetime_is_separate_from_
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_with_no_patterns() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3651,6 +3724,7 @@ fn test_query_with_no_patterns() {
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_comments() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3681,6 +3755,7 @@ fn test_query_comments() {
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_disable_pattern() {
     allocations::record(|| {
         let language = get_language("javascript");
@@ -3721,6 +3796,7 @@ fn test_query_disable_pattern() {
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_alternative_predicate_prefix() {
     allocations::record(|| {
         let language = get_language("c");
@@ -3755,6 +3831,7 @@ fn test_query_alternative_predicate_pref
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_random() {
     use pretty_assertions::assert_eq;
 
@@ -3820,6 +3897,7 @@ fn test_query_random() {
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_is_pattern_guaranteed_at_step() {
     struct Row {
         language: Language,
@@ -4125,6 +4203,7 @@ fn test_query_is_pattern_guaranteed_at_s
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_is_pattern_rooted() {
     struct Row {
         description: &'static str,
@@ -4217,6 +4296,7 @@ fn test_query_is_pattern_rooted() {
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_query_is_pattern_non_local() {
     struct Row {
         description: &'static str,
@@ -4315,6 +4395,7 @@ fn test_query_is_pattern_non_local() {
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_capture_quantifiers() {
     struct Row {
         description: &'static str,
Index: tree-sitter-cli/src/tests/tags_test.rs
===================================================================
--- tree-sitter-cli.orig/src/tests/tags_test.rs
+++ tree-sitter-cli/src/tests/tags_test.rs
@@ -264,6 +264,7 @@ fn test_tags_ruby() {
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_tags_cancellation() {
     use std::sync::atomic::{AtomicUsize, Ordering};
 
@@ -339,6 +340,7 @@ fn test_tags_with_parse_error() {
 
 #[test]
 #[ignore="Fixtures aren't in the crate"]
+#[cfg(target_has_atomic = "64")]
 fn test_tags_via_c_api() {
     allocations::record(|| {
         let tagger = c::ts_tagger_new();
