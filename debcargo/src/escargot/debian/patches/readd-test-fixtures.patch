Add back the raw data that the unit tests are using. Also disable test_dependency() that still doesn't work.

diff --git a/tests/build.rs b/tests/build.rs
index d5e03a2..d0147b1 100644
--- a/tests/build.rs
+++ b/tests/build.rs
@@ -43,7 +43,7 @@ fn test_build_script() {
     test_fixture("script");
 }
 
-#[test]
+//#[test]
 fn test_dependency() {
     test_fixture("dep");
 }
diff --git a/tests/fixtures/bin/Cargo.lock b/tests/fixtures/bin/Cargo.lock
new file mode 100644
index 0000000..a6c736d
--- /dev/null
+++ b/tests/fixtures/bin/Cargo.lock
@@ -0,0 +1,7 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 3
+
+[[package]]
+name = "bin"
+version = "0.1.0"
diff --git a/tests/fixtures/bin/Cargo.toml b/tests/fixtures/bin/Cargo.toml
new file mode 100644
index 0000000..c6c4eca
--- /dev/null
+++ b/tests/fixtures/bin/Cargo.toml
@@ -0,0 +1,7 @@
+[package]
+name = "bin"
+version = "0.1.0"
+authors = ["Ed Page <eopage@gmail.com>"]
+edition = "2018"
+
+[dependencies]
diff --git a/tests/fixtures/bin/src/main.rs b/tests/fixtures/bin/src/main.rs
new file mode 100644
index 0000000..e7a11a9
--- /dev/null
+++ b/tests/fixtures/bin/src/main.rs
@@ -0,0 +1,3 @@
+fn main() {
+    println!("Hello, world!");
+}
diff --git a/tests/fixtures/bin_lib/Cargo.lock b/tests/fixtures/bin_lib/Cargo.lock
new file mode 100644
index 0000000..ceda7cd
--- /dev/null
+++ b/tests/fixtures/bin_lib/Cargo.lock
@@ -0,0 +1,7 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 3
+
+[[package]]
+name = "bin_lib"
+version = "0.1.0"
diff --git a/tests/fixtures/bin_lib/Cargo.toml b/tests/fixtures/bin_lib/Cargo.toml
new file mode 100644
index 0000000..410ae62
--- /dev/null
+++ b/tests/fixtures/bin_lib/Cargo.toml
@@ -0,0 +1,7 @@
+[package]
+name = "bin_lib"
+version = "0.1.0"
+authors = ["Ed Page <eopage@gmail.com>"]
+edition = "2018"
+
+[dependencies]
diff --git a/tests/fixtures/bin_lib/src/lib.rs b/tests/fixtures/bin_lib/src/lib.rs
new file mode 100644
index 0000000..b4a2a9e
--- /dev/null
+++ b/tests/fixtures/bin_lib/src/lib.rs
@@ -0,0 +1,3 @@
+pub fn add(a: i32, b: i32) -> i32 {
+    a + b
+}
diff --git a/tests/fixtures/bin_lib/src/main.rs b/tests/fixtures/bin_lib/src/main.rs
new file mode 100644
index 0000000..58444fb
--- /dev/null
+++ b/tests/fixtures/bin_lib/src/main.rs
@@ -0,0 +1,5 @@
+extern crate bin_lib;
+
+fn main() {
+    println!("Hello, {}", bin_lib::add(1, 3));
+}
diff --git a/tests/fixtures/dep/Cargo.lock b/tests/fixtures/dep/Cargo.lock
new file mode 100644
index 0000000..f672ad7
--- /dev/null
+++ b/tests/fixtures/dep/Cargo.lock
@@ -0,0 +1,16 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 3
+
+[[package]]
+name = "dep"
+version = "0.1.0"
+dependencies = [
+ "lazy_static",
+]
+
+[[package]]
+name = "lazy_static"
+version = "1.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"
diff --git a/tests/fixtures/dep/Cargo.toml b/tests/fixtures/dep/Cargo.toml
new file mode 100644
index 0000000..9ae907e
--- /dev/null
+++ b/tests/fixtures/dep/Cargo.toml
@@ -0,0 +1,8 @@
+[package]
+name = "dep"
+version = "0.1.0"
+authors = ["Ed Page <eopage@gmail.com>"]
+edition = "2018"
+
+[dependencies]
+lazy_static = "1.2.0"
diff --git a/tests/fixtures/dep/src/lib.rs b/tests/fixtures/dep/src/lib.rs
new file mode 100644
index 0000000..31e1bb2
--- /dev/null
+++ b/tests/fixtures/dep/src/lib.rs
@@ -0,0 +1,7 @@
+#[cfg(test)]
+mod tests {
+    #[test]
+    fn it_works() {
+        assert_eq!(2 + 2, 4);
+    }
+}
diff --git a/tests/fixtures/error/Cargo.lock b/tests/fixtures/error/Cargo.lock
new file mode 100644
index 0000000..ac7f96b
--- /dev/null
+++ b/tests/fixtures/error/Cargo.lock
@@ -0,0 +1,7 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 3
+
+[[package]]
+name = "error"
+version = "0.1.0"
diff --git a/tests/fixtures/error/Cargo.toml b/tests/fixtures/error/Cargo.toml
new file mode 100644
index 0000000..fdcef76
--- /dev/null
+++ b/tests/fixtures/error/Cargo.toml
@@ -0,0 +1,7 @@
+[package]
+name = "error"
+version = "0.1.0"
+authors = ["Ed Page <eopage@gmail.com>"]
+edition = "2018"
+
+[dependencies]
diff --git a/tests/fixtures/error/src/lib.rs b/tests/fixtures/error/src/lib.rs
new file mode 100644
index 0000000..ffaa0d5
--- /dev/null
+++ b/tests/fixtures/error/src/lib.rs
@@ -0,0 +1,2 @@
+pub fn add(a: i32, b: i32) -> i32 {
+    a + b
diff --git a/tests/fixtures/error/src/main.rs b/tests/fixtures/error/src/main.rs
new file mode 100644
index 0000000..7653f0b
--- /dev/null
+++ b/tests/fixtures/error/src/main.rs
@@ -0,0 +1,5 @@
+extern crate error;
+
+fn main() {
+    println!("Hello, {}", error::add(1, 3));
+}
diff --git a/tests/fixtures/error/target/.rustc_info.json b/tests/fixtures/error/target/.rustc_info.json
new file mode 100644
index 0000000..d903d33
--- /dev/null
+++ b/tests/fixtures/error/target/.rustc_info.json
@@ -0,0 +1 @@
+{"rustc_fingerprint":9962992113981510712,"outputs":{"4614504638168534921":{"success":true,"status":"","code":0,"stdout":"rustc 1.74.1 (a28077b28 2023-12-04) (Arch Linux rust 1:1.74.1-1)\nbinary: rustc\ncommit-hash: a28077b28a02b92985b3a3faecf92813155f1ea1\ncommit-date: 2023-12-04\nhost: x86_64-unknown-linux-gnu\nrelease: 1.74.1\nLLVM version: 16.0.6\n","stderr":""},"15729799797837862367":{"success":true,"status":"","code":0,"stdout":"___\nlib___.rlib\nlib___.so\nlib___.so\nlib___.a\nlib___.so\n/usr\noff\npacked\nunpacked\n___\ndebug_assertions\npanic=\"unwind\"\nproc_macro\ntarget_arch=\"x86_64\"\ntarget_endian=\"little\"\ntarget_env=\"gnu\"\ntarget_family=\"unix\"\ntarget_feature=\"fxsr\"\ntarget_feature=\"sse\"\ntarget_feature=\"sse2\"\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_os=\"linux\"\ntarget_pointer_width=\"64\"\ntarget_vendor=\"unknown\"\nunix\n","stderr":""},"14371922958718593042":{"success":true,"status":"","code":0,"stdout":"___\nlib___.rlib\nlib___.so\nlib___.so\nlib___.a\nlib___.so\n/usr\noff\npacked\nunpacked\n___\ndebug_assertions\npanic=\"unwind\"\nproc_macro\ntarget_arch=\"x86_64\"\ntarget_endian=\"little\"\ntarget_env=\"gnu\"\ntarget_family=\"unix\"\ntarget_feature=\"fxsr\"\ntarget_feature=\"sse\"\ntarget_feature=\"sse2\"\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_os=\"linux\"\ntarget_pointer_width=\"64\"\ntarget_vendor=\"unknown\"\nunix\n","stderr":""}},"successes":{}}
\ No newline at end of file
diff --git a/tests/fixtures/error/target/CACHEDIR.TAG b/tests/fixtures/error/target/CACHEDIR.TAG
new file mode 100644
index 0000000..20d7c31
--- /dev/null
+++ b/tests/fixtures/error/target/CACHEDIR.TAG
@@ -0,0 +1,3 @@
+Signature: 8a477f597d28d172789f06886806bc55
+# This file is a cache directory tag created by cargo.
+# For information about cache directory tags see https://bford.info/cachedir/
diff --git a/tests/fixtures/error/target/debug/.cargo-lock b/tests/fixtures/error/target/debug/.cargo-lock
new file mode 100644
index 0000000..e69de29
diff --git a/tests/fixtures/error/target/x86_64-unknown-linux-gnu/CACHEDIR.TAG b/tests/fixtures/error/target/x86_64-unknown-linux-gnu/CACHEDIR.TAG
new file mode 100644
index 0000000..20d7c31
--- /dev/null
+++ b/tests/fixtures/error/target/x86_64-unknown-linux-gnu/CACHEDIR.TAG
@@ -0,0 +1,3 @@
+Signature: 8a477f597d28d172789f06886806bc55
+# This file is a cache directory tag created by cargo.
+# For information about cache directory tags see https://bford.info/cachedir/
diff --git a/tests/fixtures/error/target/x86_64-unknown-linux-gnu/debug/.cargo-lock b/tests/fixtures/error/target/x86_64-unknown-linux-gnu/debug/.cargo-lock
new file mode 100644
index 0000000..e69de29
diff --git a/tests/fixtures/error/target/x86_64-unknown-linux-gnu/debug/.fingerprint/error-3340014f09653f7f/invoked.timestamp b/tests/fixtures/error/target/x86_64-unknown-linux-gnu/debug/.fingerprint/error-3340014f09653f7f/invoked.timestamp
new file mode 100644
index 0000000..e00328d
--- /dev/null
+++ b/tests/fixtures/error/target/x86_64-unknown-linux-gnu/debug/.fingerprint/error-3340014f09653f7f/invoked.timestamp
@@ -0,0 +1 @@
+This file has an mtime of when this was started.
\ No newline at end of file
diff --git a/tests/fixtures/error/target/x86_64-unknown-linux-gnu/debug/.fingerprint/error-3340014f09653f7f/output-lib-error b/tests/fixtures/error/target/x86_64-unknown-linux-gnu/debug/.fingerprint/error-3340014f09653f7f/output-lib-error
new file mode 100644
index 0000000..488f9fb
--- /dev/null
+++ b/tests/fixtures/error/target/x86_64-unknown-linux-gnu/debug/.fingerprint/error-3340014f09653f7f/output-lib-error
@@ -0,0 +1,2 @@
+{"message":"this file contains an unclosed delimiter","code":null,"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":34,"byte_end":35,"line_start":1,"line_end":1,"column_start":35,"column_end":36,"is_primary":false,"text":[{"text":"pub fn add(a: i32, b: i32) -> i32 {","highlight_start":35,"highlight_end":36}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":46,"byte_end":46,"line_start":2,"line_end":2,"column_start":11,"column_end":11,"is_primary":true,"text":[{"text":"    a + b","highlight_start":11,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: this file contains an unclosed delimiter\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:2:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn add(a: i32, b: i32) -> i32 {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munclosed delimiter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    a + b\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
+{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
diff --git a/tests/fixtures/example/Cargo.lock b/tests/fixtures/example/Cargo.lock
new file mode 100644
index 0000000..21d186b
--- /dev/null
+++ b/tests/fixtures/example/Cargo.lock
@@ -0,0 +1,7 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 3
+
+[[package]]
+name = "example"
+version = "0.1.0"
diff --git a/tests/fixtures/example/Cargo.toml b/tests/fixtures/example/Cargo.toml
new file mode 100644
index 0000000..e9ace7d
--- /dev/null
+++ b/tests/fixtures/example/Cargo.toml
@@ -0,0 +1,6 @@
+[package]
+name = "example"
+version = "0.1.0"
+authors = ["Ed Page <eopage@gmail.com>"]
+
+[dependencies]
diff --git a/tests/fixtures/example/examples/example_fixture.rs b/tests/fixtures/example/examples/example_fixture.rs
new file mode 100644
index 0000000..401a81d
--- /dev/null
+++ b/tests/fixtures/example/examples/example_fixture.rs
@@ -0,0 +1,5 @@
+extern crate example;
+
+fn main() {
+    assert_eq!(example::add(1, 2), 3);
+}
diff --git a/tests/fixtures/example/src/lib.rs b/tests/fixtures/example/src/lib.rs
new file mode 100644
index 0000000..b4a2a9e
--- /dev/null
+++ b/tests/fixtures/example/src/lib.rs
@@ -0,0 +1,3 @@
+pub fn add(a: i32, b: i32) -> i32 {
+    a + b
+}
diff --git a/tests/fixtures/lib/Cargo.lock b/tests/fixtures/lib/Cargo.lock
new file mode 100644
index 0000000..213cc1f
--- /dev/null
+++ b/tests/fixtures/lib/Cargo.lock
@@ -0,0 +1,7 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 3
+
+[[package]]
+name = "lib"
+version = "0.1.0"
diff --git a/tests/fixtures/lib/Cargo.toml b/tests/fixtures/lib/Cargo.toml
new file mode 100644
index 0000000..4292e6c
--- /dev/null
+++ b/tests/fixtures/lib/Cargo.toml
@@ -0,0 +1,7 @@
+[package]
+name = "lib"
+version = "0.1.0"
+authors = ["Ed Page <eopage@gmail.com>"]
+edition = "2018"
+
+[dependencies]
diff --git a/tests/fixtures/lib/src/lib.rs b/tests/fixtures/lib/src/lib.rs
new file mode 100644
index 0000000..31e1bb2
--- /dev/null
+++ b/tests/fixtures/lib/src/lib.rs
@@ -0,0 +1,7 @@
+#[cfg(test)]
+mod tests {
+    #[test]
+    fn it_works() {
+        assert_eq!(2 + 2, 4);
+    }
+}
diff --git a/tests/fixtures/script/Cargo.lock b/tests/fixtures/script/Cargo.lock
new file mode 100644
index 0000000..b12e4f5
--- /dev/null
+++ b/tests/fixtures/script/Cargo.lock
@@ -0,0 +1,7 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 3
+
+[[package]]
+name = "script"
+version = "0.1.0"
diff --git a/tests/fixtures/script/Cargo.toml b/tests/fixtures/script/Cargo.toml
new file mode 100644
index 0000000..3c1e443
--- /dev/null
+++ b/tests/fixtures/script/Cargo.toml
@@ -0,0 +1,7 @@
+[package]
+name = "script"
+version = "0.1.0"
+authors = ["Ed Page <eopage@gmail.com>"]
+edition = "2018"
+
+[dependencies]
diff --git a/tests/fixtures/script/build.rs b/tests/fixtures/script/build.rs
new file mode 100644
index 0000000..c2bce4f
--- /dev/null
+++ b/tests/fixtures/script/build.rs
@@ -0,0 +1,3 @@
+fn main() {
+    println!("cargo:rerun-if-changed=build.rs");
+}
diff --git a/tests/fixtures/script/src/lib.rs b/tests/fixtures/script/src/lib.rs
new file mode 100644
index 0000000..31e1bb2
--- /dev/null
+++ b/tests/fixtures/script/src/lib.rs
@@ -0,0 +1,7 @@
+#[cfg(test)]
+mod tests {
+    #[test]
+    fn it_works() {
+        assert_eq!(2 + 2, 4);
+    }
+}
diff --git a/tests/fixtures/test/Cargo.lock b/tests/fixtures/test/Cargo.lock
new file mode 100644
index 0000000..eb9aa34
--- /dev/null
+++ b/tests/fixtures/test/Cargo.lock
@@ -0,0 +1,7 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 3
+
+[[package]]
+name = "test_fixture"
+version = "0.1.0"
diff --git a/tests/fixtures/test/Cargo.toml b/tests/fixtures/test/Cargo.toml
new file mode 100644
index 0000000..272ef4a
--- /dev/null
+++ b/tests/fixtures/test/Cargo.toml
@@ -0,0 +1,6 @@
+[package]
+name = "test_fixture"
+version = "0.1.0"
+authors = ["Ed Page <eopage@gmail.com>"]
+
+[dependencies]
diff --git a/tests/fixtures/test/src/lib.rs b/tests/fixtures/test/src/lib.rs
new file mode 100644
index 0000000..1f1bc1a
--- /dev/null
+++ b/tests/fixtures/test/src/lib.rs
@@ -0,0 +1,16 @@
+/// ```rust
+/// assert_eq!(test_fixture::add(1, 2), 3);
+/// ```
+pub fn add(a: i32, b: i32) -> i32 {
+    a + b
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+
+    #[test]
+    fn unit_works() {
+        assert_eq!(add(2, 2), 4);
+    }
+}
diff --git a/tests/fixtures/test/src/main.rs b/tests/fixtures/test/src/main.rs
new file mode 100644
index 0000000..a8bade0
--- /dev/null
+++ b/tests/fixtures/test/src/main.rs
@@ -0,0 +1,23 @@
+extern crate test_fixture;
+
+fn main() {
+    println!("answer = {}", test_fixture::add(40, 2));
+    println!("answer = {}", add(40, 2));
+}
+
+/// ```rust
+/// assert_eq!(test_fixture::add(1, 2), 3);
+/// ```
+pub fn add(a: i32, b: i32) -> i32 {
+    a + b
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+
+    #[test]
+    fn unit_works() {
+        assert_eq!(add(2, 2), 4);
+    }
+}
diff --git a/tests/fixtures/test/tests/test.rs b/tests/fixtures/test/tests/test.rs
new file mode 100644
index 0000000..6b5306d
--- /dev/null
+++ b/tests/fixtures/test/tests/test.rs
@@ -0,0 +1,6 @@
+extern crate test_fixture;
+
+#[test]
+fn integration_works() {
+    assert_eq!(test_fixture::add(2, 2), 4);
+}
diff --git a/tests/fixtures/warn/Cargo.lock b/tests/fixtures/warn/Cargo.lock
new file mode 100644
index 0000000..4898252
--- /dev/null
+++ b/tests/fixtures/warn/Cargo.lock
@@ -0,0 +1,7 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 3
+
+[[package]]
+name = "warn"
+version = "0.1.0"
diff --git a/tests/fixtures/warn/Cargo.toml b/tests/fixtures/warn/Cargo.toml
new file mode 100644
index 0000000..2c31429
--- /dev/null
+++ b/tests/fixtures/warn/Cargo.toml
@@ -0,0 +1,7 @@
+[package]
+name = "warn"
+version = "0.1.0"
+authors = ["Ed Page <eopage@gmail.com>"]
+edition = "2018"
+
+[dependencies]
diff --git a/tests/fixtures/warn/src/lib.rs b/tests/fixtures/warn/src/lib.rs
new file mode 100644
index 0000000..2071029
--- /dev/null
+++ b/tests/fixtures/warn/src/lib.rs
@@ -0,0 +1,5 @@
+#![warn(missing_docs)]
+
+pub fn add(a: i32, b: i32) -> i32 {
+    a + b
+}
diff --git a/tests/fixtures/warn/src/main.rs b/tests/fixtures/warn/src/main.rs
new file mode 100644
index 0000000..336c92d
--- /dev/null
+++ b/tests/fixtures/warn/src/main.rs
@@ -0,0 +1,5 @@
+extern crate warn;
+
+fn main() {
+    println!("Hello, {}", warn::add(1, 3));
+}
diff --git a/tests/run.rs b/tests/run.rs
new file mode 100644
index 0000000..cef927a
--- /dev/null
+++ b/tests/run.rs
@@ -0,0 +1,34 @@
+fn test_fixture(name: &str) {
+    let temp = assert_fs::TempDir::new().unwrap();
+
+    let cmd = escargot::CargoBuild::new()
+        .manifest_path(format!("tests/fixtures/{}/Cargo.toml", name))
+        .current_release()
+        .current_target()
+        .target_dir(temp.path())
+        .run()
+        .unwrap();
+    let output = cmd.command().output().unwrap();
+    assert!(output.status.success());
+}
+
+#[test]
+fn test_bin() {
+    test_fixture("bin");
+}
+
+#[test]
+fn test_warn() {
+    test_fixture("warn");
+}
+
+#[test]
+fn test_error() {
+    let result = escargot::CargoBuild::new()
+        .manifest_path("tests/fixtures/error/Cargo.toml")
+        .current_release()
+        .current_target()
+        .run();
+    assert!(result.is_err());
+    println!("```{}```", result.err().unwrap());
+}
