Index: netlink-sys/Cargo.toml
===================================================================
--- netlink-sys.orig/Cargo.toml
+++ netlink-sys/Cargo.toml
@@ -31,7 +31,7 @@ name = "audit_events_tokio_manual_thread
 required-features = ["tokio_socket"]
 
 [dependencies.async-io]
-version = "1.3"
+version = "2"
 optional = true
 
 [dependencies.bytes]
Index: netlink-sys/src/smol.rs
===================================================================
--- netlink-sys.orig/src/smol.rs
+++ netlink-sys/src/smol.rs
@@ -79,7 +79,7 @@ impl AsyncSocket for SmolSocket {
 
     /// Mutable access to underyling [`Socket`]
     fn socket_mut(&mut self) -> &mut Socket {
-        self.0.get_mut()
+        unsafe { self.0.get_mut() }
     }
 
     fn new(protocol: isize) -> io::Result<Self> {
@@ -92,7 +92,7 @@ impl AsyncSocket for SmolSocket {
         cx: &mut Context<'_>,
         buf: &[u8],
     ) -> Poll<io::Result<usize>> {
-        self.poll_write_with(cx, |this| this.0.get_mut().send(buf, 0))
+        unsafe { self.poll_write_with(cx, |this| this.0.get_mut().send(buf, 0)) }
     }
 
     fn poll_send_to(
@@ -101,7 +101,7 @@ impl AsyncSocket for SmolSocket {
         buf: &[u8],
         addr: &SocketAddr,
     ) -> Poll<io::Result<usize>> {
-        self.poll_write_with(cx, |this| this.0.get_mut().send_to(buf, addr, 0))
+        unsafe { self.poll_write_with(cx, |this| this.0.get_mut().send_to(buf, addr, 0)) }
     }
 
     fn poll_recv<B>(
@@ -113,7 +113,7 @@ impl AsyncSocket for SmolSocket {
         B: bytes::BufMut,
     {
         self.poll_read_with(cx, |this| {
-            this.0.get_mut().recv(buf, 0).map(|_len| ())
+            unsafe { this.0.get_mut().recv(buf, 0).map(|_len| ()) }
         })
     }
 
@@ -126,7 +126,7 @@ impl AsyncSocket for SmolSocket {
         B: bytes::BufMut,
     {
         self.poll_read_with(cx, |this| {
-            let x = this.0.get_mut().recv_from(buf, 0);
+            let x = unsafe { this.0.get_mut().recv_from(buf, 0) };
             trace!("poll_recv_from: {:?}", x);
             x.map(|(_len, addr)| addr)
         })
@@ -136,6 +136,6 @@ impl AsyncSocket for SmolSocket {
         &mut self,
         cx: &mut Context<'_>,
     ) -> Poll<io::Result<(Vec<u8>, SocketAddr)>> {
-        self.poll_read_with(cx, |this| this.0.get_mut().recv_from_full())
+        unsafe { self.poll_read_with(cx, |this| this.0.get_mut().recv_from_full()) }
     }
 }
Index: netlink-sys/src/socket.rs
===================================================================
--- netlink-sys.orig/src/socket.rs
+++ netlink-sys/src/socket.rs
@@ -4,6 +4,7 @@ use std::{
     io::{Error, Result},
     mem,
     os::unix::io::{AsRawFd, FromRawFd, RawFd},
+    os::fd::{BorrowedFd,AsFd},
 };
 
 use crate::SocketAddr;
@@ -60,6 +61,12 @@ impl AsRawFd for Socket {
     }
 }
 
+impl AsFd for Socket {
+    fn as_fd(&self) -> BorrowedFd<'_> {
+        unsafe { BorrowedFd::borrow_raw(self.0) }
+    }
+}
+
 impl FromRawFd for Socket {
     unsafe fn from_raw_fd(fd: RawFd) -> Self {
         Socket(fd)
