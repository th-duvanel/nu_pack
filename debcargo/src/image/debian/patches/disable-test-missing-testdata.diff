Index: image/src/codecs/bmp/decoder.rs
===================================================================
--- image.orig/src/codecs/bmp/decoder.rs
+++ image/src/codecs/bmp/decoder.rs
@@ -1423,6 +1423,7 @@ mod test {
     }
 
     #[test]
+    #[ignore = "skipping ..."]
     fn read_rect() {
         let f = std::fs::File::open("tests/images/bmp/images/Core_8_Bit.bmp").unwrap();
         let mut decoder = super::BmpDecoder::new(f).unwrap();
Index: image/src/codecs/png.rs
===================================================================
--- image.orig/src/codecs/png.rs
+++ image/src/codecs/png.rs
@@ -726,6 +726,7 @@ mod tests {
     use std::io::{Cursor, Read};
 
     #[test]
+    #[ignore = "skipping ..."]
     fn ensure_no_decoder_off_by_one() {
         let dec = PngDecoder::new(
             std::fs::File::open("tests/images/png/bugfixes/debug_triangle_corners_widescreen.png")
@@ -752,6 +753,7 @@ mod tests {
     }
 
     #[test]
+    #[ignore = "skipping ..."]
     fn underlying_error() {
         use std::error::Error;
 
Index: image/src/dynimage.rs
===================================================================
--- image.orig/src/dynimage.rs
+++ image/src/dynimage.rs
@@ -1241,6 +1241,7 @@ mod test {
 
     #[cfg(feature = "jpeg")]
     #[test]
+    #[ignore = "skipping ..."]
     fn image_dimensions() {
         let im_path = "./tests/images/jpg/progressive/cat.jpg";
         let dims = super::image_dimensions(im_path).unwrap();
Index: image/src/imageops/sample.rs
===================================================================
--- image.orig/src/imageops/sample.rs
+++ image/src/imageops/sample.rs
@@ -1011,6 +1011,7 @@ mod tests {
     use test;
 
     #[bench]
+    #[ignore = "skipping ..."]
     #[cfg(all(feature = "benchmarks", feature = "png"))]
     fn bench_resize(b: &mut test::Bencher) {
         use std::path::Path;
@@ -1125,6 +1126,7 @@ mod tests {
     }
 
     #[bench]
+    #[ignore = "skipping ..."]
     #[cfg(all(feature = "benchmarks", feature = "tiff"))]
     fn bench_resize_same_size(b: &mut test::Bencher) {
         let path = concat!(
@@ -1145,6 +1147,7 @@ mod tests {
     }
 
     #[bench]
+    #[ignore = "skipping ..."]
     #[cfg(all(feature = "benchmarks", feature = "tiff"))]
     fn bench_thumbnail(b: &mut test::Bencher) {
         let path = concat!(
@@ -1159,6 +1162,7 @@ mod tests {
     }
 
     #[bench]
+    #[ignore = "skipping ..."]
     #[cfg(all(feature = "benchmarks", feature = "tiff"))]
     fn bench_thumbnail_upsize(b: &mut test::Bencher) {
         let path = concat!(
@@ -1173,6 +1177,7 @@ mod tests {
     }
 
     #[bench]
+    #[ignore = "skipping ..."]
     #[cfg(all(feature = "benchmarks", feature = "tiff"))]
     fn bench_thumbnail_upsize_irregular(b: &mut test::Bencher) {
         let path = concat!(
@@ -1187,6 +1192,7 @@ mod tests {
     }
 
     #[test]
+    #[ignore = "skipping ..."]
     #[cfg(feature = "png")]
     fn resize_transparent_image() {
         use super::FilterType::{CatmullRom, Gaussian, Lanczos3, Nearest, Triangle};
