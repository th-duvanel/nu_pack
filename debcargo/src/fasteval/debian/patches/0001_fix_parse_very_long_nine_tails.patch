Description: fix test: parse Very Long nine tails
	Rust can parse Very Long nine tails since 1.55.0

Author: nabijaczleweli: https://github.com/likebike/fasteval/pull/17
Origin: other, https://github.com/likebike/fasteval/pull/17
Bug: https://github.com/likebike/fasteval/issues/16
Forwarded: https://github.com/likebike/fasteval/pull/17
Last-Update: 2021-12-21

Index: fasteval/tests/from_go.rs
===================================================================
--- fasteval.orig/tests/from_go.rs
+++ fasteval/tests/from_go.rs
@@ -6,6 +6,8 @@ use fasteval::{Evaler, ExpressionI, Pars

 use std::collections::BTreeMap;
 use std::collections::BTreeSet;
+use std::process::Command;
+use std::env;

 fn parse_raw<'a>(s:&str, slab:&'a mut Slab) -> Result<ExpressionI,Error> {
     Parser::new().parse(s, &mut slab.ps)
@@ -61,9 +63,20 @@ fn aaa_test_b0() {
     ok_parse("3.14 + 4.99999999999999999999999999999999999999999999999999999", &mut slab);
     assert_eq!(format!("{:?}",&slab),
 "Slab{ exprs:{ 0:Expression { first: EConstant(3.14), pairs: [ExprPair(EAdd, EConstant(5.0))] } }, vals:{}, instrs:{} }");
-    // Go can parse this, but not Rust:
-    assert_eq!(parse_raw("3.14 + 4.999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", &mut slab),
+
+    // Go can parse this, but Rust couldn't before 1.55.0
+    let ver = Command::new(env::var_os("RUSTC").unwrap_or_else(|| "rustc".into())).arg("--version").output().ok()
+        .and_then(|o| String::from_utf8(o.stdout).ok()).as_ref().and_then(|v| v.split_whitespace().nth(1))
+        .map(|v| v.split('.').flat_map(|n| n.parse()).collect::<Vec<u16>>()).unwrap_or(vec![]);
+    if ver.len() >= 2 && (ver[0] > 1 || (ver[0] == 1 && ver[1] >= 55)) {
+        ok_parse("3.14 + 4.999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", &mut slab);
+        assert_eq!(format!("{:?}",&slab),
+"Slab{ exprs:{ 0:Expression { first: EConstant(3.14), pairs: [ExprPair(EAdd, EConstant(5.0))] } }, vals:{}, instrs:{} }");
+    } else {
+        assert_eq!(parse_raw("3.14 + 4.999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", &mut slab),
 Err(Error::ParseF64("4.999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999".to_string())));
+    }
+
     ok_parse("3.14 + 0.9999", &mut slab);
     assert_eq!(format!("{:?}",&slab),
 "Slab{ exprs:{ 0:Expression { first: EConstant(3.14), pairs: [ExprPair(EAdd, EConstant(0.9999))] } }, vals:{}, instrs:{} }");
