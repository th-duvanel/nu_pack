This tests changes the blocking_file_part test to use a different
test file because Cargo.lock is not available in the autopkgtest
environment.

It also changes the asserts to make failures easier to debug and nails-down the
content-type, so it can't cause supious failures.

Index: reqwest/tests/multipart.rs
===================================================================
--- reqwest.orig/tests/multipart.rs
+++ reqwest/tests/multipart.rs
@@ -128,15 +128,14 @@ fn blocking_file_part() {
     let _ = env_logger::try_init();
 
     let form = reqwest::blocking::multipart::Form::new()
-        .file("foo", "Cargo.lock")
-        .unwrap();
+        .part("foo", reqwest::blocking::multipart::Part::file("src/proxy.rs").unwrap().mime_str("application/octet-stream").unwrap());
 
-    let fcontents = std::fs::read_to_string("Cargo.lock").unwrap();
+    let fcontents = std::fs::read_to_string("src/proxy.rs").unwrap();
 
     let expected_body = format!(
         "\
          --{0}\r\n\
-         Content-Disposition: form-data; name=\"foo\"; filename=\"Cargo.lock\"\r\n\
+         Content-Disposition: form-data; name=\"foo\"; filename=\"proxy.rs\"\r\n\
          Content-Type: application/octet-stream\r\n\r\n\
          {1}\r\n\
          --{0}--\r\n\
@@ -153,18 +152,19 @@ fn blocking_file_part() {
         async move {
             assert_eq!(req.method(), "POST");
             assert_eq!(req.headers()["content-type"], ct);
-            // files know their exact size
-            assert_eq!(
-                req.headers()["content-length"],
-                expected_body.len().to_string()
-            );
 
             let mut full: Vec<u8> = Vec::new();
             while let Some(item) = req.body_mut().next().await {
                 full.extend(&*item.unwrap());
             }
 
-            assert_eq!(full, expected_body.as_bytes());
+            assert_eq!(std::str::from_utf8(&full).unwrap(), expected_body);
+
+            // files know their exact size
+            assert_eq!(
+                req.headers()["content-length"],
+                expected_body.len().to_string()
+            );
 
             http::Response::default()
         }
