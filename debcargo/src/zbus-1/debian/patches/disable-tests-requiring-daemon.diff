Index: rust-zbus-1-1.9.3/src/connection.rs
===================================================================
--- rust-zbus-1-1.9.3.orig/src/connection.rs
+++ rust-zbus-1-1.9.3/src/connection.rs
@@ -598,7 +598,7 @@ mod tests {
         assert_eq!(val, "yay");
     }
 
-    #[test]
+    /*#[test]
     fn serial_monotonically_increases() {
         let c = Connection::new_session().unwrap();
         let serial = c.next_serial() + 1;
@@ -606,5 +606,5 @@ mod tests {
         for next in serial..serial + 10 {
             assert_eq!(next, c.next_serial());
         }
-    }
+    }*/
 }
Index: rust-zbus-1-1.9.3/src/fdo.rs
===================================================================
--- rust-zbus-1-1.9.3.orig/src/fdo.rs
+++ rust-zbus-1-1.9.3/src/fdo.rs
@@ -520,7 +520,7 @@ mod tests {
         assert_eq!(e, fdo::Error::TimedOut("so long".to_string()));
     }
 
-    #[test]
+    /*#[test]
     fn signal() {
         // Register a well-known name with the session bus and ensure we get the appropriate
         // signals called for that.
@@ -580,5 +580,5 @@ mod tests {
 
         let result = proxy.release_name(&well_known).unwrap();
         assert_eq!(result, fdo::ReleaseNameReply::NonExistent);
-    }
+    }*/
 }
Index: rust-zbus-1-1.9.3/src/lib.rs
===================================================================
--- rust-zbus-1-1.9.3.orig/src/lib.rs
+++ rust-zbus-1-1.9.3/src/lib.rs
@@ -237,7 +237,7 @@ mod tests {
         assert!(primary.flags() == MessageFlags::NoAutoStart);
     }
 
-    #[test]
+    /*#[test]
     fn basic_connection() {
         let connection = crate::Connection::new_session()
             .map_err(|e| {
@@ -313,7 +313,7 @@ mod tests {
         assert!(fd.as_raw_fd() >= 0);
         let f = unsafe { File::from_raw_fd(fd.as_raw_fd()) };
         f.metadata().unwrap();
-    }
+    }*/
 
     // Let's try getting us a fancy name on the bus
     #[repr(u32)]
@@ -333,7 +333,7 @@ mod tests {
         AlreadyOwner = 0x04,
     }
 
-    #[test]
+    /*#[test]
     fn freedesktop_api() {
         let mut connection = crate::Connection::new_session()
             .map_err(|e| {
@@ -438,9 +438,9 @@ mod tests {
 
         let uid: u32 = (&hashmap["UnixUserID"]).try_into().unwrap();
         println!("DBus bus UID: {}", uid);
-    }
+    }*/
 
-    #[test]
+    /*#[test]
     fn freedesktop_api_async() {
         futures::executor::block_on(test_freedesktop_api()).unwrap();
     }
@@ -649,7 +649,7 @@ mod tests {
 
         let val = child.join().expect("failed to join");
         assert_eq!(val, 2);
-    }
+    }*/
 
     #[test]
     fn connection_is_send_and_sync() {
Index: rust-zbus-1-1.9.3/src/object_server.rs
===================================================================
--- rust-zbus-1-1.9.3.orig/src/object_server.rs
+++ rust-zbus-1-1.9.3/src/object_server.rs
@@ -799,7 +799,7 @@ mod tests {
         Ok(val)
     }
 
-    #[test]
+    /*#[test]
     fn basic_iface() {
         let conn = Connection::new_session().unwrap();
         let mut object_server = ObjectServer::new(&conn);
@@ -853,5 +853,5 @@ mod tests {
 
         let val = child.join().expect("failed to join");
         assert_eq!(val, 2);
-    }
+    }*/
 }
Index: rust-zbus-1-1.9.3/src/proxy.rs
===================================================================
--- rust-zbus-1-1.9.3.orig/src/proxy.rs
+++ rust-zbus-1-1.9.3/src/proxy.rs
@@ -342,7 +342,7 @@ mod tests {
     use super::*;
     use std::sync::Arc;
 
-    #[test]
+    /*#[test]
     fn signal() {
         // Register a well-known name with the session bus and ensure we get the appropriate
         // signals called for that.
@@ -404,5 +404,5 @@ mod tests {
                 break;
             }
         }
-    }
+    }*/
 }
Index: rust-zbus-1-1.9.3/src/signal_receiver.rs
===================================================================
--- rust-zbus-1-1.9.3.orig/src/signal_receiver.rs
+++ rust-zbus-1-1.9.3/src/signal_receiver.rs
@@ -202,7 +202,7 @@ mod tests {
         Ok(99)
     }
 
-    #[test]
+    /*#[test]
     fn multiple_proxy_signals() {
         struct MultiSignal {
             times_called: Rc<RefCell<u8>>,
@@ -256,5 +256,5 @@ mod tests {
 
         let val = child.join().expect("failed to join");
         assert_eq!(val, 99);
-    }
+    }*/
 }
