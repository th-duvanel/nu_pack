diff --git a/Cargo.toml b/Cargo.toml
index 3a355ee..92ae0ac 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -21,7 +21,7 @@ categories = ["cryptography", "parser-implementations", "encoding"]
 license-file = "LICENSE"
 repository = "https://github.com/dnaeon/rust-sshkeys"
 [dependencies.base64]
-version = "0.12.1"
+version = "0.21"
 
 [dependencies.byteorder]
 version = "1.3.4"
@@ -31,6 +31,6 @@ version = "1"
 optional = true
 
 [dependencies.sha2]
-version = "0.8.1"
+version = "0.10"
 [dev-dependencies.serde_test]
 version = "1"
diff --git a/src/cert.rs b/src/cert.rs
index 592ab20..cd50221 100644
--- a/src/cert.rs
+++ b/src/cert.rs
@@ -10,6 +10,7 @@ use super::pubkey::PublicKey;
 use super::reader::Reader;
 
 use base64;
+use base64::Engine;
 
 /// Represents the different types a certificate can be.
 #[derive(Debug, PartialEq)]
@@ -130,7 +131,7 @@ impl Certificate {
             .ok_or(Error::with_kind(ErrorKind::InvalidFormat))?;
 
         let comment = iter.next().map(|v| String::from(v));
-        let decoded = base64::decode(&data)?;
+        let decoded = base64::engine::general_purpose::STANDARD.decode(&data)?;
         let mut reader = Reader::new(&decoded);
 
         // Validate key types before reading the rest of the data
diff --git a/src/pubkey.rs b/src/pubkey.rs
index 978ba2b..ce48f78 100644
--- a/src/pubkey.rs
+++ b/src/pubkey.rs
@@ -9,6 +9,7 @@ use super::reader::Reader;
 use super::writer::Writer;
 
 use base64;
+use base64::Engine;
 
 use sha2::{Digest, Sha256, Sha384, Sha512};
 
@@ -158,7 +159,7 @@ impl fmt::Display for PublicKey {
             f,
             "{} {} {}",
             self.key_type,
-            base64::encode(&self.encode()),
+            base64::engine::general_purpose::STANDARD.encode(&self.encode()),
             comment
         )
     }
@@ -225,7 +226,7 @@ impl Fingerprint {
             FingerprintKind::Sha512 => Sha512::digest(&data.as_ref()).to_vec(),
         };
 
-        let mut encoded = base64::encode(&digest);
+        let mut encoded = base64::engine::general_purpose::STANDARD.encode(&digest);
 
         // Trim padding characters from end
         let hash = match encoded.find('=') {
@@ -285,7 +286,7 @@ impl PublicKey {
 
         let kt = KeyType::from_name(&kt_name)?;
 
-        let decoded = base64::decode(&data)?;
+        let decoded = base64::engine::general_purpose::STANDARD.decode(&data)?;
         let mut reader = Reader::new(&decoded);
 
         // Validate key type before reading rest of the data
@@ -516,7 +517,7 @@ impl PublicKey {
     /// ```
     pub fn write<W: io::Write>(&self, w: &mut W) -> io::Result<()> {
         let encoded = self.encode();
-        let data = base64::encode(&encoded);
+        let data = base64::engine::general_purpose::STANDARD.encode(&encoded);
         match self.comment {
             Some(ref c) => w.write_fmt(format_args!("{} {} {}\n", self.key_type.name, data, c)),
             None => w.write_fmt(format_args!("{} {}\n", self.key_type.name, data)),
