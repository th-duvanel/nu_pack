Index: rust-atomic-0.5.1/src/lib.rs
===================================================================
--- rust-atomic-0.5.1.orig/src/lib.rs
+++ rust-atomic-0.5.1/src/lib.rs
@@ -468,6 +468,10 @@ mod tests {
         assert_eq!(a.load(SeqCst), 30);
     }
 
+    // on 32-bit x86 64 bit atomics exist, but they can't be used to implement
+    // atomic<i64> because AtomicI64 has a greater alignment requirement than
+    // i64.
+    #[cfg(any(feature = "fallback",all(has_atomic_i64,not(target_arch = "x86"))))]
     #[test]
     fn atomic_i64() {
         let a = Atomic::new(0i64);
@@ -491,6 +495,7 @@ mod tests {
         assert_eq!(a.load(SeqCst), 30);
     }
 
+    #[cfg(any(feature = "fallback",has_atomic_i128))]
     #[test]
     fn atomic_i128() {
         let a = Atomic::new(0i128);
@@ -590,6 +595,10 @@ mod tests {
         assert_eq!(a.load(SeqCst), 30);
     }
 
+    // on 32-bit x86 64 bit atomics exist, but they can't be used to implement
+    // atomic<u64> because AtomicU64 has a greater alignment requirement than
+    // u64.
+    #[cfg(any(feature = "fallback",all(has_atomic_u64,not(target_arch = "x86"))))]
     #[test]
     fn atomic_u64() {
         let a = Atomic::new(0u64);
@@ -613,6 +622,7 @@ mod tests {
         assert_eq!(a.load(SeqCst), 30);
     }
 
+    #[cfg(any(feature = "fallback",has_atomic_u128))]
     #[test]
     fn atomic_u128() {
         let a = Atomic::new(0u128);
@@ -652,6 +662,7 @@ mod tests {
         assert_eq!(a.load(SeqCst), 30);
     }
 
+    #[cfg(feature = "fallback")]
     #[test]
     fn atomic_foo() {
         let a = Atomic::default();
@@ -671,6 +682,7 @@ mod tests {
         assert_eq!(a.load(SeqCst), Foo(3, 3));
     }
 
+    #[cfg(feature = "fallback")]
     #[test]
     fn atomic_bar() {
         let a = Atomic::default();
