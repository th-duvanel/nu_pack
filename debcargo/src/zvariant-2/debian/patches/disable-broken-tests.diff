Index: zvariant-2/src/lib.rs
===================================================================
--- zvariant-2.orig/src/lib.rs
+++ zvariant-2/src/lib.rs
@@ -227,8 +227,8 @@ mod tests {
     #[cfg(feature = "arrayvec")]
     use std::str::FromStr;
 
-    #[cfg(feature = "gvariant")]
-    use glib::{Bytes, FromVariant, Variant};
+    //#[cfg(feature = "gvariant")]
+    //use glib::{Bytes, FromVariant, Variant};
     use serde::{Deserialize, Serialize};
 
     use zvariant_derive::{DeserializeDict, SerializeDict, Type, TypeDict};
@@ -370,7 +370,7 @@ mod tests {
         assert!(decoded == v, "invalid decoding using `from_slice`");
     }
 
-    #[cfg(feature = "gvariant")]
+    /*#[cfg(feature = "gvariant")]
     fn decode_with_gvariant<B, T>(encoded: B) -> T
     where
         B: AsRef<[u8]> + Send + 'static,
@@ -379,7 +379,7 @@ mod tests {
         let bytes = Bytes::from_owned(encoded);
         let gv = Variant::from_bytes::<T>(&bytes);
         gv.get::<T>().unwrap()
-    }
+    }*/
 
     // All fixed size types have the same encoding in DBus and GVariant formats.
     //
@@ -391,7 +391,7 @@ mod tests {
         assert_eq!(encoded.len(), 1);
         #[cfg(feature = "gvariant")]
         {
-            assert_eq!(decode_with_gvariant::<_, u8>(encoded), 77u8);
+            //assert_eq!(decode_with_gvariant::<_, u8>(encoded), 77u8);
             basic_type_test!(LE, GVariant, 77_u8, 1, u8, 1, U8, 3);
         }
     }
@@ -416,7 +416,7 @@ mod tests {
         assert_eq!(encoded.len(), 2);
         #[cfg(feature = "gvariant")]
         {
-            assert_eq!(decode_with_gvariant::<_, u16>(encoded), 0xBAAB_u16);
+            //assert_eq!(decode_with_gvariant::<_, u16>(encoded), 0xBAAB_u16);
             basic_type_test!(BE, GVariant, 0xABBA_u16, 2, u16, 2, U16, 4);
         }
     }
@@ -427,7 +427,7 @@ mod tests {
         assert_eq!(LE::read_i16(&encoded), 0x50F5_i16);
         #[cfg(feature = "gvariant")]
         {
-            assert_eq!(decode_with_gvariant::<_, i16>(encoded), 0x50F5_i16);
+            //assert_eq!(decode_with_gvariant::<_, i16>(encoded), 0x50F5_i16);
             basic_type_test!(BE, GVariant, -0xAB0_i16, 2, i16, 2, I16, 4);
         }
     }
@@ -438,7 +438,7 @@ mod tests {
         assert_eq!(encoded.len(), 4);
         #[cfg(feature = "gvariant")]
         {
-            assert_eq!(decode_with_gvariant::<_, u32>(encoded), 0xBAAB_BAAB_u32);
+            //assert_eq!(decode_with_gvariant::<_, u32>(encoded), 0xBAAB_BAAB_u32);
             basic_type_test!(BE, GVariant, 0xABBA_ABBA_u32, 4, u32, 4, U32, 6);
         }
     }
@@ -449,7 +449,7 @@ mod tests {
         assert_eq!(LE::read_i32(&encoded), 0x5055_44F5_i32);
         #[cfg(feature = "gvariant")]
         {
-            assert_eq!(decode_with_gvariant::<_, i32>(encoded), 0x5055_44F5_i32);
+            //assert_eq!(decode_with_gvariant::<_, i32>(encoded), 0x5055_44F5_i32);
             basic_type_test!(BE, GVariant, -0xABBA_AB0_i32, 4, i32, 4, I32, 6);
         }
     }
@@ -462,10 +462,10 @@ mod tests {
         assert_eq!(LE::read_i64(&encoded), 0x5055_4455_4455_44F5_i64);
         #[cfg(feature = "gvariant")]
         {
-            assert_eq!(
+            /*assert_eq!(
                 decode_with_gvariant::<_, i64>(encoded),
                 0x5055_4455_4455_44F5_i64
-            );
+            );*/
             basic_type_test!(BE, GVariant, -0xABBA_ABBA_ABBA_AB0_i64, 8, i64, 8, I64, 10);
         }
     }
@@ -476,10 +476,10 @@ mod tests {
         assert!((LE::read_f64(&encoded) - -5.759340900185448e-128).abs() < f64::EPSILON);
         #[cfg(feature = "gvariant")]
         {
-            assert!(
+            /*assert!(
                 (decode_with_gvariant::<_, f64>(encoded) - -5.759340900185448e-128).abs()
                     < f64::EPSILON
-            );
+            );*/
             f64_type_test(EncodingFormat::GVariant, 99999.99999_f64, 8, 10);
         }
     }
@@ -494,7 +494,7 @@ mod tests {
         #[cfg(feature = "gvariant")]
         {
             let encoded = basic_type_test!(LE, GVariant, string, 12, String, 1);
-            assert_eq!(decode_with_gvariant::<_, String>(encoded), "hello world");
+            //assert_eq!(decode_with_gvariant::<_, String>(encoded), "hello world");
         }
 
         let string = "hello world";
@@ -511,10 +511,10 @@ mod tests {
             let encoded = value_test!(LE, GVariant, v, 14);
 
             // Check encoding against GLib
-            let bytes = Bytes::from_owned(encoded);
+            /*let bytes = Bytes::from_owned(encoded);
             let gv = Variant::from_bytes::<Variant>(&bytes);
             let variant = gv.get_variant().unwrap();
-            assert_eq!(variant.get_str().unwrap(), "hello world");
+            assert_eq!(variant.get_str().unwrap(), "hello world");*/
         }
 
         let v: String = v.try_into().unwrap();
@@ -567,7 +567,7 @@ mod tests {
         #[cfg(feature = "gvariant")]
         {
             let encoded = basic_type_test!(LE, GVariant, sig, 4, Signature<'_>, 1);
-            assert_eq!(decode_with_gvariant::<_, String>(encoded), "yys");
+            //assert_eq!(decode_with_gvariant::<_, String>(encoded), "yys");
         }
 
         // As Value
@@ -596,7 +596,7 @@ mod tests {
         #[cfg(feature = "gvariant")]
         {
             let encoded = basic_type_test!(LE, GVariant, o, 13, ObjectPath<'_>, 1);
-            assert_eq!(decode_with_gvariant::<_, String>(encoded), "/hello/world");
+            //assert_eq!(decode_with_gvariant::<_, String>(encoded), "/hello/world");
         }
 
         // As Value
@@ -670,11 +670,11 @@ mod tests {
             assert_eq!(gv_encoded.len(), 2);
 
             // Check encoding against GLib
-            let bytes = Bytes::from_owned(gv_encoded);
+            /*let bytes = Bytes::from_owned(gv_encoded);
             let variant = Variant::from_bytes::<&[u8]>(&bytes);
             assert_eq!(variant.n_children(), 2);
             assert_eq!(variant.get_child_value(0).get::<u8>().unwrap(), 77);
-            assert_eq!(variant.get_child_value(1).get::<u8>().unwrap(), 88);
+            assert_eq!(variant.get_child_value(1).get::<u8>().unwrap(), 88);*/
         }
         let ctxt = Context::<LE>::new_dbus(0);
 
@@ -749,9 +749,9 @@ mod tests {
             }
 
             // Check encoding against GLib
-            let bytes = Bytes::from_owned(gv_encoded);
+            /*let bytes = Bytes::from_owned(gv_encoded);
             let variant = Variant::from_bytes::<&[&str]>(&bytes);
-            assert_eq!(variant.n_children(), 0);
+            assert_eq!(variant.n_children(), 0);*/
         }
         let ctxt = Context::<LE>::new_dbus(0);
 
@@ -804,12 +804,12 @@ mod tests {
             assert_eq!(gv_encoded.len(), 28);
 
             // Check encoding against GLib
-            let bytes = Bytes::from_owned(gv_encoded);
+            /*let bytes = Bytes::from_owned(gv_encoded);
             let variant = Variant::from_bytes::<Variant>(&bytes);
             assert_eq!(variant.n_children(), 1);
             let decoded: Vec<String> = variant.get_child_value(0).get().unwrap();
             assert_eq!(decoded[0], "Hello");
-            assert_eq!(decoded[1], "World");
+            assert_eq!(decoded[1], "World");*/
         }
 
         // Array of Struct, which in turn containin an Array (We gotta go deeper!)
@@ -875,7 +875,7 @@ mod tests {
             assert_eq!(r.3, "hello");
 
             // Check encoding against GLib
-            let bytes = Bytes::from_owned(gv_encoded);
+            /*let bytes = Bytes::from_owned(gv_encoded);
             let variant = Variant::from_bytes::<
                 Vec<(u8, u32, (i64, bool, i64, Vec<String>), String)>,
             >(&bytes);
@@ -883,7 +883,7 @@ mod tests {
             let r: (u8, u32, (i64, bool, i64, Vec<String>), String) =
                 variant.get_child_value(0).get().unwrap();
             assert_eq!(r.0, u8::max_value());
-            assert_eq!(r.1, u32::max_value());
+            assert_eq!(r.1, u32::max_value());*/
         }
         let ctxt = Context::<LE>::new_dbus(0);
 
@@ -965,14 +965,14 @@ mod tests {
             }
 
             // Check encoding against GLib
-            let bytes = Bytes::from_owned(gv_encoded);
+            /*let bytes = Bytes::from_owned(gv_encoded);
             let variant = Variant::from_bytes::<Variant>(&bytes);
             assert_eq!(variant.n_children(), 1);
             let child: Variant = variant.get_child_value(0);
             let r: (u8, u32, (i64, bool, i64, Vec<String>), String) =
                 child.get_child_value(0).get().unwrap();
             assert_eq!(r.0, u8::max_value());
-            assert_eq!(r.1, u32::max_value());
+            assert_eq!(r.1, u32::max_value());*/
 
             let mut rng = thread_rng();
             // Let's test GVariant ser/de of a 254 byte array with variable-width elements as to ensure
@@ -995,14 +995,14 @@ mod tests {
             assert_eq!(gv_encoded.len(), 258);
 
             // Check encoding against GLib
-            let bytes = Bytes::from_owned(gv_encoded.clone());
+            /*let bytes = Bytes::from_owned(gv_encoded.clone());
             let variant = Variant::from_bytes::<Vec<String>>(&bytes);
             assert_eq!(variant.n_children(), 2);
             assert_eq!(variant.get_child_value(0).get::<String>().unwrap(), as_[0]);
             assert_eq!(variant.get_child_value(1).get::<String>().unwrap(), as_[1]);
             // Also check if our own deserializer does the right thing
             let as2 = from_slice::<LE, Vec<String>>(&gv_encoded, ctxt).unwrap();
-            assert_eq!(as2, as_);
+            assert_eq!(as2, as_);*/
 
             // Test conversion of Array of Value to Vec<Value>
             let v = Value::new(vec![Value::new(43), Value::new("bonjour")]);
@@ -1095,12 +1095,12 @@ mod tests {
             assert_eq!(map[&2], "456");
 
             // Check encoding against GLib
-            let bytes = Bytes::from_owned(gv_encoded);
+            /*let bytes = Bytes::from_owned(gv_encoded);
             let variant = Variant::from_bytes::<HashMap<i64, &str>>(&bytes);
             assert_eq!(variant.n_children(), 2);
             let map: HashMap<i64, String> = HashMap::from_variant(&variant).unwrap();
             assert_eq!(map[&1], "123");
-            assert_eq!(map[&2], "456");
+            assert_eq!(map[&2], "456");*/
         }
         let ctxt = Context::<LE>::new_dbus(0);
 
@@ -1138,12 +1138,12 @@ mod tests {
             assert_eq!(map["world"], "561");
 
             // Check encoding against GLib
-            let bytes = Bytes::from_owned(gv_encoded);
+            /*let bytes = Bytes::from_owned(gv_encoded);
             let variant = Variant::from_bytes::<HashMap<&str, &str>>(&bytes);
             assert_eq!(variant.n_children(), 2);
             let map: HashMap<String, String> = HashMap::from_variant(&variant).unwrap();
             assert_eq!(map["hi"], "1234");
-            assert_eq!(map["world"], "561");
+            assert_eq!(map["world"], "561");*/
 
             // Now the same but empty dict this time
             let map: HashMap<&str, &str> = HashMap::new();
@@ -1513,9 +1513,9 @@ mod tests {
         assert_eq!(decoded, mn);
 
         // Check encoding against GLib
-        let bytes = Bytes::from_owned(encoded);
+        /*let bytes = Bytes::from_owned(encoded);
         let variant = Variant::from_bytes::<Option<i16>>(&bytes);
-        assert_eq!(variant.get::<Option<i16>>().unwrap(), mn);
+        assert_eq!(variant.get::<Option<i16>>().unwrap(), mn);*/
 
         // As Value
         let v: Value<'_> = mn.into();
@@ -1529,10 +1529,10 @@ mod tests {
         }
 
         // Check encoding against GLib
-        let bytes = Bytes::from_owned(encoded);
+        /*let bytes = Bytes::from_owned(encoded);
         let variant = Variant::from_bytes::<Variant>(&bytes);
         let decoded = variant.get_child_value(0).get::<Option<i16>>().unwrap();
-        assert_eq!(decoded, mn);
+        assert_eq!(decoded, mn);*/
 
         // Now a None of the same type
         let mn: Option<i16> = None;
@@ -1542,9 +1542,9 @@ mod tests {
         assert!(decoded.is_none());
 
         // Check encoding against GLib
-        let bytes = Bytes::from_owned(encoded);
+        /*let bytes = Bytes::from_owned(encoded);
         let variant = Variant::from_bytes::<Option<i16>>(&bytes);
-        assert!(variant.get::<Option<i16>>().unwrap().is_none());
+        assert!(variant.get::<Option<i16>>().unwrap().is_none());*/
 
         // Next a Some variable-sized value
         let ms = Some("hello world");
@@ -1554,12 +1554,12 @@ mod tests {
         assert_eq!(decoded, ms);
 
         // Check encoding against GLib
-        let bytes = Bytes::from_owned(encoded);
+        /*let bytes = Bytes::from_owned(encoded);
         let variant = Variant::from_bytes::<Option<String>>(&bytes);
         assert_eq!(
             &variant.get::<Option<String>>().unwrap().unwrap(),
             ms.unwrap()
-        );
+        );*/
 
         // As Value
         let v: Value<'_> = ms.into();
@@ -1573,10 +1573,10 @@ mod tests {
         }
 
         // Check encoding against GLib
-        let bytes = Bytes::from_owned(encoded);
+        /*let bytes = Bytes::from_owned(encoded);
         let variant = Variant::from_bytes::<Variant>(&bytes);
         let decoded = variant.get_child_value(0).get::<Option<String>>().unwrap();
-        assert_eq!(decoded.as_deref(), ms);
+        assert_eq!(decoded.as_deref(), ms);*/
 
         // Now a None of the same type
         let ms: Option<&str> = None;
@@ -1586,9 +1586,9 @@ mod tests {
         assert!(decoded.is_none());
 
         // Check encoding against GLib
-        let bytes = Bytes::from_owned(encoded);
+        /*let bytes = Bytes::from_owned(encoded);
         let variant = Variant::from_bytes::<Option<String>>(&bytes);
-        assert!(variant.get::<Option<String>>().unwrap().is_none());
+        assert!(variant.get::<Option<String>>().unwrap().is_none());*/
 
         // In a seq type
         let ams = vec![
@@ -1601,10 +1601,10 @@ mod tests {
         assert_eq!(decoded, ams);
 
         // Check encoding against GLib
-        let bytes = Bytes::from_owned(encoded);
+        /*let bytes = Bytes::from_owned(encoded);
         let variant = Variant::from_bytes::<Vec<Option<String>>>(&bytes);
         let decoded = variant.get::<Vec<Option<String>>>().unwrap();
-        assert_eq!(decoded, ams);
+        assert_eq!(decoded, ams);*/
 
         // As Value
         let v: Value<'_> = ams.clone().into();
@@ -1614,13 +1614,13 @@ mod tests {
         assert_eq!(v, decoded);
 
         // Check encoding against GLib
-        let bytes = Bytes::from_owned(encoded);
+        /*let bytes = Bytes::from_owned(encoded);
         let variant = Variant::from_bytes::<Variant>(&bytes);
         let decoded = variant
             .get_child_value(0)
             .get::<Vec<Option<String>>>()
             .unwrap();
-        assert_eq!(decoded, ams);
+        assert_eq!(decoded, ams);*/
 
         // In a struct
         let structure: (Option<String>, u64, Option<String>) =
@@ -1631,12 +1631,12 @@ mod tests {
         assert_eq!(decoded, structure);
 
         // Check encoding against GLib
-        let bytes = Bytes::from_owned(encoded);
+        /*let bytes = Bytes::from_owned(encoded);
         let variant = Variant::from_bytes::<(Option<String>, u64, Option<String>)>(&bytes);
         let decoded = variant
             .get::<(Option<String>, u64, Option<String>)>()
             .unwrap();
-        assert_eq!(decoded, structure);
+        assert_eq!(decoded, structure);*/
 
         // As Value
         let v: Value<'_> = structure.clone().into();
@@ -1646,13 +1646,13 @@ mod tests {
         assert_eq!(v, decoded);
 
         // Check encoding against GLib
-        let bytes = Bytes::from_owned(encoded);
+        /*let bytes = Bytes::from_owned(encoded);
         let variant = Variant::from_bytes::<Variant>(&bytes);
         let decoded = variant
             .get_child_value(0)
             .get::<(Option<String>, u64, Option<String>)>()
             .unwrap();
-        assert_eq!(decoded, structure);
+        assert_eq!(decoded, structure);*/
     }
 
     #[test]
@@ -1704,7 +1704,7 @@ mod tests {
         let _: ZVStruct<'_> = from_slice_for_signature(&encoded, ctxt, &signature).unwrap();
     }
 
-    #[cfg(feature = "ostree-tests")]
+    /*#[cfg(feature = "ostree-tests")]
     #[test]
     fn ostree_de() {
         #[derive(Deserialize, Serialize, Type, PartialEq, Debug)]
@@ -1720,5 +1720,5 @@ mod tests {
         let ctxt = Context::<LE>::new_gvariant(0);
         let _: Summary<'_> = from_slice(&encoded, ctxt).unwrap();
         // If we're able to deserialize all the data successfully, don't bother checking the summary data.
-    }
+    }*/
 }
