Index: hex/Cargo.toml
===================================================================
--- hex.orig/Cargo.toml
+++ hex/Cargo.toml
@@ -37,7 +37,7 @@ default-features = false
 version = "0.3"
 
 [dev-dependencies.faster-hex]
-version = "0.5"
+version = "0.9"
 
 [dev-dependencies.pretty_assertions]
 version = "0.6"
Index: hex/benches/hex.rs
===================================================================
--- hex.orig/benches/hex.rs
+++ hex/benches/hex.rs
@@ -9,7 +9,7 @@ fn bench_encode(c: &mut Criterion) {
     c.bench_function("rustc_hex_encode", |b| b.iter(|| DATA.to_hex::<String>()));
 
     c.bench_function("faster_hex_encode", |b| {
-        b.iter(|| faster_hex::hex_string(DATA).unwrap())
+        b.iter(|| faster_hex::hex_string(DATA))
     });
 
     c.bench_function("faster_hex_encode_fallback", |b| {
@@ -33,7 +33,7 @@ fn bench_decode(c: &mut Criterion) {
     });
 
     c.bench_function("faster_hex_decode", move |b| {
-        let hex = faster_hex::hex_string(DATA).unwrap();
+        let hex = faster_hex::hex_string(DATA);
         let len = DATA.len();
         let mut dst = vec![0; len];
 
@@ -41,7 +41,7 @@ fn bench_decode(c: &mut Criterion) {
     });
 
     c.bench_function("faster_hex_decode_unchecked", |b| {
-        let hex = faster_hex::hex_string(DATA).unwrap();
+        let hex = faster_hex::hex_string(DATA);
         let len = DATA.len();
         let mut dst = vec![0; len];
 
@@ -49,7 +49,7 @@ fn bench_decode(c: &mut Criterion) {
     });
 
     c.bench_function("faster_hex_decode_fallback", |b| {
-        let hex = faster_hex::hex_string(DATA).unwrap();
+        let hex = faster_hex::hex_string(DATA);
         let len = DATA.len();
         let mut dst = vec![0; len];
 
