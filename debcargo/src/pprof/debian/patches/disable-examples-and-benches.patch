Delete examples and benches that are not needed.

diff --git a/Cargo.toml b/Cargo.toml
index dcc2a31..41c8b04 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -24,45 +24,6 @@ repository = "https://github.com/tikv/pprof-rs"
 [package.metadata.docs.rs]
 all-features = true
 
-[[example]]
-name = "flamegraph"
-required-features = ["flamegraph"]
-
-[[example]]
-name = "profile_proto_with_prost"
-required-features = [
-    "protobuf",
-    "prost-codec",
-]
-
-[[example]]
-name = "profile_proto_with_protobuf_codec"
-required-features = [
-    "protobuf",
-    "protobuf-codec",
-]
-
-[[example]]
-name = "multithread_flamegraph"
-required-features = ["flamegraph"]
-
-[[example]]
-name = "criterion"
-required-features = [
-    "flamegraph",
-    "criterion",
-]
-
-[[bench]]
-name = "collector"
-path = "benches/collector.rs"
-harness = false
-
-[[bench]]
-name = "addr_validate"
-path = "benches/addr_validate.rs"
-harness = false
-
 [dependencies.backtrace]
 version = "0.3"
 
diff --git a/benches/addr_validate.rs b/benches/addr_validate.rs
deleted file mode 100644
index 4154f33..0000000
--- a/benches/addr_validate.rs
+++ /dev/null
@@ -1,29 +0,0 @@
-// Copyright 2019 TiKV Project Authors. Licensed under Apache-2.0.
-
-use criterion::{criterion_group, criterion_main, Criterion};
-use pprof::validate;
-
-fn bench_validate_addr(c: &mut Criterion) {
-    c.bench_function("validate stack addr", |b| {
-        let stack_addrs = [0; 100];
-
-        b.iter(|| {
-            stack_addrs.iter().for_each(|item| {
-                validate(item as *const _ as *const libc::c_void);
-            })
-        })
-    });
-
-    c.bench_function("validate heap addr", |b| {
-        let heap_addrs = vec![0; 100];
-
-        b.iter(|| {
-            heap_addrs.iter().for_each(|item| {
-                validate(item as *const _ as *const libc::c_void);
-            })
-        })
-    });
-}
-
-criterion_group!(benches, bench_validate_addr);
-criterion_main!(benches);
diff --git a/benches/collector.rs b/benches/collector.rs
deleted file mode 100644
index bd72ce4..0000000
--- a/benches/collector.rs
+++ /dev/null
@@ -1,43 +0,0 @@
-// Copyright 2019 TiKV Project Authors. Licensed under Apache-2.0.
-
-use criterion::{criterion_group, criterion_main, Criterion};
-use pprof::{Collector, HashCounter};
-
-fn bench_write_to_collector(c: &mut Criterion) {
-    c.bench_function("write_to_collector", |b| {
-        let mut collector = Collector::new().unwrap();
-
-        const SIZE: usize = 1000;
-
-        let mut vec: Vec<u64> = Vec::with_capacity(SIZE);
-        for _ in 0..vec.capacity() {
-            vec.push(rand::random());
-        }
-
-        b.iter(|| {
-            vec.iter().for_each(|item| {
-                collector.add(*item, 1).unwrap();
-            })
-        })
-    });
-
-    c.bench_function("write_into_stack_hash_counter", |b| {
-        let mut collector = HashCounter::default();
-
-        const SIZE: usize = 1000;
-
-        let mut vec: Vec<u64> = Vec::with_capacity(SIZE);
-        for _ in 0..vec.capacity() {
-            vec.push(rand::random());
-        }
-
-        b.iter(|| {
-            vec.iter().for_each(|item| {
-                collector.add(*item, 1);
-            })
-        });
-    });
-}
-
-criterion_group!(benches, bench_write_to_collector);
-criterion_main!(benches);
diff --git a/examples/backtrace_while_sampling.rs b/examples/backtrace_while_sampling.rs
deleted file mode 100644
index 224da1d..0000000
--- a/examples/backtrace_while_sampling.rs
+++ /dev/null
@@ -1,30 +0,0 @@
-// Copyright 2021 TiKV Project Authors. Licensed under Apache-2.0.
-
-use std::fs::File;
-
-fn deep_recursive(depth: i32) {
-    if depth > 0 {
-        deep_recursive(depth - 1);
-    } else {
-        backtrace::Backtrace::new();
-    }
-}
-
-fn main() {
-    let guard = pprof::ProfilerGuardBuilder::default()
-        .frequency(1000)
-        .blocklist(&["libc", "libgcc", "pthread"])
-        .build()
-        .unwrap();
-
-    for _ in 0..10000 {
-        deep_recursive(20);
-    }
-
-    if let Ok(report) = guard.report().build() {
-        let file = File::create("flamegraph.svg").unwrap();
-        report.flamegraph(file).unwrap();
-
-        println!("report: {:?}", &report);
-    };
-}
diff --git a/examples/criterion.rs b/examples/criterion.rs
deleted file mode 100644
index 0a21b72..0000000
--- a/examples/criterion.rs
+++ /dev/null
@@ -1,36 +0,0 @@
-#[macro_use]
-extern crate criterion;
-use criterion::{black_box, BenchmarkId, Criterion};
-
-use pprof::criterion::{Output, PProfProfiler};
-
-// Thanks to the example provided by @jebbow in his article
-// https://www.jibbow.com/posts/criterion-flamegraphs/
-
-fn fibonacci(n: u64) -> u64 {
-    match n {
-        0 | 1 => 1,
-        n => fibonacci(n - 1) + fibonacci(n - 2),
-    }
-}
-
-fn bench(c: &mut Criterion) {
-    c.bench_function("Fibonacci", |b| b.iter(|| fibonacci(black_box(20))));
-}
-
-fn bench_group(c: &mut Criterion) {
-    let mut group = c.benchmark_group("Fibonacci Sizes");
-
-    for s in &[1, 10, 100, 1000] {
-        group.bench_with_input(BenchmarkId::from_parameter(s), s, |b, s| {
-            b.iter(|| fibonacci(black_box(*s)))
-        });
-    }
-}
-
-criterion_group! {
-    name = benches;
-    config = Criterion::default().with_profiler(PProfProfiler::new(100, Output::Flamegraph(None)));
-    targets = bench, bench_group
-}
-criterion_main!(benches);
diff --git a/examples/flamegraph.rs b/examples/flamegraph.rs
deleted file mode 100644
index 18ccdfd..0000000
--- a/examples/flamegraph.rs
+++ /dev/null
@@ -1,106 +0,0 @@
-// Copyright 2019 TiKV Project Authors. Licensed under Apache-2.0.
-
-use std::fs::File;
-
-#[inline(never)]
-fn is_prime_number1(v: usize, prime_numbers: &[usize]) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(always)]
-fn is_prime_number2(v: usize, prime_numbers: &[usize]) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(never)]
-fn is_prime_number3(v: usize, prime_numbers: &[usize]) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(never)]
-fn prepare_prime_numbers() -> Vec<usize> {
-    // bootstrap: Generate a prime table of 0..10000
-    let mut prime_number_table: [bool; 10000] = [true; 10000];
-    prime_number_table[0] = false;
-    prime_number_table[1] = false;
-    for i in 2..10000 {
-        if prime_number_table[i] {
-            let mut v = i * 2;
-            while v < 10000 {
-                prime_number_table[v] = false;
-                v += i;
-            }
-        }
-    }
-    let mut prime_numbers = vec![];
-    for (i, exist) in prime_number_table.iter().enumerate().skip(2) {
-        if *exist {
-            prime_numbers.push(i);
-        }
-    }
-    prime_numbers
-}
-
-fn main() {
-    let prime_numbers = prepare_prime_numbers();
-
-    let guard = pprof::ProfilerGuard::new(100).unwrap();
-
-    let mut v = 0;
-
-    for i in 2..5000000 {
-        if i % 4 == 0 {
-            if is_prime_number1(i, &prime_numbers) {
-                v += 1;
-            }
-        } else if i % 4 == 1 {
-            if is_prime_number2(i, &prime_numbers) {
-                v += 1;
-            }
-        } else if is_prime_number3(i, &prime_numbers) {
-            v += 1;
-        }
-    }
-
-    println!("Prime numbers: {}", v);
-
-    if let Ok(report) = guard.report().build() {
-        let file = File::create("flamegraph.svg").unwrap();
-        report.flamegraph(file).unwrap();
-
-        println!("report: {:?}", &report);
-    };
-}
diff --git a/examples/multithread.rs b/examples/multithread.rs
deleted file mode 100644
index d16863a..0000000
--- a/examples/multithread.rs
+++ /dev/null
@@ -1,96 +0,0 @@
-// Copyright 2019 TiKV Project Authors. Licensed under Apache-2.0.
-
-use std::sync::Arc;
-
-#[inline(never)]
-fn is_prime_number(v: usize, prime_numbers: Arc<Vec<usize>>) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers.iter() {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(never)]
-fn prepare_prime_numbers() -> Vec<usize> {
-    // bootstrap: Generate a prime table of 0..10000
-    let mut prime_number_table: [bool; 10000] = [true; 10000];
-    prime_number_table[0] = false;
-    prime_number_table[1] = false;
-    for i in 2..10000 {
-        if prime_number_table[i] {
-            let mut v = i * 2;
-            while v < 10000 {
-                prime_number_table[v] = false;
-                v += i;
-            }
-        }
-    }
-    let mut prime_numbers = vec![];
-    for (i, exist) in prime_number_table.iter().enumerate().skip(2) {
-        if *exist {
-            prime_numbers.push(i);
-        }
-    }
-    prime_numbers
-}
-
-fn main() {
-    let prime_numbers = Arc::new(prepare_prime_numbers());
-
-    let guard = pprof::ProfilerGuard::new(100).unwrap();
-
-    let p1 = prime_numbers.clone();
-    std::thread::Builder::new()
-        .name("THREAD_ONE".to_owned())
-        .spawn(move || loop {
-            let mut _v = 0;
-
-            for i in 2..50000 {
-                if is_prime_number(i, p1.clone()) {
-                    _v += 1;
-                }
-            }
-        })
-        .unwrap();
-
-    let p2 = prime_numbers.clone();
-    std::thread::Builder::new()
-        .name("THREAD_TWO".to_owned())
-        .spawn(move || loop {
-            let mut _v = 0;
-
-            for i in 2..50000 {
-                if is_prime_number(i, p2.clone()) {
-                    _v += 1;
-                }
-            }
-        })
-        .unwrap();
-
-    let p3 = prime_numbers;
-    std::thread::spawn(move || loop {
-        let mut _v = 0;
-
-        for i in 2..50000 {
-            if is_prime_number(i, p3.clone()) {
-                _v += 1;
-            }
-        }
-    });
-
-    loop {
-        if let Ok(report) = guard.report().build() {
-            println!("{:?}", report);
-        };
-        std::thread::sleep(std::time::Duration::from_secs(1))
-    }
-    //    pprof::PROFILER.lock().unwrap().stop();
-}
diff --git a/examples/multithread_flamegraph.rs b/examples/multithread_flamegraph.rs
deleted file mode 100644
index af8f814..0000000
--- a/examples/multithread_flamegraph.rs
+++ /dev/null
@@ -1,100 +0,0 @@
-// Copyright 2019 TiKV Project Authors. Licensed under Apache-2.0.
-
-use std::fs::File;
-use std::sync::Arc;
-
-#[inline(never)]
-fn is_prime_number(v: usize, prime_numbers: Arc<Vec<usize>>) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers.iter() {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(never)]
-fn prepare_prime_numbers() -> Vec<usize> {
-    // bootstrap: Generate a prime table of 0..10000
-    let mut prime_number_table: [bool; 10000] = [true; 10000];
-    prime_number_table[0] = false;
-    prime_number_table[1] = false;
-    for i in 2..10000 {
-        if prime_number_table[i] {
-            let mut v = i * 2;
-            while v < 10000 {
-                prime_number_table[v] = false;
-                v += i;
-            }
-        }
-    }
-    let mut prime_numbers = vec![];
-    for (i, exist) in prime_number_table.iter().enumerate().skip(2) {
-        if *exist {
-            prime_numbers.push(i);
-        }
-    }
-    prime_numbers
-}
-
-fn main() {
-    let prime_numbers = Arc::new(prepare_prime_numbers());
-
-    //    println!("{}", std::mem::size_of::<Collector<UnresolvedFrames>>());
-    let guard = pprof::ProfilerGuard::new(100).unwrap();
-
-    let p1 = prime_numbers.clone();
-    std::thread::Builder::new()
-        .name("THREAD_ONE".to_owned())
-        .spawn(move || loop {
-            let mut _v = 0;
-
-            for i in 2..50000 {
-                if is_prime_number(i, p1.clone()) {
-                    _v += 1;
-                }
-            }
-        })
-        .unwrap();
-
-    let p2 = prime_numbers.clone();
-    std::thread::Builder::new()
-        .name("THREAD_TWO".to_owned())
-        .spawn(move || loop {
-            let mut _v = 0;
-
-            for i in 2..50000 {
-                if is_prime_number(i, p2.clone()) {
-                    _v += 1;
-                }
-            }
-        })
-        .unwrap();
-
-    let p3 = prime_numbers;
-    std::thread::spawn(move || loop {
-        let mut _v = 0;
-
-        for i in 2..50000 {
-            if is_prime_number(i, p3.clone()) {
-                _v += 1;
-            }
-        }
-    });
-
-    std::thread::sleep(std::time::Duration::from_secs(5));
-    if let Ok(report) = guard.report().build() {
-        let file = File::create("flamegraph.svg").unwrap();
-        report.flamegraph(file).unwrap();
-
-        println!("{:?}", report);
-    };
-
-    //    pprof::PROFILER.lock().unwrap().stop();
-}
diff --git a/examples/post_processor.rs b/examples/post_processor.rs
deleted file mode 100644
index 9188688..0000000
--- a/examples/post_processor.rs
+++ /dev/null
@@ -1,103 +0,0 @@
-// Copyright 2019 TiKV Project Authors. Licensed under Apache-2.0.
-
-use std::sync::Arc;
-
-#[inline(never)]
-fn is_prime_number(v: usize, prime_numbers: Arc<Vec<usize>>) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers.iter() {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(never)]
-fn prepare_prime_numbers() -> Vec<usize> {
-    // bootstrap: Generate a prime table of 0..10000
-    let mut prime_number_table: [bool; 10000] = [true; 10000];
-    prime_number_table[0] = false;
-    prime_number_table[1] = false;
-    for i in 2..10000 {
-        if prime_number_table[i] {
-            let mut v = i * 2;
-            while v < 10000 {
-                prime_number_table[v] = false;
-                v += i;
-            }
-        }
-    }
-    let mut prime_numbers = vec![];
-    for (i, exist) in prime_number_table.iter().enumerate().skip(2) {
-        if *exist {
-            prime_numbers.push(i);
-        }
-    }
-    prime_numbers
-}
-
-fn main() {
-    let prime_numbers = Arc::new(prepare_prime_numbers());
-
-    //    println!("{}", std::mem::size_of::<Collector<UnresolvedFrames>>());
-    let guard = pprof::ProfilerGuard::new(100).unwrap();
-
-    let p1 = prime_numbers.clone();
-    std::thread::Builder::new()
-        .name("THREAD_ONE".to_owned())
-        .spawn(move || loop {
-            let mut _v = 0;
-
-            for i in 2..50000 {
-                if is_prime_number(i, p1.clone()) {
-                    _v += 1;
-                }
-            }
-        })
-        .unwrap();
-
-    let p2 = prime_numbers.clone();
-    std::thread::Builder::new()
-        .name("THREAD_TWO".to_owned())
-        .spawn(move || loop {
-            let mut _v = 0;
-
-            for i in 2..50000 {
-                if is_prime_number(i, p2.clone()) {
-                    _v += 1;
-                }
-            }
-        })
-        .unwrap();
-
-    let p3 = prime_numbers;
-    std::thread::spawn(move || loop {
-        let mut _v = 0;
-
-        for i in 2..50000 {
-            if is_prime_number(i, p3.clone()) {
-                _v += 1;
-            }
-        }
-    });
-
-    loop {
-        if let Ok(report) = guard
-            .report()
-            .frames_post_processor(|frames| {
-                frames.thread_name = "PROCESSED".to_string();
-            })
-            .build()
-        {
-            println!("{:?}", report);
-        };
-        std::thread::sleep(std::time::Duration::from_secs(1))
-    }
-    //    pprof::PROFILER.lock().unwrap().stop();
-}
diff --git a/examples/prime_number.rs b/examples/prime_number.rs
deleted file mode 100644
index 831de1f..0000000
--- a/examples/prime_number.rs
+++ /dev/null
@@ -1,63 +0,0 @@
-// Copyright 2019 TiKV Project Authors. Licensed under Apache-2.0.
-
-#[inline(never)]
-fn is_prime_number(v: usize, prime_numbers: &[usize]) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(never)]
-fn prepare_prime_numbers() -> Vec<usize> {
-    // bootstrap: Generate a prime table of 0..10000
-    let mut prime_number_table: [bool; 10000] = [true; 10000];
-    prime_number_table[0] = false;
-    prime_number_table[1] = false;
-    for i in 2..10000 {
-        if prime_number_table[i] {
-            let mut v = i * 2;
-            while v < 10000 {
-                prime_number_table[v] = false;
-                v += i;
-            }
-        }
-    }
-    let mut prime_numbers = vec![];
-    for (i, exist) in prime_number_table.iter().enumerate().skip(2) {
-        if *exist {
-            prime_numbers.push(i);
-        }
-    }
-    prime_numbers
-}
-
-fn main() {
-    let prime_numbers = prepare_prime_numbers();
-
-    let guard = pprof::ProfilerGuard::new(100).unwrap();
-
-    loop {
-        let mut v = 0;
-
-        for i in 2..50000 {
-            if is_prime_number(i, &prime_numbers) {
-                v += 1;
-            }
-        }
-
-        println!("Prime numbers: {}", v);
-
-        if let Ok(report) = guard.report().build() {
-            println!("{:?}", report);
-        };
-    }
-}
diff --git a/examples/profile_proto_with_prost.rs b/examples/profile_proto_with_prost.rs
deleted file mode 100644
index 92676e4..0000000
--- a/examples/profile_proto_with_prost.rs
+++ /dev/null
@@ -1,112 +0,0 @@
-// Copyright 2019 TiKV Project Authors. Licensed under Apache-2.0.
-
-use pprof::protos::Message;
-use std::fs::File;
-use std::io::Write;
-
-#[inline(never)]
-fn is_prime_number1(v: usize, prime_numbers: &[usize]) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(always)]
-fn is_prime_number2(v: usize, prime_numbers: &[usize]) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(never)]
-fn is_prime_number3(v: usize, prime_numbers: &[usize]) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(never)]
-fn prepare_prime_numbers() -> Vec<usize> {
-    // bootstrap: Generate a prime table of 0..10000
-    let mut prime_number_table: [bool; 10000] = [true; 10000];
-    prime_number_table[0] = false;
-    prime_number_table[1] = false;
-    for i in 2..10000 {
-        if prime_number_table[i] {
-            let mut v = i * 2;
-            while v < 10000 {
-                prime_number_table[v] = false;
-                v += i;
-            }
-        }
-    }
-    let mut prime_numbers = vec![];
-    for (i, exist) in prime_number_table.iter().enumerate().skip(2) {
-        if *exist {
-            prime_numbers.push(i);
-        }
-    }
-    prime_numbers
-}
-
-fn main() {
-    let prime_numbers = prepare_prime_numbers();
-
-    let guard = pprof::ProfilerGuard::new(100).unwrap();
-
-    let mut v = 0;
-
-    for i in 2..5000000 {
-        if i % 4 == 0 {
-            if is_prime_number1(i, &prime_numbers) {
-                v += 1;
-            }
-        } else if i % 4 == 1 {
-            if is_prime_number2(i, &prime_numbers) {
-                v += 1;
-            }
-        } else if is_prime_number3(i, &prime_numbers) {
-            v += 1;
-        }
-    }
-
-    println!("Prime numbers: {}", v);
-
-    if let Ok(report) = guard.report().build() {
-        let mut file = File::create("profile.pb").unwrap();
-        let profile = report.pprof().unwrap();
-
-        let mut content = Vec::new();
-        profile.encode(&mut content).unwrap();
-        file.write_all(&content).unwrap();
-
-        println!("report: {:?}", report);
-    };
-}
diff --git a/examples/profile_proto_with_protobuf_codec.rs b/examples/profile_proto_with_protobuf_codec.rs
deleted file mode 100644
index e46cbd6..0000000
--- a/examples/profile_proto_with_protobuf_codec.rs
+++ /dev/null
@@ -1,112 +0,0 @@
-// Copyright 2019 TiKV Project Authors. Licensed under Apache-2.0.
-
-use pprof::protos::Message;
-use std::fs::File;
-use std::io::Write;
-
-#[inline(never)]
-fn is_prime_number1(v: usize, prime_numbers: &[usize]) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(always)]
-fn is_prime_number2(v: usize, prime_numbers: &[usize]) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(never)]
-fn is_prime_number3(v: usize, prime_numbers: &[usize]) -> bool {
-    if v < 10000 {
-        let r = prime_numbers.binary_search(&v);
-        return r.is_ok();
-    }
-
-    for n in prime_numbers {
-        if v % n == 0 {
-            return false;
-        }
-    }
-
-    true
-}
-
-#[inline(never)]
-fn prepare_prime_numbers() -> Vec<usize> {
-    // bootstrap: Generate a prime table of 0..10000
-    let mut prime_number_table: [bool; 10000] = [true; 10000];
-    prime_number_table[0] = false;
-    prime_number_table[1] = false;
-    for i in 2..10000 {
-        if prime_number_table[i] {
-            let mut v = i * 2;
-            while v < 10000 {
-                prime_number_table[v] = false;
-                v += i;
-            }
-        }
-    }
-    let mut prime_numbers = vec![];
-    for (i, exist) in prime_number_table.iter().enumerate().skip(2) {
-        if *exist {
-            prime_numbers.push(i);
-        }
-    }
-    prime_numbers
-}
-
-fn main() {
-    let prime_numbers = prepare_prime_numbers();
-
-    let guard = pprof::ProfilerGuard::new(100).unwrap();
-
-    let mut v = 0;
-
-    for i in 2..5000000 {
-        if i % 4 == 0 {
-            if is_prime_number1(i, &prime_numbers) {
-                v += 1;
-            }
-        } else if i % 4 == 1 {
-            if is_prime_number2(i, &prime_numbers) {
-                v += 1;
-            }
-        } else if is_prime_number3(i, &prime_numbers) {
-            v += 1;
-        }
-    }
-
-    println!("Prime numbers: {}", v);
-
-    if let Ok(report) = guard.report().build() {
-        let mut file = File::create("profile.pb").unwrap();
-        let profile = report.pprof().unwrap();
-
-        let mut content = Vec::new();
-        profile.write_to_vec(&mut content).unwrap();
-        file.write_all(&content).unwrap();
-
-        println!("report: {:?}", report);
-    };
-}
