Index: cargo-mutants/src/manifest.rs
===================================================================
--- cargo-mutants.orig/src/manifest.rs
+++ cargo-mutants/src/manifest.rs
@@ -164,6 +164,7 @@ mod test {
     use super::fix_manifest_toml;
 
     #[test]
+    #[ignore]
     fn fix_path_absolute_unchanged() {
         let dependency_abspath = Utf8Path::new("testdata/tree/dependency")
             .canonicalize_utf8()
@@ -178,6 +179,7 @@ mod test {
     }
 
     #[test]
+    #[ignore]
     fn fix_path_relative() {
         let fixed_path: Utf8PathBuf = super::fix_path(
             "../dependency",
Index: cargo-mutants/src/mutate.rs
===================================================================
--- cargo-mutants.orig/src/mutate.rs
+++ cargo-mutants/src/mutate.rs
@@ -206,6 +206,7 @@ mod test {
     use crate::*;
 
     #[test]
+    #[ignore]
     fn discover_factorial_mutants() {
         let tree_path = Utf8Path::new("testdata/tree/factorial");
         let tool = CargoTool::new();
@@ -261,6 +262,7 @@ mod test {
     }
 
     #[test]
+    #[ignore]
     fn filter_by_attributes() {
         let tree_path = Utf8Path::new("testdata/tree/hang_avoided_by_attr");
         let tool = CargoTool::new();
@@ -276,6 +278,7 @@ mod test {
     }
 
     #[test]
+    #[ignore]
     fn mutate_factorial() {
         let tree_path = Utf8Path::new("testdata/tree/factorial");
         let tool = CargoTool::new();
Index: cargo-mutants/src/cargo.rs
===================================================================
--- cargo-mutants.orig/src/cargo.rs
+++ cargo-mutants/src/cargo.rs
@@ -367,6 +367,7 @@ mod test {
     }
 
     #[test]
+    #[ignore]
     fn open_subdirectory_of_crate_opens_the_crate() {
         let root = CargoTool::new()
             .find_root(Utf8Path::new("testdata/tree/factorial/src"))
@@ -378,6 +379,7 @@ mod test {
     }
 
     #[test]
+    #[ignore]
     fn find_root_from_subdirectory_of_workspace_finds_the_workspace_root() {
         let root = CargoTool::new()
             .find_root(Utf8Path::new("testdata/tree/workspace/main"))
@@ -386,6 +388,7 @@ mod test {
     }
 
     #[test]
+    #[ignore]
     fn find_top_source_files_from_subdirectory_of_workspace() {
         let tool = CargoTool::new();
         let root_dir = tool
Index: cargo-mutants/tests/cli/config.rs
===================================================================
--- cargo-mutants.orig/tests/cli/config.rs
+++ cargo-mutants/tests/cli/config.rs
@@ -7,7 +7,7 @@ use std::fs::{create_dir, write};
 use predicates::prelude::*;
 use tempfile::TempDir;
 
-use super::{copy_of_testdata, run};
+use super::{run};
 
 fn write_config_file(tempdir: &TempDir, config: &str) {
     let path = tempdir.path();
@@ -17,7 +17,7 @@ fn write_config_file(tempdir: &TempDir,
     write(path.join(".cargo/mutants.toml"), config.as_bytes()).unwrap();
 }
 
-#[test]
+/*#[test]
 fn invalid_toml_rejected() {
     let testdata = copy_of_testdata("well_tested");
     write_config_file(
@@ -31,9 +31,9 @@ fn invalid_toml_rejected() {
         .assert()
         .failure()
         .stderr(predicates::str::contains("Error: parse toml from "));
-}
+}*/
 
-#[test]
+/*#[test]
 fn invalid_field_rejected() {
     let testdata = copy_of_testdata("well_tested");
     write_config_file(
@@ -50,9 +50,10 @@ fn invalid_field_rejected() {
             predicates::str::contains("Error: parse toml from ")
                 .and(predicates::str::contains("unknown field `wobble`")),
         );
-}
+}*/
 
 #[test]
+#[cfg(any())] //disable test
 fn list_with_config_file_exclusion() {
     let testdata = copy_of_testdata("well_tested");
     write_config_file(
@@ -75,6 +76,7 @@ fn list_with_config_file_exclusion() {
 }
 
 #[test]
+#[cfg(any())] //disable test
 fn list_with_config_file_inclusion() {
     let testdata = copy_of_testdata("well_tested");
     write_config_file(
@@ -99,7 +101,7 @@ src/item_mod.rs\n",
         .stdout(predicates::str::contains("simple_fns.rs").not());
 }
 
-#[test]
+/*#[test]
 fn list_with_config_file_regexps() {
     let testdata = copy_of_testdata("well_tested");
     write_config_file(
@@ -171,4 +173,4 @@ fn additional_cargo_test_args() {
         .assert()
         .success()
         .stdout(predicates::str::contains("2 caught"));
-}
+}*/
Index: cargo-mutants/tests/cli/error_value.rs
===================================================================
--- cargo-mutants.orig/tests/cli/error_value.rs
+++ cargo-mutants/tests/cli/error_value.rs
@@ -7,9 +7,9 @@ use std::env;
 use indoc::indoc;
 use predicates::prelude::*;
 
-use super::{copy_of_testdata, run};
+use super::{run};
 
-#[test]
+/*#[test]
 fn error_value_catches_untested_ok_case() {
     // By default this tree should fail because it's configured to
     // generate an error value, and the tests forgot to check that
@@ -121,4 +121,4 @@ fn fail_when_error_value_does_not_parse(
                 unexpected token
         "}))
         .stdout(predicate::str::is_empty());
-}
+}*/
Index: cargo-mutants/tests/cli/jobs.rs
===================================================================
--- cargo-mutants.orig/tests/cli/jobs.rs
+++ cargo-mutants/tests/cli/jobs.rs
@@ -2,9 +2,9 @@
 
 //! Test handling of `--jobs` concurrency option.
 
-use super::{copy_of_testdata, run};
+use super::{run};
 
-/// It's a bit hard to assess that multiple jobs really ran in parallel,
+/* /// It's a bit hard to assess that multiple jobs really ran in parallel,
 /// but we can at least check that the option is accepted.
 #[test]
 fn jobs_option_accepted() {
@@ -17,4 +17,4 @@ fn jobs_option_accepted() {
         .arg("--minimum-test-timeout=120") // to avoid flakes on slow CI
         .assert()
         .success();
-}
+}*/
Index: cargo-mutants/tests/cli/main.rs
===================================================================
--- cargo-mutants.orig/tests/cli/main.rs
+++ cargo-mutants/tests/cli/main.rs
@@ -76,7 +76,7 @@ impl CommandInstaExt for assert_cmd::Com
 }
 
 // Copy the source because output is written into mutants.out.
-fn copy_of_testdata(tree_name: &str) -> TempDir {
+/* fn copy_of_testdata(tree_name: &str) -> TempDir {
     let tmp_src_dir = tempdir().unwrap();
     cp_r::CopyOptions::new()
         .filter(|path, _stat| {
@@ -87,7 +87,7 @@ fn copy_of_testdata(tree_name: &str) ->
         .copy_tree(Path::new("testdata/tree").join(tree_name), &tmp_src_dir)
         .unwrap();
     tmp_src_dir
-}
+} */
 
 /// Remove anything that looks like a duration or tree size, since they'll be unpredictable.
 fn redact_timestamps_sizes(s: &str) -> String {
@@ -124,6 +124,7 @@ fn show_version() {
 }
 
 #[test]
+#[cfg(any())] //disable test
 fn uses_cargo_env_var_to_run_cargo_so_invalid_value_fails() {
     let tmp_src_dir = copy_of_testdata("well_tested");
     let bogus_cargo = "NOTHING_NONEXISTENT_VOID";
@@ -147,6 +148,7 @@ fn uses_cargo_env_var_to_run_cargo_so_in
 }
 
 #[test]
+#[ignore]
 fn list_diff_json_contains_diffs() {
     let cmd = run()
         .args([
@@ -173,7 +175,7 @@ fn list_diff_json_contains_diffs() {
 
 /// Return paths to all testdata trees, in order, excluding leftover git
 /// detritus with no Cargo.toml.
-fn all_testdata_tree_paths() -> Vec<PathBuf> {
+/*fn all_testdata_tree_paths() -> Vec<PathBuf> {
     let mut paths: Vec<PathBuf> = fs::read_dir("testdata/tree")
         .unwrap()
         .map(|r| r.unwrap())
@@ -184,9 +186,9 @@ fn all_testdata_tree_paths() -> Vec<Path
         .collect();
     paths.sort();
     paths
-}
+}*/
 
-#[test]
+/*#[test]
 fn list_mutants_in_all_trees_as_json() {
     // The snapshot accumulated here is actually a big text file
     // containing JSON fragments. This might seem a bit weird for easier
@@ -286,9 +288,9 @@ fn list_mutants_in_cfg_attr_test_skip_js
         .arg("--json")
         .current_dir(tmp_src_dir.path())
         .assert_insta("list_mutants_in_cfg_attr_test_skip_json");
-}
+}*/
 
-#[test]
+/*#[test]
 fn list_mutants_with_dir_option() {
     run()
         .arg("mutants")
@@ -296,9 +298,9 @@ fn list_mutants_with_dir_option() {
         .arg("--dir")
         .arg("testdata/tree/factorial")
         .assert_insta("list_mutants_with_dir_option");
-}
+}*/
 
-#[test]
+/*#[test]
 fn list_mutants_with_diffs_in_factorial() {
     run()
         .arg("mutants")
@@ -333,9 +335,10 @@ fn list_mutants_well_tested_exclude_name
         .args(["--list", "--exclude", "simple_fns.rs"])
         .current_dir("testdata/tree/well_tested")
         .assert_insta("list_mutants_well_tested_exclude_name_filter");
-}
+}*/
 
 #[test]
+#[ignore]
 fn list_mutants_well_tested_exclude_folder_filter() {
     run()
         .arg("mutants")
@@ -345,6 +348,7 @@ fn list_mutants_well_tested_exclude_fold
 }
 
 #[test]
+#[ignore]
 fn list_mutants_well_tested_examine_and_exclude_name_filter_combined() {
     run()
         .arg("mutants")
@@ -359,7 +363,7 @@ fn list_mutants_well_tested_examine_and_
         .assert_insta("list_mutants_well_tested_examine_and_exclude_name_filter_combined");
 }
 
-#[test]
+/*#[test]
 fn list_mutants_regex_filters() {
     run()
         .arg("mutants")
@@ -409,9 +413,10 @@ fn tree_with_child_directories_is_well_t
         .arg(tmp_src_dir.path())
         .assert()
         .success();
-}
+}*/
 
 #[test]
+#[ignore]
 fn list_mutants_well_tested_multiple_examine_and_exclude_name_filter_with_files_and_folders() {
     run()
         .arg("mutants")
@@ -420,7 +425,7 @@ fn list_mutants_well_tested_multiple_exa
         .assert_insta("list_mutants_well_tested_multiple_examine_and_exclude_name_filter_with_files_and_folders");
 }
 
-#[test]
+/*#[test]
 fn list_mutants_json_well_tested() {
     run()
         .arg("mutants")
@@ -622,9 +627,10 @@ fn copy_testdata_doesnt_include_build_ar
     assert!(!tmp_src_dir.path().join("target").exists());
     assert!(!tmp_src_dir.path().join("mutants.out.old").exists());
     assert!(tmp_src_dir.path().join("Cargo.toml").exists());
-}
+}*/
 
 #[test]
+#[cfg(any())] //disable test
 fn small_well_tested_tree_is_clean() {
     let tmp_src_dir = copy_of_testdata("small_well_tested");
     run()
@@ -670,7 +676,7 @@ fn small_well_tested_tree_is_clean() {
     assert!(log_content.contains("factorial(6) = 0"));
 }
 
-#[test]
+/*#[test]
 fn cdylib_tree_is_well_tested() {
     let tmp_src_dir = copy_of_testdata("cdylib");
     run()
@@ -1435,7 +1441,7 @@ fn check_text_list_output(dir: &Path, te
         let content = fs::read_to_string(&path).unwrap();
         insta::assert_snapshot!(format!("{test_name}__{name}.txt"), content);
     }
-}
+}*/
 
 /// `cargo mutants --completions SHELL` produces a shell script for some
 /// well-known shells.
Index: cargo-mutants/tests/cli/trace.rs
===================================================================
--- cargo-mutants.orig/tests/cli/trace.rs
+++ cargo-mutants/tests/cli/trace.rs
@@ -6,7 +6,7 @@ use predicates::prelude::*;
 
 use super::run;
 
-#[test]
+/*#[test]
 fn env_var_controls_trace() {
     run()
         .env("CARGO_MUTANTS_TRACE_LEVEL", "trace")
@@ -19,4 +19,4 @@ fn env_var_controls_trace() {
         .stdout(predicate::str::contains(
             "No mutants generated for this return type",
         ));
-}
+}*/
Index: cargo-mutants/src/build_dir.rs
===================================================================
--- cargo-mutants.orig/src/build_dir.rs
+++ cargo-mutants/src/build_dir.rs
@@ -149,7 +149,7 @@ mod test {
 
     use super::*;
 
-    #[test]
+    /*#[test]
     fn build_dir_debug_form() {
         let options = Options::default();
         let root = CargoTool::new()
@@ -163,5 +163,5 @@ mod test {
                 .is_match(&debug_form),
             "debug form is {debug_form:?}",
         );
-    }
+    }*/
 }
