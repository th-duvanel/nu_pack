This patch bumps the dependency on nu-ansi-term to 0.48 and adjusts the way
style objects are constructed to suit nu-ansi-term 0.48.

Hopefully the code changes will no longer be needed with nu-ansi-term 0.49
see: https://github.com/nushell/nu-ansi-term/pull/47/commits/924a0535fa5d7883fcab2bbc36be05d30a981b5a

Index: bat/Cargo.toml
===================================================================
--- bat.orig/Cargo.toml
+++ bat/Cargo.toml
@@ -101,7 +101,7 @@ version = "0.1.9"
 optional = true
 
 [dependencies.nu-ansi-term]
-version = "0.49.0"
+version = "0"
 
 [dependencies.once_cell]
 version = "1.18"
Index: bat/src/printer.rs
===================================================================
--- bat.orig/src/printer.rs
+++ bat/src/printer.rs
@@ -577,10 +577,8 @@ impl<'a> Printer for InteractivePrinter<
 
                             if text.len() != text_trimmed.len() {
                                 if let Some(background_color) = background_color {
-                                    let ansi_style = Style {
-                                        background: to_ansi_color(background_color, true_color),
-                                        ..Default::default()
-                                    };
+                                    let mut ansi_style: Style = Default::default();
+                                    ansi_style.background = to_ansi_color(background_color, true_color);
 
                                     let width = if cursor_total <= cursor_max {
                                         cursor_max - cursor_total + 1
@@ -696,10 +694,8 @@ impl<'a> Printer for InteractivePrinter<
             }
 
             if let Some(background_color) = background_color {
-                let ansi_style = Style {
-                    background: to_ansi_color(background_color, self.config.true_color),
-                    ..Default::default()
-                };
+                let mut ansi_style:Style = Default::default();
+                ansi_style.background = to_ansi_color(background_color, self.config.true_color);
 
                 write!(
                     handle,
@@ -738,8 +734,8 @@ impl Colors {
     }
 
     fn colored(theme: &Theme, true_color: bool) -> Self {
-        let gutter_style = Style {
-            foreground: match theme.settings.gutter_foreground {
+        let mut gutter_style = Style::default();
+        gutter_style.foreground = match theme.settings.gutter_foreground {
                 // If the theme provides a gutter foreground color, use it.
                 // Note: It might be the special value #00000001, in which case
                 // to_ansi_color returns None and we use an empty Style
@@ -747,8 +743,6 @@ impl Colors {
                 Some(c) => to_ansi_color(c, true_color),
                 // Otherwise, use a specific fallback color.
                 None => Some(Fixed(DEFAULT_GUTTER_COLOR)),
-            },
-            ..Style::default()
         };
 
         Colors {
Index: bat/src/terminal.rs
===================================================================
--- bat.orig/src/terminal.rs
+++ bat/src/terminal.rs
@@ -61,10 +61,8 @@ pub fn as_terminal_escaped(
     let mut style = if !colored {
         Style::default()
     } else {
-        let mut color = Style {
-            foreground: to_ansi_color(style.foreground, true_color),
-            ..Style::default()
-        };
+        let mut color = Style::default();
+        color.foreground = to_ansi_color(style.foreground, true_color);
         if style.font_style.contains(FontStyle::BOLD) {
             color = color.bold();
         }
