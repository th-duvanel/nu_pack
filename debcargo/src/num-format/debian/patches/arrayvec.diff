Index: num-format/Cargo.toml
===================================================================
--- num-format.orig/Cargo.toml
+++ num-format/Cargo.toml
@@ -25,7 +25,7 @@ categories = ["encoding", "international
 license = "MIT/Apache-2.0"
 repository = "https://github.com/bcmyers/num-format"
 [dependencies.arrayvec]
-version = "0.4"
+version = "0.7"
 default-features = false
 
 [dependencies.itoa]
@@ -61,7 +61,7 @@ version = "1.0"
 default = ["std"]
 std = ["arrayvec/default", "itoa/default", "itoa/i128"]
 with-num-bigint = ["num-bigint", "std"]
-with-serde = ["arrayvec/serde-1", "serde/derive"]
+with-serde = ["serde/derive"]
 with-system-locale = ["cfg-if", "encoding_rs", "lazy_static", "libc", "num-format-windows", "std", "widestring", "winapi/winnls"]
 [target."cfg(unix)".dependencies.cfg-if]
 version = "0.1"
Index: num-format/src/buffer.rs
===================================================================
--- num-format.orig/src/buffer.rs
+++ num-format/src/buffer.rs
@@ -228,7 +228,7 @@ mod serialization {
             assert_eq!("1,000", buf.as_str());
 
             // should fail
-            let mut should_fail = ArrayString::<[u8; 1024]>::new();
+            let mut should_fail = ArrayString::<1024>::new();
             should_fail.push_str("[0");
             for _ in 0..MAX_BUF_LEN {
                 should_fail.push_str(",0");
Index: num-format/src/strings.rs
===================================================================
--- num-format.orig/src/strings.rs
+++ num-format/src/strings.rs
@@ -180,7 +180,7 @@ create_impls!(SeparatorStr, MAX_SEP_LEN)
 macro_rules! create_string {
     ( $name:ident, $visitor:ident, $max_len:expr ) => {
         #[derive(Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
-        pub(crate) struct $name(ArrayString<[u8; $max_len]>);
+        pub(crate) struct $name(ArrayString<$max_len>);
 
         impl $name {
             #[allow(dead_code)]
@@ -229,7 +229,7 @@ macro_rules! create_string {
             }
         }
 
-        impl From<$name> for ArrayString<[u8; $max_len]> {
+        impl From<$name> for ArrayString<$max_len> {
             fn from(s: $name) -> Self {
                 s.0
             }
Index: num-format/src/error_kind.rs
===================================================================
--- num-format.orig/src/error_kind.rs
+++ num-format/src/error_kind.rs
@@ -28,7 +28,7 @@ pub enum ErrorKind {
 
     #[cfg(not(feature = "std"))]
     /// Other miscellaneous error.
-    Other(ArrayString<[u8; MAX_ERR_LEN]>),
+    Other(ArrayString<MAX_ERR_LEN>),
 
     #[cfg(feature = "std")]
     /// Failed to parse input into a valid locale.
@@ -36,7 +36,7 @@ pub enum ErrorKind {
 
     #[cfg(not(feature = "std"))]
     /// Failed to parse input into a valid locale.
-    ParseLocale(ArrayString<[u8; MAX_ERR_LEN]>),
+    ParseLocale(ArrayString<MAX_ERR_LEN>),
 
     #[cfg(all(feature = "with-system-locale", any(unix, windows)))]
     /// Call to C standard library or Windows API unexpectedly returned invalid data.
