Index: fastrand/Cargo.toml
===================================================================
--- fastrand.orig/Cargo.toml
+++ fastrand/Cargo.toml
@@ -42,9 +42,6 @@ version = "0.2"
 [dev-dependencies.rand]
 version = "0.8"
 
-[dev-dependencies.wyhash]
-version = "0.5"
-
 [features]
 alloc = []
 default = ["std"]
Index: fastrand/benches/bench.rs
===================================================================
--- fastrand.orig/benches/bench.rs
+++ fastrand/benches/bench.rs
@@ -4,9 +4,9 @@ extern crate test;
 
 use rand::prelude::*;
 use test::Bencher;
-use wyhash::WyRng;
+//use wyhash::WyRng;
 
-#[bench]
+/*#[bench]
 fn shuffle_wyhash(b: &mut Bencher) {
     let mut rng = WyRng::from_rng(thread_rng()).unwrap();
     let mut x = (0..100).collect::<Vec<usize>>();
@@ -14,7 +14,7 @@ fn shuffle_wyhash(b: &mut Bencher) {
         x.shuffle(&mut rng);
         x[0]
     })
-}
+}*/
 
 #[bench]
 fn shuffle_fastrand(b: &mut Bencher) {
@@ -26,7 +26,7 @@ fn shuffle_fastrand(b: &mut Bencher) {
     })
 }
 
-#[bench]
+/*#[bench]
 fn u8_wyhash(b: &mut Bencher) {
     let mut rng = WyRng::from_rng(thread_rng()).unwrap();
     b.iter(|| {
@@ -36,7 +36,7 @@ fn u8_wyhash(b: &mut Bencher) {
         }
         sum
     })
-}
+}*/
 
 #[bench]
 fn u8_fastrand(b: &mut Bencher) {
@@ -50,7 +50,7 @@ fn u8_fastrand(b: &mut Bencher) {
     })
 }
 
-#[bench]
+/*#[bench]
 fn u32_wyhash(b: &mut Bencher) {
     let mut rng = WyRng::from_rng(thread_rng()).unwrap();
     b.iter(|| {
@@ -60,7 +60,7 @@ fn u32_wyhash(b: &mut Bencher) {
         }
         sum
     })
-}
+}*/
 
 #[bench]
 fn u32_fastrand(b: &mut Bencher) {
