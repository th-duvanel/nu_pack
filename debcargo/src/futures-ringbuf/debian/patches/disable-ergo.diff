--- a/tests/endpoint.rs
+++ b/tests/endpoint.rs
@@ -16,7 +16,6 @@ use
 	futures_test       :: { task::noop_waker                                                       } ,
 	assert_matches     :: { assert_matches                                                         } ,
 	std                :: { task::{ Poll, Context }                                                } ,
-	ergo_pin           :: { ergo_pin                                                               } ,
 };
 
 
@@ -37,59 +36,6 @@ fn basic_usage() { block_on( async
 	assert_eq!( read, vec![ 1,2,3 ][..] );
 })}
 
-
-#[ test ] #[ ergo_pin ]
-//
-fn close_write()
-{
-	let (server, _client) = Endpoint::pair( 10, 10 );
-
-	let     waker  = noop_waker();
-	let mut cx     = Context::from_waker( &waker );
-	let mut pserv  = pin!( server );
-
-	let res = pserv.as_mut().poll_close( &mut cx );
-
-	assert_matches!( res, Poll::Ready( Ok(_) ) );
-
-	let buf = vec![ 1,2,3 ];
-	let res = pserv.poll_write( &mut cx, &buf );
-
-	match res
-	{
-		Poll::Ready( Err(e) ) => assert_eq!( e.kind(), std::io::ErrorKind::NotConnected ) ,
-		_                     => panic!( "poll_write should return error: {:?}", res ),
-	}
-}
-
-
-#[ test ] #[ ergo_pin ]
-//
-fn close_read()
-{
-	// flexi_logger::Logger::with_str( "futures_ringbuf=trace" ).start().expect( "flexi_logger");
-
-	let (server, client) = Endpoint::pair( 10, 10 );
-
-	let mut pserv  = pin!( server );
-	let     pcl    = pin!( client );
-
-	let     waker  = noop_waker();
-	let mut cx     = Context::from_waker( &waker );
-
-	// let res = pserv.as_mut().poll_close( &mut cx );
-	// assert_matches!( res, Poll::Ready( Ok(_) ) );
-
-	block_on( pserv.as_mut().close() ).expect( "close server" );
-
-	let mut buf = [0u8;10];
-	let res = pcl.poll_read( &mut cx, &mut buf );
-
-	assert_matches!( res, Poll::Ready( Ok(0) ));
-}
-
-
-
 #[ test ]
 //
 fn close_read_remaining() { block_on( async

--- a/tests/endpoint_tokio.rs
+++ b/tests/endpoint_tokio.rs
@@ -16,7 +16,6 @@ use
 	futures_test      :: { task::noop_waker                                                       } ,
 	assert_matches    :: { assert_matches                                                         } ,
 	std               :: { task::{ Poll, Context }                                                } ,
-	ergo_pin          :: { ergo_pin                                                               } ,
 };
 
 
@@ -41,68 +40,6 @@ fn basic_usage() { block_on( async
 })}
 
 
-#[ test ] #[ ergo_pin ]
-//
-fn close_write()
-{
-	let (server, client) = Endpoint::pair( 10, 10 );
-
-	let server = server.compat();
-	let _client = client.compat();
-
-	let     waker  = noop_waker();
-	let mut cx     = Context::from_waker( &waker );
-	let mut pserv  = pin!( server );
-
-	let res = pserv.as_mut().poll_shutdown( &mut cx );
-
-	assert_matches!( res, Poll::Ready( Ok(_) ) );
-
-	let buf = vec![ 1,2,3 ];
-	let res = pserv.poll_write( &mut cx, &buf );
-
-	match res
-	{
-		Poll::Ready( Err(e) ) => assert_eq!( e.kind(), std::io::ErrorKind::NotConnected ) ,
-		_                     => panic!( "poll_write should return error: {:?}", res ),
-	}
-}
-
-
-#[ test ] #[ ergo_pin ]
-//
-fn close_read()
-{
-	// flexi_logger::Logger::with_str( "futures_ringbuf=trace" ).start().expect( "flexi_logger");
-
-	let (server, client) = Endpoint::pair( 10, 10 );
-
-	let server = server.compat();
-	let client = client.compat();
-
-
-	let mut pserv  = pin!( server );
-	let     pcl    = pin!( client );
-
-	let     waker  = noop_waker();
-	let mut cx     = Context::from_waker( &waker );
-
-	// let res = pserv.as_mut().poll_close( &mut cx );
-	// assert_matches!( res, Poll::Ready( Ok(_) ) );
-
-	block_on( pserv.as_mut().shutdown() ).expect( "close server" );
-
-	let mut buf      = [0u8;10];
-	let mut read_buf = ReadBuf::new( &mut buf );
-
-	let res = pcl.poll_read( &mut cx, &mut read_buf );
-
-	assert_eq!( read_buf.filled().len(), 0 );
-	assert_matches!( res, Poll::Ready( Ok(()) ));
-}
-
-
-
 #[ test ]
 //
 fn close_read_remaining() { block_on( async
