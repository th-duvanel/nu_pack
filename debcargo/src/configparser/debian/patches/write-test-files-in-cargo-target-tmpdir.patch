Description: Write test file in CARGO_TARGET_TMPDIR
Last-Update: 2023-02-11
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
Index: configparser/tests/test.rs
===================================================================
--- configparser.orig/tests/test.rs
+++ configparser/tests/test.rs
@@ -4,6 +4,7 @@ use std::error::Error;
 #[test]
 #[allow(clippy::approx_constant)]
 fn non_cs() -> Result<(), Box<dyn Error>> {
+    use std::path::PathBuf;
     let mut config = Ini::new();
     let map = config.load("tests/test.ini")?;
     config.set_comment_symbols(&[';', '#', '!']);
@@ -39,8 +40,9 @@ fn non_cs() -> Result<(), Box<dyn Error>
         "defaultvalues"
     );
     config.setstr("DEFAULT", "defaultvalues", None);
-    config.write("output.ini")?;
-    let map2 = config.clone().load("output.ini")?;
+    let path = PathBuf::from(env!("CARGO_TARGET_TMPDIR"));
+    config.write(path.join("output.ini"))?;
+    let map2 = config.clone().load(path.join("output.ini"))?;
     assert_eq!(map2, *config.get_map_ref());
     let map3 = config.clone().read(config.writes())?;
     assert_eq!(map2, map3);
@@ -132,6 +134,7 @@ fn non_cs() -> Result<(), Box<dyn Error>
 #[test]
 #[allow(clippy::approx_constant)]
 fn cs() -> Result<(), Box<dyn Error>> {
+    use std::path::PathBuf;
     let mut config = Ini::new_cs();
     let map = config.load("tests/test.ini")?;
     config.set_comment_symbols(&[';', '#', '!']);
@@ -167,8 +170,9 @@ fn cs() -> Result<(), Box<dyn Error>> {
         "defaultvalues"
     );
     config.setstr("default", "defaultvalues", None);
-    config.write("output2.ini")?;
-    let map2 = config.clone().load("output2.ini")?;
+    let path = PathBuf::from(env!("CARGO_TARGET_TMPDIR"));
+    config.write(path.join("output2.ini"))?;
+    let map2 = config.clone().load(path.join("output2.ini"))?;
     assert_eq!(map2, *config.get_map_ref());
     let map3 = config.clone().read(config.writes())?;
     assert_eq!(map2, map3);
@@ -264,6 +268,7 @@ Float=3.1415
 #[test]
 #[cfg(feature = "async-std")]
 fn async_load_write() -> Result<(), Box<dyn Error>> {
+    use std::path::PathBuf;
     const OUT_FILE_CONTENTS: &str = "defaultvalues=defaultvalues
     [topsecret]
     KFC = the secret herb is orega-
@@ -284,24 +289,25 @@ fn async_load_write() -> Result<(), Box<
 
     let mut config = Ini::new();
     config.read(OUT_FILE_CONTENTS.to_owned())?;
-    config.write("output_sync.ini")?;
+    let path = PathBuf::from(env!("CARGO_TARGET_TMPDIR"));
+    config.write(path.join("output_sync.ini"))?;
 
     async_std::task::block_on::<_, Result<_, String>>(async {
         let mut config_async = Ini::new();
         config_async.read(OUT_FILE_CONTENTS.to_owned())?;
         config_async
-            .write_async("output_async.ini")
+            .write_async(path.join("output_async.ini"))
             .await
             .map_err(|e| e.to_string())?;
         Ok(())
     })?;
 
     let mut sync_content = Ini::new();
-    sync_content.load("output_sync.ini")?;
+    sync_content.load(path.join("output_sync.ini"))?;
 
     let async_content = async_std::task::block_on::<_, Result<_, String>>(async {
         let mut async_content = Ini::new();
-        async_content.load_async("output_async.ini").await?;
+        async_content.load_async(path.join("output_async.ini")).await?;
         Ok(async_content)
     })?;
 
