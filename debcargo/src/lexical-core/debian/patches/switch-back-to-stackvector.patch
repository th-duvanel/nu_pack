Switch back to stackvector as the version of arrayvec currently
in Debian is not compatible.

This is largely based on a revert of upstream commit
d7c02b3d97e7db82d24c7fcdf14325217ef74fa7

Index: lexical-core/src/atof/algorithm/math.rs
===================================================================
--- lexical-core.orig/src/atof/algorithm/math.rs
+++ lexical-core/src/atof/algorithm/math.rs
@@ -2915,7 +2915,7 @@ mod tests {
     impl Bigint {
         #[inline]
         pub fn new() -> Bigint {
-            Bigint { data: arrvec![] }
+            Bigint { data: stackvec![] }
         }
     }
 
@@ -3120,9 +3120,9 @@ mod tests {
     fn trailing_zero_limbs_test() {
         assert_eq!(Bigint::new().trailing_zero_limbs(), 0);
 
-        assert_eq!(Bigint { data: arrvec![0xFF] }.trailing_zero_limbs(), 0);
-        assert_eq!(Bigint { data: arrvec![0, 0xFF000] }.trailing_zero_limbs(), 1);
-        assert_eq!(Bigint { data: arrvec![0, 0, 0, 0xFF000] }.trailing_zero_limbs(), 3);
+        assert_eq!(Bigint { data: stackvec![0xFF] }.trailing_zero_limbs(), 0);
+        assert_eq!(Bigint { data: stackvec![0, 0xFF000] }.trailing_zero_limbs(), 1);
+        assert_eq!(Bigint { data: stackvec![0, 0, 0, 0xFF000] }.trailing_zero_limbs(), 3);
     }
 
     #[test]
@@ -3192,11 +3192,11 @@ mod tests {
 
     #[test]
     fn pad_zero_digits_test() {
-        let mut x = Bigint { data: arrvec![0, 0, 0, 1] };
+        let mut x = Bigint { data: stackvec![0, 0, 0, 1] };
         x.pad_zero_digits(3);
         assert_eq!(x.data.as_slice(), &[0, 0, 0, 0, 0, 0, 1]);
 
-        let mut x = Bigint { data: arrvec![1] };
+        let mut x = Bigint { data: stackvec![1] };
         x.pad_zero_digits(1);
         assert_eq!(x.data.as_slice(), &[0, 1]);
     }
Index: lexical-core/src/lib.rs
===================================================================
--- lexical-core.orig/src/lib.rs
+++ lexical-core/src/lib.rs
@@ -146,9 +146,10 @@ extern crate cfg_if;
 #[cfg_attr(test, macro_use)]
 extern crate alloc;
 
-// Use arrayvec for atof.
+// Use stackvector for atof.
 #[cfg(feature = "correct")]
-extern crate arrayvec;
+#[macro_use]
+extern crate stackvector;
 
 // Ensure only one back-end is enabled.
 #[cfg(all(feature = "grisu3", feature = "ryu"))]
Index: lexical-core/src/util/sequence.rs
===================================================================
--- lexical-core.orig/src/util/sequence.rs
+++ lexical-core/src/util/sequence.rs
@@ -3,130 +3,11 @@
 #![allow(dead_code)]
 
 use crate::lib::{cmp, iter, marker, mem, ops, ptr, slice};
-use arrayvec;
+use stackvector;
 
 #[cfg(all(feature = "correct", feature = "radix"))]
 use crate::lib::Vec;
 
-// ARRVEC
-
-/// Macro to automate simplify the creation of an ArrayVec.
-#[macro_export]
-macro_rules! arrvec {
-    // This only works if the ArrayVec is the same size as the input array.
-    ($elem:expr; $n:expr) => ({
-        $crate::arrayvec::ArrayVec::from([$elem; $n])
-    });
-    // This just repeatedly calls `push`. I don't believe there's a concise way to count the number of expressions.
-    ($($x:expr),*$(,)*) => ({
-        // Allow an unused mut variable, since if the sequence is empty,
-        // the vec will never be mutated.
-        #[allow(unused_mut)] {
-            let mut vec = $crate::arrayvec::ArrayVec::new();
-            $(vec.push($x);)*
-            vec
-        }
-    });
-}
-
-// INSERT MANY
-
-/// Insert multiple elements at position `index`.
-///
-/// Shifts all elements before index to the back of the iterator.
-/// It uses size hints to try to minimize the number of moves,
-/// however, it does not rely on them. We cannot internally allocate, so
-/// if we overstep the lower_size_bound, we have to do extensive
-/// moves to shift each item back incrementally.
-///
-/// This implementation is adapted from [`smallvec`], which has a battle-tested
-/// implementation that has been revised for at least a security advisory
-/// warning. Smallvec is similarly licensed under an MIT/Apache dual license.
-///
-/// [`smallvec`]: https://github.com/servo/rust-smallvec
-pub fn insert_many<V, T, I>(vec: &mut V, index: usize, iterable: I)
-    where V: VecLike<T>,
-          I: iter::IntoIterator<Item=T>
-{
-    let mut iter = iterable.into_iter();
-    if index == vec.len() {
-        return vec.extend(iter);
-    }
-
-    let (lower_size_bound, _) = iter.size_hint();
-    assert!(lower_size_bound <= core::isize::MAX as usize); // Ensure offset is indexable
-    assert!(index + lower_size_bound >= index); // Protect against overflow
-
-    let mut num_added = 0;
-    let old_len = vec.len();
-    assert!(index <= old_len);
-
-    unsafe {
-        // Reserve space for `lower_size_bound` elements.
-        vec.reserve(lower_size_bound);
-        let start = vec.as_mut_ptr();
-        let ptr = start.add(index);
-
-        // Move the trailing elements.
-        ptr::copy(ptr, ptr.add(lower_size_bound), old_len - index);
-
-        // In case the iterator panics, don't double-drop the items we just copied above.
-        vec.set_len(0);
-        let mut guard = DropOnPanic {
-            start,
-            skip: index..(index + lower_size_bound),
-            len: old_len + lower_size_bound,
-        };
-
-        while num_added < lower_size_bound {
-            let element = match iter.next() {
-                Some(x) => x,
-                None => break,
-            };
-            let cur = ptr.add(num_added);
-            ptr::write(cur, element);
-            guard.skip.start += 1;
-            num_added += 1;
-        }
-
-        if num_added < lower_size_bound {
-            // Iterator provided fewer elements than the hint. Move the tail backward.
-            ptr::copy(
-                ptr.add(lower_size_bound),
-                ptr.add(num_added),
-                old_len - index,
-            );
-        }
-        // There are no more duplicate or uninitialized slots, so the guard is not needed.
-        vec.set_len(old_len + num_added);
-        mem::forget(guard);
-    }
-
-    // Insert any remaining elements one-by-one.
-    for element in iter {
-        vec.insert(index + num_added, element);
-        num_added += 1;
-    }
-
-    struct DropOnPanic<T> {
-        start: *mut T,
-        skip: ops::Range<usize>, // Space we copied-out-of, but haven't written-to yet.
-        len: usize,
-    }
-
-    impl<T> Drop for DropOnPanic<T> {
-        fn drop(&mut self) {
-            for i in 0..self.len {
-                if !self.skip.contains(&i) {
-                    unsafe {
-                        ptr::drop_in_place(self.start.add(i));
-                    }
-                }
-            }
-        }
-    }
-}
-
 // REMOVE_MANY
 
 /// Remove many elements from a vec-like container.
@@ -332,17 +213,17 @@ impl<T> SliceLikeImpl<T> for Vec<T> {
     }
 }
 
-impl<A: arrayvec::Array> SliceLikeImpl<A::Item> for arrayvec::ArrayVec<A> {
+impl<A: stackvector::Array> SliceLikeImpl<A::Item> for stackvector::StackVec<A> {
     // AS SLICE
 
     #[inline]
     fn as_slice(&self) -> &[A::Item] {
-        arrayvec::ArrayVec::as_slice(self)
+        stackvector::StackVec::as_slice(self)
     }
 
     #[inline]
     fn as_mut_slice(&mut self) -> &mut [A::Item] {
-        arrayvec::ArrayVec::as_mut_slice(self)
+        stackvector::StackVec::as_mut_slice(self)
     }
 }
 
@@ -1045,7 +926,7 @@ impl<T> SliceLike<T> for Vec<T> {
     }
 }
 
-impl<A: arrayvec::Array> SliceLike<A::Item> for arrayvec::ArrayVec<A> {
+impl<A: stackvector::Array> SliceLike<A::Item> for stackvector::StackVec<A> {
     // GET
 
     /// Get an immutable reference to item at index.
@@ -1273,32 +1154,32 @@ impl<T> VecLike<T> for Vec<T> {
     }
 }
 
-impl<A: arrayvec::Array> VecLike<A::Item> for arrayvec::ArrayVec<A> {
+impl<A: stackvector::Array> VecLike<A::Item> for stackvector::StackVec<A> {
     #[inline]
-    fn new() -> arrayvec::ArrayVec<A> {
-        arrayvec::ArrayVec::new()
+    fn new() -> stackvector::StackVec<A> {
+        stackvector::StackVec::new()
     }
 
     #[inline]
-    fn with_capacity(capacity: usize) -> arrayvec::ArrayVec<A> {
-        let mut v = arrayvec::ArrayVec::new();
+    fn with_capacity(capacity: usize) -> stackvector::StackVec<A> {
+        let mut v = stackvector::StackVec::new();
         v.reserve(capacity);
         v
     }
 
     #[inline]
     fn capacity(&self) -> usize {
-        arrayvec::ArrayVec::capacity(self)
+        stackvector::StackVec::capacity(self)
     }
 
     #[inline]
     fn reserve(&mut self, capacity: usize) {
-        assert!(self.len() + capacity <= self.capacity());
+        assert!(capacity < self.capacity());
     }
 
     #[inline]
     fn reserve_exact(&mut self, capacity: usize) {
-        assert!(self.len() + capacity <= self.capacity());
+        assert!(capacity < self.capacity());
     }
 
     #[inline]
@@ -1307,47 +1188,47 @@ impl<A: arrayvec::Array> VecLike<A::Item
 
     #[inline]
     fn truncate(&mut self, len: usize) {
-        arrayvec::ArrayVec::truncate(self, len)
+        stackvector::StackVec::truncate(self, len)
     }
 
     #[inline]
     unsafe fn set_len(&mut self, new_len: usize) {
-        arrayvec::ArrayVec::set_len(self, new_len);
+        stackvector::StackVec::set_len(self, new_len);
     }
 
     #[inline]
     fn swap_remove(&mut self, index: usize) -> A::Item {
-        arrayvec::ArrayVec::swap_remove(self, index)
+        stackvector::StackVec::swap_remove(self, index)
     }
 
     #[inline]
     fn insert(&mut self, index: usize, element: A::Item) {
-        arrayvec::ArrayVec::insert(self, index, element)
+        stackvector::StackVec::insert(self, index, element)
     }
 
     #[inline]
     fn remove(&mut self, index: usize) -> A::Item {
-        arrayvec::ArrayVec::remove(self, index)
+        stackvector::StackVec::remove(self, index)
     }
 
     #[inline]
     fn push(&mut self, value: A::Item) {
-        arrayvec::ArrayVec::push(self, value);
+        stackvector::StackVec::push(self, value);
     }
 
     #[inline]
     fn pop(&mut self) -> Option<A::Item> {
-        arrayvec::ArrayVec::pop(self)
+        stackvector::StackVec::pop(self)
     }
 
     #[inline]
     fn clear(&mut self) {
-        arrayvec::ArrayVec::clear(self);
+        stackvector::StackVec::clear(self);
     }
 
     #[inline]
     fn insert_many<I: iter::IntoIterator<Item=A::Item>>(&mut self, index: usize, iterable: I) {
-        insert_many(self, index, iterable)
+        stackvector::StackVec::insert_many(self, index, iterable)
     }
 
     #[inline]
@@ -1385,25 +1266,17 @@ impl<T> CloneableVecLike<T> for Vec<T>
     }
 }
 
-impl<A: arrayvec::Array> CloneableVecLike<A::Item> for arrayvec::ArrayVec<A>
-    where A: Send,
-          A::Index: Send,
-          A::Item: Clone + Copy + Send
+impl<A: stackvector::Array> CloneableVecLike<A::Item> for stackvector::StackVec<A>
+    where A::Item: Clone + Copy + Send
 {
     #[inline]
     fn extend_from_slice(&mut self, other: &[A::Item]) {
-        self.extend(other.iter().cloned())
+        stackvector::StackVec::extend_from_slice(self, other)
     }
 
     #[inline]
     fn resize(&mut self, len: usize, value: A::Item) {
-        assert!(len <= self.capacity());
-        let old_len = self.len();
-        if len > old_len {
-            self.extend(iter::repeat(value).take(len - old_len));
-        } else {
-            self.truncate(len);
-        }
+        stackvector::StackVec::resize(self, len, value)
     }
 }
 
@@ -1414,18 +1287,6 @@ impl<A: arrayvec::Array> CloneableVecLik
 mod tests {
     use super::*;
 
-    #[test]
-    fn test_insert_many() {
-        type V = arrayvec::ArrayVec<[u8; 8]>;
-        let mut v: V = V::new();
-        for x in 0..4 {
-            v.push(x);
-        }
-        assert_eq!(v.len(), 4);
-        v.insert_many(1, [5, 6].iter().cloned());
-        assert_eq!(&v[..], &[0, 5, 6, 1, 2, 3]);
-    }
-
     #[cfg(all(feature = "correct", feature = "radix"))]
     #[test]
     fn remove_many_test() {
Index: lexical-core/src/util/test.rs
===================================================================
--- lexical-core.orig/src/util/test.rs
+++ lexical-core/src/util/test.rs
@@ -4,7 +4,7 @@ use super::config::BUFFER_SIZE;
 
 cfg_if! {
 if #[cfg(feature = "correct")] {
-    use arrayvec;
+    use stackvector;
     use super::sequence::{CloneableVecLike, VecLike};
 }}  // cfg_if
 
@@ -46,10 +46,10 @@ if #[cfg(feature = "correct")] {
 // FROM U32
 
 #[cfg(limb_width_32)]
-pub(crate) type DataType = arrayvec::ArrayVec<[u32; 128]>;
+pub(crate) type DataType = stackvector::StackVec<[u32; 128]>;
 
 #[cfg(limb_width_64)]
-pub(crate) type DataType = arrayvec::ArrayVec<[u64; 64]>;
+pub(crate) type DataType = stackvector::StackVec<[u64; 64]>;
 
 
 #[cfg(limb_width_32)]
Index: lexical-core/Cargo.toml
===================================================================
--- lexical-core.orig/Cargo.toml
+++ lexical-core/Cargo.toml
@@ -35,10 +35,8 @@ opt-level = 3
 lto = true
 debug = false
 debug-assertions = false
-[dependencies.arrayvec]
-version = "0.5"
-features = ["array-sizes-33-128"]
-optional = true
+[dependencies.stackvector]
+version = "^1.0.5"
 default-features = false
 
 [dependencies.bitflags]
@@ -68,3 +66,3 @@ optional = true
 [features]
-correct = ["arrayvec", "static_assertions", "table"]
+correct = ["static_assertions", "table"]
 default = ["correct", "ryu", "std"]
Index: lexical-core/src/atof/algorithm/bigcomp.rs
===================================================================
--- lexical-core.orig/src/atof/algorithm/bigcomp.rs
+++ lexical-core/src/atof/algorithm/bigcomp.rs
@@ -120,7 +120,7 @@ perftools_inline!{
 pub fn scaling_factor(radix: u32, sci_exponent: u32)
     -> Bigfloat
 {
-    let mut factor = Bigfloat { data: arrvec![1], exp: 0 };
+    let mut factor = Bigfloat { data: stackvec![1], exp: 0 };
     factor.imul_power(radix, sci_exponent);
     factor
 }}
@@ -145,7 +145,7 @@ pub(super) fn make_ratio<F: Float>(radix
         // if it's the denominator, we need to multiply it into the numerator.
         num = factor;
         num.imul_large(&theor);
-        den = Bigfloat { data: arrvec![1], exp: -theor.exp };
+        den = Bigfloat { data: stackvec![1], exp: -theor.exp };
     } else {
         num = theor;
         den = factor;
@@ -315,25 +315,25 @@ mod tests {
         let (num3, den3) = make_ratio(10, 307, 8.98846567431158e+307f64, RoundingKind::NearestTieEven);
 
         #[cfg(limb_width_32)] {
-            assert_eq!(num1, Bigfloat { data: arrvec![1725370368, 1252154597, 1017462556, 675087593, 2805901938, 1401824593, 1124332496, 2380663002, 1612846757, 4128923878, 1492915356, 437569744, 2975325085, 3331531962, 3367627909, 730662168, 2699172281, 1440714968, 2778340312, 690527038, 1297115354, 763425880, 1453089653, 331561842], exp: 312 });
-            assert_eq!(den1, Bigfloat { data: arrvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728], exp: 312 });
+            assert_eq!(num1, Bigfloat { data: stackvec![1725370368, 1252154597, 1017462556, 675087593, 2805901938, 1401824593, 1124332496, 2380663002, 1612846757, 4128923878, 1492915356, 437569744, 2975325085, 3331531962, 3367627909, 730662168, 2699172281, 1440714968, 2778340312, 690527038, 1297115354, 763425880, 1453089653, 331561842], exp: 312 });
+            assert_eq!(den1, Bigfloat { data: stackvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728], exp: 312 });
 
-            assert_eq!(num2, Bigfloat { data: arrvec![881143808, 3756463792, 3052387668, 2025262779, 4122738518, 4205473780, 3372997488, 2847021710, 543572976, 3796837043, 183778774, 1312709233, 336040663, 1404661296, 1512949137, 2191986506, 3802549547, 27177609, 4040053641, 2071581115, 3891346062, 2290277640, 64301663, 994685527], exp: 312 });
-            assert_eq!(den2, Bigfloat { data: arrvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728], exp: 312 });
+            assert_eq!(num2, Bigfloat { data: stackvec![881143808, 3756463792, 3052387668, 2025262779, 4122738518, 4205473780, 3372997488, 2847021710, 543572976, 3796837043, 183778774, 1312709233, 336040663, 1404661296, 1512949137, 2191986506, 3802549547, 27177609, 4040053641, 2071581115, 3891346062, 2290277640, 64301663, 994685527], exp: 312 });
+            assert_eq!(den2, Bigfloat { data: stackvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728], exp: 312 });
 
-            assert_eq!(num3, Bigfloat { data: arrvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 2147483648], exp: 288 });
-            assert_eq!(den3, Bigfloat { data: arrvec![1978138624, 2671552565, 2938166866, 3588566204, 1860064291, 2104472219, 2014975858, 2797301608, 462262832, 318515330, 1101517094, 1738264167, 3721375114, 414401884, 1406861075, 3053102637, 387329537, 2051556775, 1867945454, 3717689914, 1434550525, 1446648206, 238915486], exp: 288 });
+            assert_eq!(num3, Bigfloat { data: stackvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 2147483648], exp: 288 });
+            assert_eq!(den3, Bigfloat { data: stackvec![1978138624, 2671552565, 2938166866, 3588566204, 1860064291, 2104472219, 2014975858, 2797301608, 462262832, 318515330, 1101517094, 1738264167, 3721375114, 414401884, 1406861075, 3053102637, 387329537, 2051556775, 1867945454, 3717689914, 1434550525, 1446648206, 238915486], exp: 288 });
         }
 
         #[cfg(limb_width_64)] {
-            assert_eq!(num1, Bigfloat { data: arrvec![7410409304047484928, 4369968404176723173, 12051257060168107241, 4828971301551875409, 6927124077155322074, 6412022633845121254, 12778923935480989904, 14463851737583396026, 11592856673895384344, 11932880778639151320, 5571068025259989822, 6240972538554414168, 331561842], exp: 280 });
-            assert_eq!(den1, Bigfloat { data: arrvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728], exp: 280 });
+            assert_eq!(num1, Bigfloat { data: stackvec![7410409304047484928, 4369968404176723173, 12051257060168107241, 4828971301551875409, 6927124077155322074, 6412022633845121254, 12778923935480989904, 14463851737583396026, 11592856673895384344, 11932880778639151320, 5571068025259989822, 6240972538554414168, 331561842], exp: 280 });
+            assert_eq!(den1, Bigfloat { data: stackvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728], exp: 280 });
 
-            assert_eq!(num2, Bigfloat { data: arrvec![3784483838432903168, 13109905212530169520, 17707027106794770107, 14486913904655626228, 2334628157756414606, 789323827825812147, 1443283659023866481, 6498067065331084848, 16331825947976601418, 17351898262207902345, 16713204075779969467, 276173541953690888, 994685527], exp: 280 });
-            assert_eq!(den2, Bigfloat { data: arrvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728], exp: 280 });
+            assert_eq!(num2, Bigfloat { data: stackvec![3784483838432903168, 13109905212530169520, 17707027106794770107, 14486913904655626228, 2334628157756414606, 789323827825812147, 1443283659023866481, 6498067065331084848, 16331825947976601418, 17351898262207902345, 16713204075779969467, 276173541953690888, 994685527], exp: 280 });
+            assert_eq!(den2, Bigfloat { data: stackvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728], exp: 280 });
 
-            assert_eq!(num3, Bigfloat { data: arrvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4398046511104, 2147483648], exp: 288 });
-            assert_eq!(den3, Bigfloat { data: arrvec![11474230898198052864, 15412774488649031250, 9038639357805614115, 12014318925423187826, 1368012926086910512, 7465787750175199526, 1779842542902160778, 13112975978653220627, 8811369254899559937, 15967356599166997998, 6213306735021621501, 238915486], exp: 288 });
+            assert_eq!(num3, Bigfloat { data: stackvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4398046511104, 2147483648], exp: 288 });
+            assert_eq!(den3, Bigfloat { data: stackvec![11474230898198052864, 15412774488649031250, 9038639357805614115, 12014318925423187826, 1368012926086910512, 7465787750175199526, 1779842542902160778, 13112975978653220627, 8811369254899559937, 15967356599166997998, 6213306735021621501, 238915486], exp: 288 });
         }
     }
 
Index: lexical-core/src/atof/algorithm/bignum.rs
===================================================================
--- lexical-core.orig/src/atof/algorithm/bignum.rs
+++ lexical-core/src/atof/algorithm/bignum.rs
@@ -14,10 +14,10 @@ if #[cfg(feature = "radix")] {
     // Maximum denominator is 767 mantissa digits + 324 exponent,
     // or 1091 digits, or approximately 3600 bits (round up to 4k).
     #[cfg(limb_width_32)]
-    type IntStorageType = arrayvec::ArrayVec<[Limb; 128]>;
+    type IntStorageType = stackvector::StackVec<[Limb; 128]>;
 
     #[cfg(limb_width_64)]
-    type IntStorageType = arrayvec::ArrayVec<[Limb; 64]>;
+    type IntStorageType = stackvector::StackVec<[Limb; 64]>;
 }}  // cfg_if
 
 perftools_inline!{
@@ -118,9 +118,9 @@ impl LargeOps for Bigint {
 // Adjust the storage capacity for the underlying array.
 cfg_if! {
 if #[cfg(limb_width_64)] {
-    type FloatStorageType = arrayvec::ArrayVec<[Limb; 20]>;
+    type FloatStorageType = stackvector::StackVec<[Limb; 20]>;
 } else {
-    type FloatStorageType = arrayvec::ArrayVec<[Limb; 36]>;
+    type FloatStorageType = stackvector::StackVec<[Limb; 36]>;
 }}   // cfg_if
 
 /// Storage for a big floating-point type.
