--- a/src/blocking/connection.rs
+++ b/src/blocking/connection.rs
@@ -283,7 +283,7 @@ mod tests {
         Guid,
     };
 
-    #[test]
+    /*#[test]
     #[timeout(15000)]
     fn unix_p2p() {
         let guid = Guid::generate();
@@ -329,5 +329,5 @@ mod tests {
                 break;
             }
         }
-    }
+    }*/
 }
--- a/src/connection.rs
+++ b/src/connection.rs
@@ -1477,11 +1477,11 @@ mod tests {
         Ok(())
     }
 
-    #[test]
+    /*#[test]
     #[timeout(15000)]
     fn tcp_p2p() {
         crate::utils::block_on(test_tcp_p2p()).unwrap();
-    }
+    }*/
 
     async fn test_tcp_p2p() -> Result<()> {
         let (server1, client1) = tcp_p2p_pipe().await?;
@@ -1528,12 +1528,12 @@ mod tests {
         futures_util::try_join!(server_conn_builder.build(), client_conn_builder.build())
     }
 
-    #[cfg(unix)]
+    /*#[cfg(unix)]
     #[test]
     #[timeout(15000)]
     fn unix_p2p() {
         crate::utils::block_on(test_unix_p2p()).unwrap();
-    }
+    }*/
 
     #[cfg(unix)]
     async fn test_unix_p2p() -> Result<()> {
--- a/src/fdo.rs
+++ b/src/fdo.rs
@@ -984,7 +984,7 @@ mod tests {
     use tokio::runtime;
     use zbus_names::WellKnownName;
 
-    #[test]
+    /*#[test]
     fn error_from_zerror() {
         let m = Message::method(Some(":1.2"), None::<()>, "/", None::<()>, "foo", &()).unwrap();
         let m = Message::method_error(
@@ -999,7 +999,7 @@ mod tests {
         assert_eq!(e, fdo::Error::TimedOut("so long".to_string()),);
         assert_eq!(e.name(), "org.freedesktop.DBus.Error.TimedOut");
         assert_eq!(e.description(), Some("so long"));
-    }
+    }*/
 
     /*#[test]
     #[timeout(15000)]
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -162,7 +162,7 @@ mod tests {
         std::env::var_os("ZBUS_GDBUS_TEST").is_some()
     }
 
-    #[test]
+    /*#[test]
     fn msg() {
         let mut m = Message::method(
             None::<()>,
@@ -186,7 +186,7 @@ mod tests {
         let primary = m.primary_header();
         assert!(*primary.serial_num().unwrap() == 11);
         assert!(primary.flags() == MessageFlags::NoAutoStart);
-    }
+    }*/
 
     /*#[test]
     #[timeout(15000)]
--- a/src/message.rs
+++ b/src/message.rs
@@ -555,7 +555,7 @@ mod tests {
     use super::Message;
     use crate::Error;
 
-    #[test]
+    /*#[test]
     fn test() {
         #[cfg(unix)]
         let stdout = std::io::stdout();
@@ -596,5 +596,5 @@ mod tests {
         )
         .unwrap();
         assert_eq!(e.to_string(), "Error org.freedesktop.zbus.Error: kaboom!");
-    }
+    }*/
 }
--- a/src/raw/connection.rs
+++ b/src/raw/connection.rs
@@ -227,10 +227,10 @@ mod tests {
     use crate::message::Message;
     use futures_util::future::poll_fn;
 
-    #[test]
+    /*#[test]
     fn raw_send_receive() {
         crate::block_on(raw_send_receive_async());
-    }
+    }*/
 
     async fn raw_send_receive_async() {
         #[cfg(not(feature = "tokio"))]
--- a/tests/e2e.rs
+++ b/tests/e2e.rs
@@ -606,12 +606,12 @@ fn iface_and_proxy() {
     block_on(iface_and_proxy_(false));
 }*/
 
-#[cfg(unix)]
+/*#[cfg(unix)]
 #[test]
 #[timeout(15000)]
 fn iface_and_proxy_unix_p2p() {
     block_on(iface_and_proxy_(true));
-}
+}*/
 
 #[instrument]
 async fn iface_and_proxy_(p2p: bool) {
