Index: zbus/Cargo.toml
===================================================================
--- zbus.orig/Cargo.toml
+++ zbus/Cargo.toml
@@ -165,11 +165,6 @@ version = "0.8.1"
 [dev-dependencies.tempfile]
 version = "3.3.0"
 
-[dev-dependencies.test-log]
-version = "0.2.11"
-features = ["trace"]
-default-features = false
-
 [dev-dependencies.tokio]
 version = "1"
 features = [
Index: zbus/src/address.rs
===================================================================
--- zbus.orig/src/address.rs
+++ zbus/src/address.rs
@@ -656,7 +656,6 @@ mod tests {
     use super::Address;
     use crate::{Error, TcpAddress, TcpAddressFamily};
     use std::str::FromStr;
-    use test_log::test;
 
     #[test]
     fn parse_dbus_addresses() {
Index: zbus/src/connection.rs
===================================================================
--- zbus.orig/src/connection.rs
+++ zbus/src/connection.rs
@@ -1384,7 +1384,6 @@ enum NameStatus {
 mod tests {
     use futures_util::stream::TryStreamExt;
     use ntest::timeout;
-    use test_log::test;
 
     use crate::{fdo::DBusProxy, AuthMechanism};
 
Index: zbus/src/fdo.rs
===================================================================
--- zbus.orig/src/fdo.rs
+++ zbus/src/fdo.rs
@@ -889,7 +889,6 @@ mod tests {
     use futures_util::StreamExt;
     use ntest::timeout;
     use std::convert::TryInto;
-    use test_log::test;
     use tokio::runtime;
     use zbus_names::WellKnownName;
 
Index: zbus/src/guid.rs
===================================================================
--- zbus.orig/src/guid.rs
+++ zbus/src/guid.rs
@@ -76,7 +76,6 @@ impl FromStr for Guid {
 #[cfg(test)]
 mod tests {
     use crate::Guid;
-    use test_log::test;
 
     #[test]
     fn generate() {
Index: zbus/src/handshake.rs
===================================================================
--- zbus.orig/src/handshake.rs
+++ zbus/src/handshake.rs
@@ -1006,7 +1006,6 @@ mod tests {
     use ntest::timeout;
     #[cfg(not(feature = "tokio"))]
     use std::os::unix::net::UnixStream;
-    use test_log::test;
     #[cfg(feature = "tokio")]
     use tokio::{
         io::{AsyncWrite, AsyncWriteExt},
Index: zbus/src/lib.rs
===================================================================
--- zbus.orig/src/lib.rs
+++ zbus/src/lib.rs
@@ -142,7 +142,6 @@ mod tests {
     use crate::utils::block_on;
     use enumflags2::BitFlags;
     use ntest::timeout;
-    use test_log::test;
     use tracing::{debug, instrument, trace};
 
     use zbus_names::UniqueName;
@@ -900,7 +899,7 @@ mod tests {
         Ok(())
     }
 
-    #[test(tokio::test(flavor = "multi_thread", worker_threads = 2))]
+    /*#[test(tokio::test(flavor = "multi_thread", worker_threads = 2))]
     // Issue specific to tokio runtime.
     #[cfg(all(unix, feature = "tokio"))]
     #[instrument]
@@ -1022,5 +1021,5 @@ mod tests {
             last_received = received;
             event.notify(1);
         }
-    }
+    }*/
 }
Index: zbus/src/message.rs
===================================================================
--- zbus.orig/src/message.rs
+++ zbus/src/message.rs
@@ -834,7 +834,6 @@ impl fmt::Display for Message {
 mod tests {
     #[cfg(unix)]
     use std::os::unix::io::AsRawFd;
-    use test_log::test;
     #[cfg(unix)]
     use zvariant::Fd;
 
Index: zbus/src/message_header.rs
===================================================================
--- zbus.orig/src/message_header.rs
+++ zbus/src/message_header.rs
@@ -385,7 +385,6 @@ mod tests {
         error::Error,
         result::Result,
     };
-    use test_log::test;
     use zbus_names::{InterfaceName, MemberName};
     use zvariant::{ObjectPath, Signature};
 
Index: zbus/src/proxy.rs
===================================================================
--- zbus.orig/src/proxy.rs
+++ zbus/src/proxy.rs
@@ -1322,7 +1322,6 @@ mod tests {
     };
     use futures_util::StreamExt;
     use ntest::timeout;
-    use test_log::test;
 
     #[test]
     #[timeout(15000)]
Index: zbus/src/proxy_builder.rs
===================================================================
--- zbus.orig/src/proxy_builder.rs
+++ zbus/src/proxy_builder.rs
@@ -199,7 +199,6 @@ pub trait ProxyDefault {
 #[cfg(test)]
 mod tests {
     use super::*;
-    use test_log::test;
 
     #[test]
     #[ntest::timeout(15000)]
Index: zbus/src/quick_xml.rs
===================================================================
--- zbus.orig/src/quick_xml.rs
+++ zbus/src/quick_xml.rs
@@ -336,7 +336,6 @@ impl<'a> TryFrom<&'a str> for Node<'a> {
 #[cfg(test)]
 mod tests {
     use std::{convert::TryInto, error::Error};
-    use test_log::test;
 
     use super::{ArgDirection, Node};
 
Index: zbus/src/xml.rs
===================================================================
--- zbus.orig/src/xml.rs
+++ zbus/src/xml.rs
@@ -301,7 +301,6 @@ impl std::str::FromStr for Node {
 #[cfg(test)]
 mod tests {
     use std::{error::Error, str::FromStr};
-    use test_log::test;
 
     use super::Node;
 
Index: zbus/tests/e2e.rs
===================================================================
--- zbus.orig/tests/e2e.rs
+++ zbus/tests/e2e.rs
@@ -9,7 +9,6 @@ use event_listener::Event;
 use futures_util::StreamExt;
 use ntest::timeout;
 use serde::{Deserialize, Serialize};
-use test_log::test;
 use tokio::sync::mpsc::{channel, Sender};
 use tracing::{debug, instrument};
 use zbus::{
Index: zbus/src/blocking/connection.rs
===================================================================
--- zbus.orig/src/blocking/connection.rs
+++ zbus/src/blocking/connection.rs
@@ -260,7 +260,6 @@ mod tests {
     #[cfg(all(unix, not(feature = "tokio")))]
     use std::os::unix::net::UnixStream;
     use std::thread;
-    use test_log::test;
     #[cfg(all(unix, feature = "tokio"))]
     use tokio::net::UnixStream;
     #[cfg(all(windows, not(feature = "tokio")))]
Index: zbus/src/blocking/proxy.rs
===================================================================
--- zbus.orig/src/blocking/proxy.rs
+++ zbus/src/blocking/proxy.rs
@@ -485,7 +485,6 @@ mod tests {
     use super::*;
     use crate::blocking;
     use ntest::timeout;
-    use test_log::test;
 
     #[test]
     #[timeout(15000)]
Index: zbus/src/raw/connection.rs
===================================================================
--- zbus.orig/src/raw/connection.rs
+++ zbus/src/raw/connection.rs
@@ -224,7 +224,6 @@ mod tests {
     use super::{Arc, Connection};
     use crate::message::Message;
     use futures_util::future::poll_fn;
-    use test_log::test;
 
     #[test]
     fn raw_send_receive() {
Index: zbus/src/message_builder.rs
===================================================================
--- zbus.orig/src/message_builder.rs
+++ zbus/src/message_builder.rs
@@ -358,9 +358,10 @@ impl<'m> From<MessageHeader<'m>> for Mes
 mod tests {
     use super::MessageBuilder;
     use crate::Error;
-    use test_log::test;
+    
 
     #[test]
+    #[cfg(not(target_arch = "s390x"))]
     fn test_raw() -> Result<(), Error> {
         let raw_body: &[u8] = &[16, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0];
         let message_builder = MessageBuilder::signal("/", "test.test", "test")?;

