This patch is based on the upstream commit described below, adpated for use in the Debian
package by Peter Michael Green.

commit 0458e60b6943b1118763d68e83e91e999ef260a5
Author: Vincent Thiberville <vthib@pm.me>
Date:   Tue Sep 19 16:00:51 2023 +0200

    feat: update to nix 0.27.1

Index: rtnetlink/src/ns.rs
===================================================================
--- rtnetlink.orig/src/ns.rs
+++ rtnetlink/src/ns.rs
@@ -10,7 +10,7 @@ use nix::{
     },
     unistd::{fork, ForkResult},
 };
-use std::{option::Option, path::Path, process::exit};
+use std::{option::Option, os::fd::BorrowedFd, path::Path, process::exit};
 
 // if "only" smol or smol+tokio were enabled, we use smol because
 // it doesn't require an active tokio runtime - just to be sure.
@@ -329,7 +329,10 @@ impl NetworkNamespace {
         }
 
         setns_flags.insert(CloneFlags::CLONE_NEWNET);
-        if let Err(e) = nix::sched::setns(fd, setns_flags) {
+        if let Err(e) = nix::sched::setns(
+            unsafe { BorrowedFd::borrow_raw(fd) },
+            setns_flags,
+        ) {
             log::error!("setns error: {}", e);
             let err_msg = format!("setns error: {e}");
             let _ = nix::unistd::unlink(ns_path);
Index: rtnetlink/src/traffic_control/add_filter.rs
===================================================================
--- rtnetlink.orig/src/traffic_control/add_filter.rs
+++ rtnetlink/src/traffic_control/add_filter.rs
@@ -163,7 +163,7 @@ impl TrafficFilterNewRequest {
 #[cfg(feature = "tokio_socket")]
 #[cfg(test)]
 mod test {
-    use std::{fs::File, os::unix::io::AsRawFd, path::Path};
+    use std::{fs::File, os::fd::AsFd, path::Path};
 
     use futures::stream::TryStreamExt;
     use netlink_packet_route::LinkMessage;
@@ -194,7 +194,7 @@ mod test {
             // entry new ns
             let ns_path = Path::new(NETNS_PATH);
             let file = File::open(ns_path.join(path)).unwrap();
-            setns(file.as_raw_fd(), CloneFlags::CLONE_NEWNET).unwrap();
+            setns(file.as_fd(), CloneFlags::CLONE_NEWNET).unwrap();
 
             Self {
                 path: path.to_string(),
@@ -206,7 +206,7 @@ mod test {
     impl Drop for Netns {
         fn drop(&mut self) {
             println!("exit ns: {}", self.path);
-            setns(self.last.as_raw_fd(), CloneFlags::CLONE_NEWNET).unwrap();
+            setns(self.last.as_fd(), CloneFlags::CLONE_NEWNET).unwrap();
 
             let ns_path = Path::new(NETNS_PATH).join(&self.path);
             nix::mount::umount2(&ns_path, nix::mount::MntFlags::MNT_DETACH)
Index: rtnetlink/src/traffic_control/add_qdisc.rs
===================================================================
--- rtnetlink.orig/src/traffic_control/add_qdisc.rs
+++ rtnetlink/src/traffic_control/add_qdisc.rs
@@ -74,7 +74,7 @@ impl QDiscNewRequest {
 #[cfg(feature = "tokio_socket")]
 #[cfg(test)]
 mod test {
-    use std::{fs::File, os::unix::io::AsRawFd, path::Path};
+    use std::{fs::File, os::fd::AsFd, path::Path};
 
     use futures::stream::TryStreamExt;
     use nix::sched::{setns, CloneFlags};
@@ -107,7 +107,7 @@ mod test {
             // entry new ns
             let ns_path = Path::new(NETNS_PATH);
             let file = File::open(ns_path.join(path)).unwrap();
-            setns(file.as_raw_fd(), CloneFlags::CLONE_NEWNET).unwrap();
+            setns(file.as_fd(), CloneFlags::CLONE_NEWNET).unwrap();
 
             Self {
                 path: path.to_string(),
@@ -119,7 +119,7 @@ mod test {
     impl Drop for Netns {
         fn drop(&mut self) {
             println!("exit ns: {}", self.path);
-            setns(self.last.as_raw_fd(), CloneFlags::CLONE_NEWNET).unwrap();
+            setns(self.last.as_fd(), CloneFlags::CLONE_NEWNET).unwrap();
 
             let ns_path = Path::new(NETNS_PATH).join(&self.path);
             nix::mount::umount2(&ns_path, nix::mount::MntFlags::MNT_DETACH)
Index: rtnetlink/Cargo.toml
===================================================================
--- rtnetlink.orig/Cargo.toml
+++ rtnetlink/Cargo.toml
@@ -52,7 +52,7 @@ default-features = false
 version = "0.8"
 
 [dependencies.nix]
-version = "0.26.1"
+version = ">= 0.27.1, < 1.0"
 features = [
     "fs",
     "mount",
