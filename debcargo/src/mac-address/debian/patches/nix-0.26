commit 1b9b9d327d50ffdef81f900995707905a58a73e7
Author: Jelmer VernooÄ³ <jelmer@jelmer.uk>
Date:   Mon Jul 17 19:00:08 2023 +0000

    Update to nix 0.26

Index: mac-address/Cargo.toml
===================================================================
--- mac-address.orig/Cargo.toml
+++ mac-address/Cargo.toml
@@ -38,7 +38,7 @@ version = "1.0.59"
 version = "1.0.117"
 
 [target."cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"freebsd\", target_os = \"openbsd\"))".dependencies.nix]
-version = "0.23.1"
+version = "0.26"
 
 [target."cfg(windows)".dependencies.winapi]
 version = "0.3"
Index: mac-address/src/iter/linux.rs
===================================================================
--- mac-address.orig/src/iter/linux.rs
+++ mac-address/src/iter/linux.rs
@@ -1,5 +1,5 @@
 use crate::{MacAddress, MacAddressError};
-use nix::{ifaddrs, sys::socket::SockAddr};
+use nix::ifaddrs;
 
 /// An iterator over all available MAC addresses on the system.
 pub struct MacAddressIterator {
@@ -19,8 +19,12 @@ impl MacAddressIterator {
 }
 
 fn filter_macs(intf: ifaddrs::InterfaceAddress) -> Option<MacAddress> {
-    if let SockAddr::Link(link) = intf.address? {
-        Some(MacAddress::new(link.addr()))
+    if let Some(link) = intf.address?.as_link_addr() {
+        if let Some(addr) = link.addr() {
+            return Some(MacAddress::new(addr));
+        } else {
+            None
+        }
     } else {
         None
     }
Index: mac-address/src/linux.rs
===================================================================
--- mac-address.orig/src/linux.rs
+++ mac-address/src/linux.rs
@@ -1,7 +1,7 @@
 #![allow(dead_code)]
 
 use crate::MacAddressError;
-use nix::{ifaddrs::*, sys::socket::SockAddr};
+use nix::ifaddrs::*;
 
 /// Uses the `getifaddrs` call to retrieve a list of network interfaces on the
 /// host device and returns the first MAC address listed that isn't
@@ -10,15 +10,19 @@ pub fn get_mac(name: Option<&str>) -> Re
     let ifiter = getifaddrs()?;
 
     for interface in ifiter {
-        if let Some(SockAddr::Link(link)) = interface.address {
-            let bytes = link.addr();
-
-            if let Some(name) = name {
-                if interface.interface_name == name {
-                    return Ok(Some(bytes));
+        if let Some(iface_address) = interface.address {
+            if let Some(link) = iface_address.as_link_addr() {
+                let bytes = link.addr();
+
+                if let Some(name) = name {
+                    if interface.interface_name == name {
+                        return Ok(bytes);
+                    }
+                } else if let Some(bytes) = bytes {
+                    if bytes.iter().any(|&x| x != 0) {
+                        return Ok(Some(bytes));
+                    }
                 }
-            } else if bytes.iter().any(|&x| x != 0) {
-                return Ok(Some(bytes));
             }
         }
     }
@@ -30,11 +34,13 @@ pub fn get_ifname(mac: &[u8; 6]) -> Resu
     let ifiter = getifaddrs()?;
 
     for interface in ifiter {
-        if let Some(SockAddr::Link(link)) = interface.address {
-            let bytes = link.addr();
+        if let Some(iface_address) = interface.address {
+            if let Some(link) = iface_address.as_link_addr() {
+                let bytes = link.addr();
 
-            if &bytes == mac {
-                return Ok(Some(interface.interface_name));
+                if bytes == Some(*mac) {
+                    return Ok(Some(interface.interface_name));
+                }
             }
         }
     }
