Index: trust-dns-resolver/src/hosts.rs
===================================================================
--- trust-dns-resolver.orig/src/hosts.rs
+++ trust-dns-resolver/src/hosts.rs
@@ -180,79 +180,3 @@ pub(crate) fn read_hosts_conf<P: AsRef<P
     Hosts::default().read_hosts_conf(file)
 }
 
-#[cfg(any(unix, windows))]
-#[cfg(test)]
-mod tests {
-    use super::*;
-    use std::env;
-    use std::net::{Ipv4Addr, Ipv6Addr};
-
-    fn tests_dir() -> String {
-        let server_path = env::var("TDNS_WORKSPACE_ROOT").unwrap_or_else(|_| "../..".to_owned());
-        format! {"{}/crates/resolver/tests", server_path}
-    }
-
-    #[test]
-    fn test_read_hosts_conf() {
-        let path = format!("{}/hosts", tests_dir());
-        let hosts = read_hosts_conf(&path).unwrap();
-
-        let name = Name::from_str("localhost").unwrap();
-        let rdatas = hosts
-            .lookup_static_host(&Query::query(name.clone(), RecordType::A))
-            .unwrap()
-            .iter()
-            .map(ToOwned::to_owned)
-            .collect::<Vec<RData>>();
-
-        assert_eq!(rdatas, vec![RData::A(Ipv4Addr::new(127, 0, 0, 1))]);
-
-        let rdatas = hosts
-            .lookup_static_host(&Query::query(name, RecordType::AAAA))
-            .unwrap()
-            .iter()
-            .map(ToOwned::to_owned)
-            .collect::<Vec<RData>>();
-
-        assert_eq!(
-            rdatas,
-            vec![RData::AAAA(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1))]
-        );
-
-        let name = Name::from_str("broadcasthost").unwrap();
-        let rdatas = hosts
-            .lookup_static_host(&Query::query(name, RecordType::A))
-            .unwrap()
-            .iter()
-            .map(ToOwned::to_owned)
-            .collect::<Vec<RData>>();
-        assert_eq!(rdatas, vec![RData::A(Ipv4Addr::new(255, 255, 255, 255))]);
-
-        let name = Name::from_str("example.com").unwrap();
-        let rdatas = hosts
-            .lookup_static_host(&Query::query(name, RecordType::A))
-            .unwrap()
-            .iter()
-            .map(ToOwned::to_owned)
-            .collect::<Vec<RData>>();
-        assert_eq!(rdatas, vec![RData::A(Ipv4Addr::new(10, 0, 1, 102))]);
-
-        let name = Name::from_str("a.example.com").unwrap();
-        let rdatas = hosts
-            .lookup_static_host(&Query::query(name, RecordType::A))
-            .unwrap()
-            .iter()
-            .map(ToOwned::to_owned)
-            .collect::<Vec<RData>>();
-        assert_eq!(rdatas, vec![RData::A(Ipv4Addr::new(10, 0, 1, 111))]);
-
-        let name = Name::from_str("b.example.com").unwrap();
-        let rdatas = hosts
-            .lookup_static_host(&Query::query(name, RecordType::A))
-            .unwrap()
-            .iter()
-            .map(ToOwned::to_owned)
-            .collect::<Vec<RData>>();
-        assert_eq!(rdatas, vec![RData::A(Ipv4Addr::new(10, 0, 1, 111))]);
-    }
-}
Index: trust-dns-resolver/src/system_conf/unix.rs
===================================================================
--- trust-dns-resolver.orig/src/system_conf/unix.rs
+++ trust-dns-resolver/src/system_conf/unix.rs
@@ -146,11 +146,6 @@ mod tests {
         ]
     }
 
-    fn tests_dir() -> String {
-        let server_path = env::var("TDNS_WORKSPACE_ROOT").unwrap_or_else(|_| "../..".to_owned());
-        format!("{}/crates/resolver/tests", server_path)
-    }
-
     #[test]
     #[allow(clippy::redundant_clone)]
     fn test_name_server() {
@@ -189,11 +184,4 @@ mod tests {
         assert_eq!(cfg, parsed.0);
         assert_eq!(ResolverOpts::default(), parsed.1);
     }
-
-    #[test]
-    fn test_read_resolv_conf() {
-        read_resolv_conf(format!("{}/resolv.conf-simple", tests_dir())).expect("simple failed");
-        read_resolv_conf(format!("{}/resolv.conf-macos", tests_dir())).expect("macos failed");
-        read_resolv_conf(format!("{}/resolv.conf-linux", tests_dir())).expect("linux failed");
-    }
 }
