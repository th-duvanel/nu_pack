Index: petgraph/Cargo.toml
===================================================================
--- petgraph.orig/Cargo.toml
+++ petgraph/Cargo.toml
@@ -72,7 +72,10 @@ version = "0.10.1"
 default-features = false
 
 [dev-dependencies.rand]
-version = "0.5.5"
+version = "0.8"
+
+[dev-dependencies.rand_chacha]
+version = "0.3"
 
 [features]
 all = [
Index: petgraph/tests/unionfind.rs
===================================================================
--- petgraph.orig/tests/unionfind.rs
+++ petgraph/tests/unionfind.rs
@@ -2,7 +2,8 @@ extern crate petgraph;
 extern crate rand;
 
 use petgraph::unionfind::UnionFind;
-use rand::{thread_rng, ChaChaRng, Rng, SeedableRng};
+use rand::{thread_rng, Rng, SeedableRng};
+use rand_chacha::ChaChaRng;
 use std::collections::HashSet;
 
 #[test]
@@ -67,8 +68,8 @@ fn uf_rand() {
     let mut rng = ChaChaRng::from_rng(thread_rng()).unwrap();
     let mut u = UnionFind::new(n);
     for _ in 0..100 {
-        let a = rng.gen_range(0, n);
-        let b = rng.gen_range(0, n);
+        let a = rng.gen_range(0.. n);
+        let b = rng.gen_range(0.. n);
         let ar = u.find(a);
         let br = u.find(b);
         assert_eq!(ar != br, u.union(a, b));
Index: petgraph/benches/serialize.rs
===================================================================
--- petgraph.orig/benches/serialize.rs
+++ petgraph/benches/serialize.rs
@@ -21,8 +21,8 @@ mod serialize {
 
         let mut rng = rand::thread_rng();
         g.extend_with_edges((0..NUM_EDGES).map(|_| {
-            let first = rng.gen_range(0, NUM_NODES + NUM_HOLES);
-            let second = rng.gen_range(0, NUM_NODES + NUM_HOLES - 1);
+            let first = rng.gen_range(0.. NUM_NODES + NUM_HOLES);
+            let second = rng.gen_range(0.. NUM_NODES + NUM_HOLES - 1);
             let second = second + (second >= first) as usize;
             let weight: u32 = rng.gen();
             (indices[first], indices[second], weight)
@@ -30,7 +30,7 @@ mod serialize {
 
         // Remove nodes to make the structure a bit more interesting
         while g.node_count() > NUM_NODES {
-            let idx = rng.gen_range(0, indices.len());
+            let idx = rng.gen_range(0.. indices.len());
             g.remove_node(indices[idx]);
         }
 
