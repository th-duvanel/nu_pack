diff --git a/Cargo.toml b/Cargo.toml
index 12b487e..d28e1a5 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -29,7 +29,7 @@ version = "0.9.0"
 
 [dependencies.shared_child]
 version = "1"
-[dev-dependencies.tempdir]
-version = "0.3.7"
+[dev-dependencies.tempfile]
+version = "3"
 [target."cfg(unix)".dependencies.libc]
 version = "0.2.43"
diff --git a/src/test.rs b/src/test.rs
index 9e89f3f..e83aa84 100644
--- a/src/test.rs
+++ b/src/test.rs
@@ -11,7 +11,7 @@ use std::path::{Path, PathBuf};
 use std::process::Command;
 use std::str;
 use std::sync::{Arc, Once};
-use tempdir::TempDir;
+use tempfile::TempDir;
 
 // Include a copy of the sh function, because we have a lot of old tests that
 // use it, and it's a lot easier than managing a circular dependency between
@@ -249,7 +249,7 @@ fn test_null() {
 
 #[test]
 fn test_path() {
-    let dir = TempDir::new("test_path").unwrap();
+    let dir = TempDir::new().unwrap();
     let input_file = dir.path().join("input_file");
     let output_file = dir.path().join("output_file");
     File::create(&input_file)
@@ -286,7 +286,7 @@ fn test_swapping() {
 
 #[test]
 fn test_file() {
-    let dir = TempDir::new("test_file").unwrap();
+    let dir = TempDir::new().unwrap();
     let file = dir.path().join("file");
     File::create(&file).unwrap().write_all(b"example").unwrap();
     let expr = cmd!(path_to_exe("cat")).stdin_file(File::open(&file).unwrap());
@@ -343,7 +343,7 @@ fn test_dir() {
 
     // Now create a temp dir and make sure we can set dir to it. This
     // also tests the interaction of `dir` and relative exe paths.
-    let dir = TempDir::new("duct_test").unwrap();
+    let dir = TempDir::new().unwrap();
     let pwd_output = pwd.dir(dir.path()).read().unwrap();
     let pwd_path = Path::new(&pwd_output);
     // pwd_path isn't totally canonical on Windows, because it
