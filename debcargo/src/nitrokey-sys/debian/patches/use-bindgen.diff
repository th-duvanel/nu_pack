Index: nitrokey-sys/Cargo.toml
===================================================================
--- nitrokey-sys.orig/Cargo.toml
+++ nitrokey-sys/Cargo.toml
@@ -23,3 +23,6 @@ readme = "README.md"
 categories = ["external-ffi-bindings"]
 license = "LGPL-3.0"
 repository = "https://git.ireas.org/nitrokey-sys-rs/"
+
+[build-dependencies]
+bindgen = "0.59"
Index: nitrokey-sys/build.rs
===================================================================
--- nitrokey-sys.orig/build.rs
+++ nitrokey-sys/build.rs
@@ -1,3 +1,18 @@
+use std::env;
+use std::path::PathBuf;
+
 fn main() {
     println!("cargo:rustc-link-lib=nitrokey");
+
+    println!("cargo:rerun-if-changed=wrapper.h");
+
+    let bindings = bindgen::Builder::default()
+        .header("wrapper.h")
+        .generate()
+        .expect("Unable to generate bindings");
+
+    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
+    bindings
+        .write_to_file(out_path.join("bindings.rs"))
+        .expect("Couldn't write bindings!");
 }
Index: nitrokey-sys/src/lib.rs
===================================================================
--- nitrokey-sys.orig/src/lib.rs
+++ nitrokey-sys/src/lib.rs
@@ -2,9 +2,7 @@
 #![allow(non_camel_case_types)]
 #![allow(non_snake_case)]
 
-mod ffi;
-
-pub use crate::ffi::*;
+include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
 
 #[cfg(test)]
 mod tests {
Index: nitrokey-sys/wrapper.h
===================================================================
--- /dev/null
+++ nitrokey-sys/wrapper.h
@@ -0,0 +1 @@
+#include <libnitrokey/NK_C_API.h>
