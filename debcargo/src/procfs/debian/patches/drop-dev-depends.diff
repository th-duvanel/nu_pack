Index: procfs/src/process/tests.rs
===================================================================
--- procfs.orig/src/process/tests.rs
+++ procfs/src/process/tests.rs
@@ -443,7 +443,7 @@ fn test_nopanic() {
     assert!(inner().is_err());
 }
 
-#[test]
+/*#[test]
 fn test_procinfo() {
     // test to see that this crate and procinfo give mostly the same results
 
@@ -468,7 +468,7 @@ fn test_procinfo() {
     //assert_eq!(me_stat.flags, procinfo_stat.flags, "procfs:{:?} procinfo:{:?}", crate::StatFlags::from_bits(me_stat.flags), crate::StatFlags::from_bits(procinfo_stat.flags));
     assert_eq!(me_stat.pid, procinfo_stat.pid);
     assert_eq!(me_stat.ppid, procinfo_stat.ppid);
-}
+}*/
 
 #[test]
 fn test_statm() {
Index: procfs/Cargo.toml
===================================================================
--- procfs.orig/Cargo.toml
+++ procfs/Cargo.toml
@@ -82,12 +82,6 @@ optional = true
 [dev-dependencies.criterion]
 version = "0.3"
 
-[dev-dependencies.failure]
-version = "0.1"
-
-[dev-dependencies.procinfo]
-version = "0.4.2"
-
 [features]
 default = [
     "chrono",
Index: procfs/src/lib.rs
===================================================================
--- procfs.orig/src/lib.rs
+++ procfs/src/lib.rs
@@ -1367,7 +1367,7 @@ mod tests {
         }
     }
 
-    /// Test that our error type can be easily used with the `failure` crate
+    /*/// Test that our error type can be easily used with the `failure` crate
     #[test]
     fn test_failure() {
         fn inner() -> Result<(), failure::Error> {
@@ -1385,5 +1385,5 @@ mod tests {
         let _ = inner2();
         // Unwrapping this failure should produce a message that looks like:
         // thread 'tests::test_failure' panicked at 'called `Result::unwrap()` on an `Err` value: PermissionDenied(Some("/proc/1/maps"))', src/libcore/result.rs:997:5
-    }
+    }*/
 }
