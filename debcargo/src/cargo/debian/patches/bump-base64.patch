From 855b1ad050dc486cf6e8a9c35854264740222df7 Mon Sep 17 00:00:00 2001
From: Ed Page <eopage@gmail.com>
Date: Tue, 28 Feb 2023 15:55:19 -0600
Subject: [PATCH] chore: Update base64
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This removes one of cargo's duplicate dependencies

Signed-off-by: Fabian Gr√ºnbichler <f.gruenbichler@proxmox.com>
---
 Cargo.toml                           |  2 +-
 src/cargo/sources/git/known_hosts.rs | 16 +++++++++-------
 2 files changed, 10 insertions(+), 8 deletions(-)

Index: cargo/Cargo.toml
===================================================================
--- cargo.orig/Cargo.toml
+++ cargo/Cargo.toml
@@ -35,7 +35,7 @@ doc = false
 version = "1.0.47"
 
 [dependencies.base64]
-version = "0.13.1"
+version = "0.21"
 
 [dependencies.bytesize]
 version = "1.0"
Index: cargo/src/cargo/sources/git/known_hosts.rs
===================================================================
--- cargo.orig/src/cargo/sources/git/known_hosts.rs
+++ cargo/src/cargo/sources/git/known_hosts.rs
@@ -20,6 +20,9 @@
 //! and revoked markers. See "FIXME" comments littered in this file.
 
 use crate::util::config::{Config, Definition, Value};
+use base64::engine::general_purpose::STANDARD;
+use base64::engine::general_purpose::STANDARD_NO_PAD;
+use base64::Engine as _;
 use git2::cert::{Cert, SshHostKeyType};
 use git2::CertificateCheckStatus;
 use hmac::Mac;
@@ -358,7 +361,7 @@ fn check_ssh_known_hosts(
         .collect();
     for (patterns, key_type, key) in BUNDLED_KEYS {
         if !configured_hosts.contains(*patterns) {
-            let key = base64::decode(key).unwrap();
+            let key = STANDARD.decode(key).unwrap();
             known_hosts.push(KnownHost {
                 location: KnownHostLocation::Bundled,
                 patterns: patterns.to_string(),
@@ -406,9 +409,8 @@ fn check_ssh_known_hosts_loaded(
     // support SHA256.
     let mut remote_fingerprint = cargo_util::Sha256::new();
     remote_fingerprint.update(remote_host_key.clone());
-    let remote_fingerprint =
-        base64::encode_config(remote_fingerprint.finish(), base64::STANDARD_NO_PAD);
-    let remote_host_key_encoded = base64::encode(remote_host_key);
+    let remote_fingerprint = STANDARD_NO_PAD.encode(remote_fingerprint.finish());
+    let remote_host_key_encoded = STANDARD.encode(remote_host_key);
 
     for known_host in known_hosts {
         // The key type from libgit2 needs to match the key type from the host file.
@@ -607,8 +609,8 @@ impl KnownHost {
 
 fn hashed_hostname_matches(host: &str, hashed: &str) -> bool {
     let Some((b64_salt, b64_host)) = hashed.split_once('|') else { return false; };
-    let Ok(salt) = base64::decode(b64_salt) else { return false; };
-    let Ok(hashed_host) = base64::decode(b64_host) else { return false; };
+    let Ok(salt) = STANDARD.decode(b64_salt) else { return false; };
+    let Ok(hashed_host) = STANDARD.decode(b64_host) else { return false; };
     let Ok(mut mac) = hmac::Hmac::<sha1::Sha1>::new_from_slice(&salt) else { return false; };
     mac.update(host.as_bytes());
     let result = mac.finalize().into_bytes();
@@ -660,7 +662,7 @@ fn parse_known_hosts_line(line: &str, lo
 
     let patterns = parts.next()?;
     let key_type = parts.next()?;
-    let key = parts.next().map(base64::decode)?.ok()?;
+    let key = parts.next().map(|p| STANDARD.decode(p))?.ok()?;
     Some(KnownHost {
         line_type,
         location,
