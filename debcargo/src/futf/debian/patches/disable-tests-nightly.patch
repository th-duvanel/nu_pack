Index: futf/src/lib.rs
===================================================================
--- futf.orig/src/lib.rs
+++ futf/src/lib.rs
@@ -4,7 +4,7 @@
 // option. This file may not be copied, modified, or distributed
 // except according to those terms.
 
-#![cfg_attr(test, feature(test))]
+//#![cfg_attr(test, feature(test))]
 
 #[macro_use]
 extern crate debug_unreachable;
@@ -12,8 +12,8 @@ extern crate debug_unreachable;
 #[macro_use]
 extern crate mac;
 
-#[cfg(test)]
-extern crate test as std_test;
+//#[cfg(test)]
+//extern crate test as std_test;
 
 use std::{slice, char};
 
Index: futf/src/test.rs
===================================================================
--- futf.orig/src/test.rs
+++ futf/src/test.rs
@@ -8,7 +8,7 @@ use super::{Meaning, Byte, classify, dec
 
 use std::borrow::ToOwned;
 use std::io::Write;
-use std_test::Bencher;
+//use std_test::Bencher;
 
 #[test]
 fn classify_all_bytes() {
@@ -248,7 +248,7 @@ static BOUNDARY: &'static [bool]
     = &[false, true, true, false, false, true, true, true,
         true, false, false, true, true, true, false, false];
 
-#[bench]
+/*#[bench]
 fn std_utf8_check(b: &mut Bencher) {
     b.iter(|| {
         assert!(IXES.iter().zip(BOUNDARY.iter()).all(|(&ix, &expect)| {
@@ -267,4 +267,4 @@ fn futf_check(b: &mut Bencher) {
             expect == (::classify(TEXT.as_bytes(), ix).unwrap().rewind == 0)
         }));
     });
-}
+}*/
