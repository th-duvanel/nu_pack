Index: tree-sitter/binding_rust/build.rs
===================================================================
--- tree-sitter.orig/binding_rust/build.rs
+++ tree-sitter/binding_rust/build.rs
@@ -1,5 +1,6 @@
 use std::path::{Path, PathBuf};
-use std::{env, fs};
+use std::env;
+use pkg_config;
 
 fn main() {
     println!("cargo:rerun-if-env-changed=TREE_SITTER_STATIC_ANALYSIS");
@@ -17,20 +18,10 @@ fn main() {
         }
     }
 
-    let src_path = Path::new("src");
-    for entry in fs::read_dir(&src_path).unwrap() {
-        let entry = entry.unwrap();
-        let path = src_path.join(entry.file_name());
-        println!("cargo:rerun-if-changed={}", path.to_str().unwrap());
-    }
-
-    cc::Build::new()
-        .flag_if_supported("-std=c99")
-        .flag_if_supported("-Wno-unused-parameter")
-        .include(src_path)
-        .include("include")
-        .file(src_path.join("lib.c"))
-        .compile("tree-sitter");
+    pkg_config::Config::new()
+        .statik(true)
+        .probe("tree-sitter")
+        .unwrap();
 }
 
 fn which(exe_name: impl AsRef<Path>) -> Option<PathBuf> {
Index: tree-sitter/Cargo.toml
===================================================================
--- tree-sitter.orig/Cargo.toml
+++ tree-sitter/Cargo.toml
@@ -48,5 +48,5 @@ optional = true
 [dependencies.regex]
 version = "1"
 
-[build-dependencies.cc]
-version = "^1.0.58"
+[build-dependencies.pkg-config]
+version = "0.3"
Index: tree-sitter/binding_rust/lib.rs
===================================================================
--- tree-sitter.orig/binding_rust/lib.rs
+++ tree-sitter/binding_rust/lib.rs
@@ -33,7 +33,7 @@ pub const LANGUAGE_VERSION: usize = ffi:
 #[doc(alias = "TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION")]
 pub const MIN_COMPATIBLE_LANGUAGE_VERSION: usize = ffi::TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION;
 
-pub const PARSER_HEADER: &'static str = include_str!("../include/tree_sitter/parser.h");
+pub const PARSER_HEADER: &'static str = include_str!("/usr/include/tree_sitter/parser.h");
 
 /// An opaque object that defines how to parse a particular language. The code for each
 /// `Language` is generated by the Tree-sitter CLI.
