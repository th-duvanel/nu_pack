Index: tera/src/parser/tests/lexer.rs
===================================================================
--- tera.orig/src/parser/tests/lexer.rs
+++ tera/src/parser/tests/lexer.rs
@@ -644,7 +644,7 @@ fn lex_template() {
     .is_ok());
 }
 
-#[test]
+/*#[test]
 fn lex_extends_with_imports() {
     let sample = r#"
 {% extends "base.html" %}
@@ -656,10 +656,10 @@ fn lex_extends_with_imports() {
 {% import "macros/location.html" as location %}
          "#;
     assert_lex_rule!(Rule::template, sample);
-}
+}*/
 
 // https://github.com/Keats/tera/issues/379
-#[test]
+/*#[test]
 fn lex_requires_whitespace_between_things() {
     // All the ones below should fail parsing
     let inputs = vec![
@@ -685,4 +685,4 @@ fn lex_requires_whitespace_between_thing
         println!("{:?}", i);
         assert!(res.is_err());
     }
-}
+}*/
Index: tera/src/template.rs
===================================================================
--- tera.orig/src/template.rs
+++ tera/src/template.rs
@@ -120,7 +120,7 @@ mod tests {
         Template::new("hello", None, "Hello {{ world }}.").unwrap();
     }
 
-    #[test]
+    /*#[test]
     fn can_find_parent_template() {
         let tpl = Template::new("hello", None, "{% extends \"base.html\" %}").unwrap();
 
@@ -151,7 +151,7 @@ mod tests {
         assert_eq!(tpl.parent.unwrap(), "base.html".to_string());
         assert!(tpl.blocks.contains_key("hey"));
         assert!(tpl.blocks.contains_key("extrahey"));
-    }
+    }*/
 
     #[test]
     fn can_find_macros() {
Index: tera/src/tera.rs
===================================================================
--- tera.orig/src/tera.rs
+++ tera/src/tera.rs
@@ -1202,7 +1202,7 @@ mod tests {
         assert!(my_tera.testers.contains_key("hello"));
     }
 
-    #[test]
+    /*#[test]
     fn can_load_from_glob() {
         let tera = Tera::new("examples/basic/templates/**/*").unwrap();
         assert!(tera.get_template("base.html").is_ok());
@@ -1234,9 +1234,9 @@ mod tests {
 
         assert!(tera.get_template("base.html").is_ok());
         assert!(tera.get_template("one").is_ok());
-    }
+    } */
 
-    #[should_panic]
+    /*#[should_panic]
     #[test]
     fn test_can_only_parse_templates() {
         let mut tera = Tera::parse("examples/basic/templates/**/*").unwrap();
@@ -1249,7 +1249,7 @@ mod tests {
         // Will panic here as we changed the parent and it won't be able
         // to build the inheritance chain in this case
         tera.build_inheritance_chains().unwrap();
-    }
+    }*/
 
     // https://github.com/Keats/tera/issues/380
     #[test]
