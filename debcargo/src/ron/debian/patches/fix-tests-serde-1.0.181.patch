This patch is based on the upstream commit described below, adapted for use
in the Debian package by Peter Michael Green.

commit d5a01dd3a56495cd1f19883f875cede910ce786e
Author: Juniper Tyree <50025784+juntyr@users.noreply.github.com>
Date:   Sun Aug 6 15:34:23 2023 +0300

    Update adjacent enum non-roundtrip tests to match serde-rs/serde#2505 (#471)
    
    Update adjacent enum non-roundtrip tests to match https://github.com/serde-rs/serde/pull/2505

Index: ron/tests/123_enum_representation.rs
===================================================================
--- ron.orig/tests/123_enum_representation.rs
+++ ron/tests/123_enum_representation.rs
@@ -107,14 +107,14 @@ fn test_adjacently_a_ser() {
         bar: 2,
         different: Inner::Foo,
     };
-    let e = "(type:\"VariantA\",content:(foo:1,bar:2,different:Foo))";
+    let e = "(type:VariantA,content:(foo:1,bar:2,different:Foo))";
     test_ser(&v, e);
 }
 
 #[test]
 fn test_adjacently_b_ser() {
     let v = EnumStructAdjacently::VariantB { foo: 1, bar: 2 };
-    let e = "(type:\"VariantB\",content:(foo:1,bar:2))";
+    let e = "(type:VariantB,content:(foo:1,bar:2))";
     test_ser(&v, e);
 }
 
@@ -174,7 +174,7 @@ fn test_internally_b_de() {
 
 #[test]
 fn test_adjacently_a_de() {
-    let s = "(type:\"VariantA\",content:(foo:1,bar:2,different:Foo))";
+    let s = "(type:VariantA,content:(foo:1,bar:2,different:Foo))";
     let e = EnumStructAdjacently::VariantA {
         foo: 1,
         bar: 2,
@@ -185,7 +185,7 @@ fn test_adjacently_a_de() {
 
 #[test]
 fn test_adjacently_b_de() {
-    let s = "(type:\"VariantB\",content:(foo:1,bar:2))";
+    let s = "(type:VariantB,content:(foo:1,bar:2))";
     let e = EnumStructAdjacently::VariantB { foo: 1, bar: 2 };
     test_de(s, e);
 }
Index: ron/tests/207_adjacently_tagged_enum.rs
===================================================================
--- ron.orig/tests/207_adjacently_tagged_enum.rs
+++ ron/tests/207_adjacently_tagged_enum.rs
@@ -14,7 +14,7 @@ fn test_adjacently_tagged() {
 
     let ron_string = to_string(&source).unwrap();
 
-    assert_eq!(ron_string, "(type:\"Index\",data:1)");
+    assert_eq!(ron_string, "(type:Index,data:1)");
 
     let deserialized = from_str::<TestEnum>(&ron_string).unwrap();
 
Index: ron/Cargo.toml
===================================================================
--- ron.orig/Cargo.toml
+++ ron/Cargo.toml
@@ -50,7 +50,7 @@ version = "1.0.2"
 features = ["serde-1"]
 
 [dependencies.serde]
-version = "1.0.60"
+version = "1.0.181"
 features = ["serde_derive"]
 
 [dev-dependencies.serde_bytes]
