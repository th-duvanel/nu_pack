Index: fat-macho/src/read.rs
===================================================================
--- fat-macho.orig/src/read.rs
+++ fat-macho/src/read.rs
@@ -44,87 +44,3 @@ impl<'a> std::ops::DerefMut for FatReade
         &mut self.fat
     }
 }
-
-#[cfg(test)]
-mod test {
-    use std::fs;
-
-    use goblin::Object;
-
-    use super::FatReader;
-    use crate::error::Error;
-
-    #[test]
-    fn test_fat_reader_dylib() {
-        let buf = fs::read("tests/fixtures/simplefat.dylib").unwrap();
-        let reader = FatReader::new(&buf);
-        assert!(reader.is_ok());
-    }
-
-    #[test]
-    fn test_fat_reader_exe() {
-        let buf = fs::read("tests/fixtures/simplefat").unwrap();
-        let reader = FatReader::new(&buf).unwrap();
-        assert_eq!(2, reader.narches);
-
-        let buf = fs::read("tests/fixtures/hellofat").unwrap();
-        let reader = FatReader::new(&buf).unwrap();
-        assert_eq!(3, reader.narches);
-    }
-
-    #[test]
-    fn test_fat_reader_ar() {
-        let buf = fs::read("tests/fixtures/simplefat.a").unwrap();
-        let reader = FatReader::new(&buf);
-        assert!(reader.is_ok());
-    }
-
-    #[test]
-    fn test_fat_reader_not_fat() {
-        let buf = fs::read("tests/fixtures/thin_x86_64").unwrap();
-        let reader = FatReader::new(&buf);
-        assert!(reader.is_err());
-        assert!(matches!(reader.unwrap_err(), Error::NotFatBinary));
-
-        let buf = fs::read("tests/fixtures/thin_arm64").unwrap();
-        let reader = FatReader::new(&buf);
-        assert!(reader.is_err());
-        assert!(matches!(reader.unwrap_err(), Error::NotFatBinary));
-    }
-
-    #[test]
-    fn test_fat_reader_extract_dylib() {
-        let buf = fs::read("tests/fixtures/simplefat.dylib").unwrap();
-        let reader = FatReader::new(&buf).unwrap();
-        let x86_64 = reader.extract("x86_64").unwrap();
-        let x86_64_obj = Object::parse(x86_64).unwrap();
-        assert!(matches!(x86_64_obj, Object::Mach(_)));
-        let arm64 = reader.extract("arm64").unwrap();
-        let arm64_obj = Object::parse(arm64).unwrap();
-        assert!(matches!(arm64_obj, Object::Mach(_)));
-    }
-
-    #[test]
-    fn test_fat_reader_extract_exe() {
-        let buf = fs::read("tests/fixtures/simplefat").unwrap();
-        let reader = FatReader::new(&buf).unwrap();
-        let x86_64 = reader.extract("x86_64").unwrap();
-        let x86_64_obj = Object::parse(x86_64).unwrap();
-        assert!(matches!(x86_64_obj, Object::Mach(_)));
-        let arm64 = reader.extract("arm64").unwrap();
-        let arm64_obj = Object::parse(arm64).unwrap();
-        assert!(matches!(arm64_obj, Object::Mach(_)));
-    }
-
-    #[test]
-    fn test_fat_reader_extract_ar() {
-        let buf = fs::read("tests/fixtures/simplefat.a").unwrap();
-        let reader = FatReader::new(&buf).unwrap();
-        let x86_64 = reader.extract("x86_64").unwrap();
-        let x86_64_obj = Object::parse(x86_64).unwrap();
-        assert!(matches!(x86_64_obj, Object::Archive(_)));
-        let arm64 = reader.extract("arm64").unwrap();
-        let arm64_obj = Object::parse(arm64).unwrap();
-        assert!(matches!(arm64_obj, Object::Archive(_)));
-    }
-}
Index: fat-macho/src/write.rs
===================================================================
--- fat-macho.orig/src/write.rs
+++ fat-macho/src/write.rs
@@ -392,90 +392,3 @@ fn get_align_from_cpu_types(cpu_type: Cp
     }
     0
 }
-
-#[cfg(test)]
-mod tests {
-    use std::fs;
-
-    use super::FatWriter;
-    use crate::read::FatReader;
-
-    #[test]
-    fn test_fat_writer_add_exe() {
-        let mut fat = FatWriter::new();
-        let f1 = fs::read("tests/fixtures/thin_x86_64").unwrap();
-        let f2 = fs::read("tests/fixtures/thin_arm64").unwrap();
-        fat.add(f1).unwrap();
-        fat.add(f2).unwrap();
-        let mut out = Vec::new();
-        fat.write_to(&mut out).unwrap();
-
-        let reader = FatReader::new(&out);
-        assert!(reader.is_ok());
-
-        fat.write_to_file("tests/output/fat").unwrap();
-    }
-
-    #[test]
-    fn test_fat_writer_add_duplicated_arch() {
-        let mut fat = FatWriter::new();
-        let f1 = fs::read("tests/fixtures/thin_x86_64").unwrap();
-        fat.add(f1.clone()).unwrap();
-        assert!(fat.add(f1).is_err());
-    }
-
-    #[test]
-    fn test_fat_writer_add_fat() {
-        let mut fat = FatWriter::new();
-        let f1 = fs::read("tests/fixtures/simplefat").unwrap();
-        fat.add(f1).unwrap();
-        assert!(fat.exists("x86_64"));
-        assert!(fat.exists("arm64"));
-    }
-
-    #[test]
-    fn test_fat_writer_add_archive() {
-        let mut fat = FatWriter::new();
-        let f1 = fs::read("tests/fixtures/thin_x86_64.a").unwrap();
-        let f2 = fs::read("tests/fixtures/thin_arm64.a").unwrap();
-        fat.add(f1).unwrap();
-        fat.add(f2).unwrap();
-        let mut out = Vec::new();
-        fat.write_to(&mut out).unwrap();
-
-        let reader = FatReader::new(&out);
-        assert!(reader.is_ok());
-
-        fat.write_to_file("tests/output/fat.a").unwrap();
-    }
-
-    #[cfg(feature = "bitcode")]
-    #[test]
-    fn test_fat_writer_add_llvm_bitcode() {
-        let mut fat = FatWriter::new();
-        let f1 = fs::read("tests/fixtures/thin_x86_64.bc").unwrap();
-        let f2 = fs::read("tests/fixtures/thin_arm64.bc").unwrap();
-        fat.add(f1).unwrap();
-        fat.add(f2).unwrap();
-        let mut out = Vec::new();
-        fat.write_to(&mut out).unwrap();
-
-        let reader = FatReader::new(&out);
-        assert!(reader.is_ok());
-
-        fat.write_to_file("tests/output/fat_bc").unwrap();
-    }
-
-    #[test]
-    fn test_fat_writer_remove() {
-        let mut fat = FatWriter::new();
-        let f1 = fs::read("tests/fixtures/thin_x86_64").unwrap();
-        let f2 = fs::read("tests/fixtures/thin_arm64").unwrap();
-        fat.add(f1).unwrap();
-        fat.add(f2).unwrap();
-        let arm64 = fat.remove("arm64");
-        assert!(arm64.is_some());
-        assert!(fat.exists("x86_64"));
-        assert!(!fat.exists("arm64"));
-    }
-}
