--- a/Cargo.toml
+++ b/Cargo.toml
@@ -11,7 +11,7 @@
 
 [package]
 edition = "2018"
-name = "findutils"
+name = "rust_findutils"
 version = "0.4.0"
 authors = ["uutils developers"]
 description = "Rust implementation of GNU findutils"
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -269,7 +269,7 @@
 ]
 
 [[package]]
-name = "findutils"
+name = "rust_findutils"
 version = "0.4.0"
 dependencies = [
  "assert_cmd",
--- a/src/find/main.rs
+++ b/src/find/main.rs
@@ -7,6 +7,6 @@
 fn main() {
     let args = std::env::args().collect::<Vec<String>>();
     let strs: Vec<&str> = args.iter().map(std::convert::AsRef::as_ref).collect();
-    let deps = findutils::find::StandardDependencies::new();
-    std::process::exit(findutils::find::find_main(&strs, &deps));
+    let deps = rust_findutils::find::StandardDependencies::new();
+    std::process::exit(rust_findutils::find::find_main(&strs, &deps));
 }
--- a/tests/common/test_helpers.rs
+++ b/tests/common/test_helpers.rs
@@ -11,8 +11,8 @@
 use std::vec::Vec;
 use walkdir::{DirEntry, WalkDir};
 
-use findutils::find::matchers::MatcherIO;
-use findutils::find::Dependencies;
+use rust_findutils::find::matchers::MatcherIO;
+use rust_findutils::find::Dependencies;
 
 /// A copy of `find::tests::FakeDependencies`.
 /// TODO: find out how to share #[cfg(test)] functions/structs between unit
--- a/tests/exec_unit_tests.rs
+++ b/tests/exec_unit_tests.rs
@@ -8,7 +8,7 @@
 /// ! But as the tests require running an external executable, they need to be run
 /// ! as integration tests so we can ensure that our testing-commandline binary
 /// ! has been built.
-extern crate findutils;
+extern crate ruts-findutils;
 extern crate walkdir;
 
 use std::env;
@@ -20,8 +20,8 @@
 use common::test_helpers::{
     fix_up_slashes, get_dir_entry_for, path_to_testing_commandline, FakeDependencies,
 };
-use findutils::find::matchers::exec::SingleExecMatcher;
-use findutils::find::matchers::Matcher;
+use rust_findutils::find::matchers::exec::SingleExecMatcher;
+use rust_findutils::find::matchers::Matcher;
 
 mod common;
 
--- a/tests/find_exec_tests.rs
+++ b/tests/find_exec_tests.rs
@@ -9,7 +9,7 @@
 /// ! But as the tests require running an external executable, they need to be run
 /// ! as integration tests so we can ensure that our testing-commandline binary
 /// ! has been built.
-extern crate findutils;
+extern crate rust_findutils;
 extern crate tempfile;
 extern crate walkdir;
 
@@ -19,7 +19,7 @@
 use tempfile::Builder;
 
 use common::test_helpers::{fix_up_slashes, path_to_testing_commandline, FakeDependencies};
-use findutils::find::find_main;
+use rust_findutils::find::find_main;
 
 mod common;
 #[test]
--- a/src/xargs/main.rs
+++ b/src/xargs/main.rs
@@ -6,7 +6,7 @@
 
 fn main() {
     let args = std::env::args().collect::<Vec<String>>();
-    std::process::exit(findutils::xargs::xargs_main(
+    std::process::exit(rust_findutils::xargs::xargs_main(
         &args
             .iter()
             .map(std::convert::AsRef::as_ref)
