Description: workaround glibc posix violation with regards to suseconds_t
 According to posix tv_usec has type suseconds_t, however glibc with time64
 violates this defining tv_usec as time_t (a 64-bit type) while defining
 suseconds_t as a 32-bit type.

 Most C programs don't care about this difference because C allows implicit
 conversion between different sized integers but rust does not..

 This patch works around the issue by converting the value to a type
 inffered by the compiler using the "as" operator.
Author: Peter Michael Green <plugwash@debian.org>

--- rust-unix-socket-0.5.0.orig/src/lib.rs
+++ rust-unix-socket-0.5.0/src/lib.rs
@@ -119,7 +119,7 @@ impl Inner {
                 };
                 let mut timeout = libc::timeval {
                     tv_sec: secs,
-                    tv_usec: usecs,
+                    tv_usec: usecs as _,
                 };
                 if timeout.tv_sec == 0 && timeout.tv_usec == 0 {
                     timeout.tv_usec = 1;
