Index: condure/Cargo.toml
===================================================================
--- condure.orig/Cargo.toml
+++ condure/Cargo.toml
@@ -64,7 +64,7 @@ harness = false
 version = "0.7"
 
 [dependencies.base64]
-version = "0.13"
+version = "0.21"
 
 [dependencies.clap]
 version = "4.3"
Index: condure/src/connection.rs
===================================================================
--- condure.orig/src/connection.rs
+++ condure/src/connection.rs
@@ -78,6 +78,7 @@ use std::task::Context;
 use std::task::Poll;
 use std::thread;
 use std::time::{Duration, Instant};
+use base64::Engine;
 
 const URI_SIZE_MAX: usize = 4096;
 const HEADERS_MAX: usize = 64;
@@ -124,7 +125,7 @@ fn gen_ws_key() -> ArrayString<WS_KEY_MA
 
     let mut output = [0; WS_KEY_MAX];
 
-    let size = base64::encode_config_slice(nonce, base64::STANDARD, &mut output);
+    let size = base64::engine::general_purpose::STANDARD.encode_slice(nonce, &mut output).unwrap();
 
     let output = str::from_utf8(&output[..size]).unwrap();
 
@@ -152,7 +153,7 @@ pub fn calculate_ws_accept(key: &[u8]) -
 
     let mut output = [0; WS_ACCEPT_MAX];
 
-    let size = base64::encode_config_slice(digest, base64::STANDARD, &mut output);
+    let size = base64::engine::general_purpose::STANDARD.encode_slice(digest, &mut output).unwrap();
 
     let output = match str::from_utf8(&output[..size]) {
         Ok(s) => s,
