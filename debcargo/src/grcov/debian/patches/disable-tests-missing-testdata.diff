Index: grcov/src/lib.rs
===================================================================
--- grcov.orig/src/lib.rs
+++ grcov/src/lib.rs
@@ -427,7 +427,7 @@ mod tests {
         assert!(func.executed);
     }
 
-    #[test]
+    /*#[test]
     fn test_merge_relative_path() {
         let mut f = File::open("./test/relative_path/relative_path.info")
             .expect("Failed to open lcov file");
@@ -475,5 +475,5 @@ mod tests {
         let result_map = Arc::try_unwrap(result_map).unwrap().into_inner().unwrap();
 
         assert!(result_map.len() == 3);
-    }
+    }*/
 }
Index: grcov/src/reader.rs
===================================================================
--- grcov.orig/src/reader.rs
+++ grcov/src/reader.rs
@@ -1225,7 +1225,7 @@ mod tests {
 
     fn from_path(gcno: &mut Gcno, typ: FileType, path: &str) {
         let path = PathBuf::from(path);
-        let mut f = File::open(&path).unwrap();
+        let mut f = File::open(&path).expect(&format!("Could not open {:?} ",path));
         let mut buf = Vec::new();
         f.read_to_end(&mut buf).unwrap();
         gcno.read(typ, buf, path.to_str().unwrap()).unwrap();
@@ -1247,7 +1247,7 @@ mod tests {
         input
     }
 
-    #[test]
+    /*#[test]
     fn test_reader_gcno() {
         let mut gcno = Gcno::new();
         from_path(&mut gcno, FileType::Gcno, "test/llvm/reader.gcno");
@@ -1514,5 +1514,5 @@ mod tests {
         )];
 
         assert_eq!(result, expected);
-    }
+    }*/
 }
Index: grcov/src/output.rs
===================================================================
--- grcov.orig/src/output.rs
+++ grcov/src/output.rs
@@ -764,7 +764,7 @@ mod tests {
         assert!(results.contains("FN:3,hello_world\n"));
     }
 
-    #[test]
+    /*#[test]
     fn test_covdir() {
         let tmp_dir = tempfile::tempdir().expect("Failed to create temporary directory");
         let file_name = "test_covdir.json";
@@ -816,7 +816,7 @@ mod tests {
         let expected: Value = serde_json::from_str(&read_file(&expected_path)).unwrap();
 
         assert_eq!(results, expected);
-    }
+    }*/
 
     #[test]
     fn test_coveralls_service_job_id() {
Index: grcov/src/parser.rs
===================================================================
--- grcov.orig/src/parser.rs
+++ grcov/src/parser.rs
@@ -829,7 +829,7 @@ mod tests {
         assert_eq!(l, "".as_bytes().to_vec());
     }
 
-    #[test]
+    /*#[test]
     fn test_lcov_parser() {
         let mut f = File::open("./test/prova.info").expect("Failed to open lcov file");
         let mut buf = Vec::new();
@@ -912,9 +912,9 @@ mod tests {
         let func = result.functions.get("logConsoleMessage").unwrap();
         assert_eq!(func.start, 21);
         assert!(!func.executed);
-    }
+    }*/
 
-    #[test]
+    /*#[test]
     fn test_lcov_parser_with_branch_parsing() {
         // Parse the same file, but with branch parsing enabled.
         let mut f = File::open("./test/prova.info").expect("Failed to open lcov file");
@@ -1931,9 +1931,9 @@ mod tests {
             .unwrap();
         assert_eq!(func.start, 188);
         assert!(!func.executed);
-    }
+    }*/
 
-    #[test]
+    /*#[test]
     fn test_parser_jacoco_xml_basic() {
         let mut lines: BTreeMap<u32, u64> = BTreeMap::new();
         lines.insert(1, 0);
@@ -2035,5 +2035,5 @@ mod tests {
             .expect("Failed to open xml file");
         let file = BufReader::new(&f);
         let _results = parse_jacoco_xml_report(file).unwrap();
-    }
+    }*/
 }
Index: grcov/src/path_rewriting.rs
===================================================================
--- grcov.orig/src/path_rewriting.rs
+++ grcov/src/path_rewriting.rs
@@ -556,7 +556,7 @@ mod tests {
         assert_eq!(count, 1);
     }
 
-    #[cfg(unix)]
+    /*#[cfg(unix)]
     #[test]
     fn test_rewrite_paths_ignore_non_existing_files() {
         let mut result_map: CovResultMap = FxHashMap::default();
@@ -614,7 +614,7 @@ mod tests {
             assert_eq!(result, empty_result!());
         }
         assert_eq!(count, 1);
-    }
+    }*/
 
     #[cfg(unix)]
     #[test]
@@ -933,7 +933,7 @@ mod tests {
         .any(|_| false);
     }
 
-    #[cfg(unix)]
+    /*#[cfg(unix)]
     #[test]
     fn test_rewrite_paths_rewrite_path_using_absolute_source_directory() {
         let mut result_map: CovResultMap = FxHashMap::default();
@@ -1041,9 +1041,9 @@ mod tests {
             assert_eq!(result, empty_result!());
         }
         assert_eq!(count, 1);
-    }
+    }*/
 
-    #[cfg(unix)]
+    /*#[cfg(unix)]
     #[test]
     fn test_rewrite_paths_rewrite_path_for_java_and_rust() {
         let mut result_map: CovResultMap = FxHashMap::default();
@@ -1147,9 +1147,9 @@ mod tests {
             assert_eq!(result, empty_result!());
         }
         assert_eq!(count, 1);
-    }
+    }*/
 
-    #[cfg(unix)]
+    /*#[cfg(unix)]
     #[test]
     fn test_rewrite_paths_rewrite_path_and_remove_prefix() {
         let mut result_map: CovResultMap = FxHashMap::default();
@@ -1208,7 +1208,7 @@ mod tests {
             assert_eq!(result, empty_result!());
         }
         assert_eq!(count, 1);
-    }
+    }*/
 
     #[cfg(unix)]
     #[test]
@@ -1262,7 +1262,7 @@ mod tests {
         assert_eq!(count, 1);
     }
 
-    #[cfg(unix)]
+    /*#[cfg(unix)]
     #[test]
     fn test_rewrite_paths_rewrite_path_using_mapping_and_ignore_non_existing() {
         let mut result_map: CovResultMap = FxHashMap::default();
@@ -1290,7 +1290,7 @@ mod tests {
             assert_eq!(result, empty_result!());
         }
         assert_eq!(count, 1);
-    }
+    }*/
 
     #[cfg(windows)]
     #[test]
@@ -1322,7 +1322,7 @@ mod tests {
         assert_eq!(count, 1);
     }
 
-    #[cfg(unix)]
+    /*#[cfg(unix)]
     #[test]
     fn test_rewrite_paths_rewrite_path_using_mapping_and_remove_prefix() {
         let mut result_map: CovResultMap = FxHashMap::default();
@@ -1470,9 +1470,9 @@ mod tests {
             assert_eq!(result, empty_result!());
         }
         assert_eq!(count, 1);
-    }
+    }*/
 
-    #[cfg(unix)]
+    /*#[cfg(unix)]
     #[test]
     fn test_rewrite_paths_rewrite_path_using_mapping_and_source_directory_and_remove_prefix() {
         let mut result_map: CovResultMap = FxHashMap::default();
@@ -1530,7 +1530,7 @@ mod tests {
             assert_eq!(result, empty_result!());
         }
         assert_eq!(count, 1);
-    }
+    }*/
 
     #[test]
     fn test_rewrite_paths_only_covered() {
@@ -1619,7 +1619,7 @@ mod tests {
         assert!(!has_no_parent("/foo/bar.oof"));
     }
 
-    #[cfg(unix)]
+    /*#[cfg(unix)]
     #[test]
     fn test_rewrite_paths_filter_lines_and_branches() {
         let mut result_map: CovResultMap = FxHashMap::default();
@@ -1703,5 +1703,5 @@ mod tests {
             }
         }
         assert_eq!(count, 1);
-    }
+    }*/
 }
Index: grcov/src/producer.rs
===================================================================
--- grcov.orig/src/producer.rs
+++ grcov/src/producer.rs
@@ -648,7 +648,7 @@ mod tests {
         }
     }
 
-    #[test]
+    /*#[test]
     fn test_dir_producer() {
         let (sender, receiver) = unbounded();
 
@@ -766,9 +766,9 @@ mod tests {
                 .unwrap(),
             "modules/zlib/src/zlib.h"
         );
-    }
+    }*/
 
-    #[test]
+    /*#[test]
     fn test_dir_producer_multiple_directories() {
         let (sender, receiver) = unbounded();
 
@@ -789,9 +789,9 @@ mod tests {
 
         check_produced(tmp_path, &receiver, expected);
         assert!(mapping.is_none());
-    }
+    }*/
 
-    #[test]
+    /*#[test]
     fn test_dir_producer_directory_with_gcno_symlinks() {
         let (sender, receiver) = unbounded();
 
@@ -1661,5 +1661,5 @@ mod tests {
             !Archive::check_file(file.as_mut(), &Archive::is_info),
             "Not an info file expected"
         );
-    }
+    }*/
 }
