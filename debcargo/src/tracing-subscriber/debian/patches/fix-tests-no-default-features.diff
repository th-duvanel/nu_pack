Index: tracing-subscriber/Cargo.toml
===================================================================
--- tracing-subscriber.orig/Cargo.toml
+++ tracing-subscriber/Cargo.toml
@@ -49,18 +49,22 @@ rustdoc-args = [
 [[bench]]
 name = "filter"
 harness = false
+required-features = ["env-filter", "std"]
 
 [[bench]]
 name = "filter_log"
 harness = false
+required-features = ["env-filter", "std"]
 
 [[bench]]
 name = "fmt"
 harness = false
+required-features = ["fmt", "std"]
 
 [[bench]]
 name = "enter"
 harness = false
+required-features = ["fmt", "std"]
 
 [dependencies.chrono]
 version = "0.4.26"
Index: tracing-subscriber/src/fmt/fmt_layer.rs
===================================================================
--- tracing-subscriber.orig/src/fmt/fmt_layer.rs
+++ tracing-subscriber/src/fmt/fmt_layer.rs
@@ -1282,6 +1282,7 @@ mod test {
         re.replace_all(s.as_str(), "timing").to_string()
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn format_error_print_to_stderr() {
         struct AlwaysError;
@@ -1319,6 +1320,7 @@ mod test {
         );
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn format_error_ignore_if_log_internal_errors_is_false() {
         struct AlwaysError;
@@ -1345,6 +1347,7 @@ mod test {
         assert_eq!("", actual.as_str());
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn synthesize_span_none() {
         let make_writer = MockMakeWriter::default();
@@ -1364,6 +1367,7 @@ mod test {
         assert_eq!("", actual.as_str());
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn synthesize_span_active() {
         let make_writer = MockMakeWriter::default();
@@ -1387,6 +1391,7 @@ mod test {
         );
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn synthesize_span_close() {
         let make_writer = MockMakeWriter::default();
@@ -1409,6 +1414,7 @@ mod test {
         );
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn synthesize_span_close_no_timing() {
         let make_writer = MockMakeWriter::default();
@@ -1432,6 +1438,7 @@ mod test {
         );
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn synthesize_span_full() {
         let make_writer = MockMakeWriter::default();
@@ -1457,6 +1464,7 @@ mod test {
         );
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn make_writer_based_on_meta() {
         struct MakeByTarget {
Index: tracing-subscriber/src/fmt/format/mod.rs
===================================================================
--- tracing-subscriber.orig/src/fmt/format/mod.rs
+++ tracing-subscriber/src/fmt/format/mod.rs
@@ -1769,6 +1769,7 @@ pub(super) mod test {
         assert_info_hello(subscriber, make_writer, "hello\n")
     }
 
+    #[cfg(feature = "ansi")]
     fn test_ansi<T>(
         is_ansi: bool,
         expected: &str,
@@ -1791,13 +1792,14 @@ pub(super) mod test {
         builder: crate::fmt::SubscriberBuilder<DefaultFields, Format<T>>,
     ) where
         Format<T, MockTime>: FormatEvent<crate::Registry, DefaultFields>,
-        T: Send + Sync,
+        T: Send + Sync + 'static,
     {
         let make_writer = MockMakeWriter::default();
-        let subscriber = builder.with_writer(make_writer).with_timer(MockTime);
+        let subscriber = builder.with_writer(make_writer.clone()).with_timer(MockTime);
         run_test(subscriber, make_writer, expected)
     }
 
+    #[cfg(feature = "ansi")]
     fn test_without_level<T>(
         expected: &str,
         builder: crate::fmt::SubscriberBuilder<DefaultFields, Format<T>>,
@@ -1814,6 +1816,7 @@ pub(super) mod test {
         run_test(subscriber, make_writer, expected);
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn with_line_number_and_file_name() {
         let make_writer = MockMakeWriter::default();
@@ -1839,6 +1842,7 @@ pub(super) mod test {
         assert!(expected.is_match(&res),"string {:?} did not match pattern {:?}",res,expected);
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn with_line_number() {
         let make_writer = MockMakeWriter::default();
@@ -1858,6 +1862,7 @@ pub(super) mod test {
         assert!(expected.is_match(&res));
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn with_filename() {
         let make_writer = MockMakeWriter::default();
@@ -1874,6 +1879,7 @@ pub(super) mod test {
         assert_info_hello(subscriber, make_writer, expected);
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn with_thread_ids() {
         let make_writer = MockMakeWriter::default();
@@ -1888,6 +1894,7 @@ pub(super) mod test {
         assert_info_hello_ignore_numeric(subscriber, make_writer, expected);
     }
 
+    #[cfg(feature = "ansi")]
     #[test]
     fn pretty_default() {
         let make_writer = MockMakeWriter::default();
@@ -1932,6 +1939,7 @@ pub(super) mod test {
         assert_eq!(expected, result_cleaned)
     }
 
+    #[cfg(feature = "ansi")]
     fn test_overridden_parents<T>(
         expected: &str,
         builder: crate::fmt::SubscriberBuilder<DefaultFields, Format<T>>,
@@ -1955,6 +1963,7 @@ pub(super) mod test {
         assert_eq!(expected, make_writer.get_string());
     }
 
+    #[cfg(feature = "ansi")]
     fn test_overridden_parents_in_scope<T>(
         expected1: &str,
         expected2: &str,
@@ -1994,6 +2003,7 @@ pub(super) mod test {
     mod default {
         use super::*;
 
+        #[cfg(feature = "ansi")]
         #[test]
         fn with_thread_ids() {
             let make_writer = MockMakeWriter::default();
@@ -2029,18 +2039,21 @@ pub(super) mod test {
             test_without_ansi(expected, crate::fmt::Subscriber::builder())
         }
 
+        #[cfg(feature = "ansi")]
         #[test]
         fn without_level() {
             let expected = "fake time tracing_subscriber::fmt::format::test: hello\n";
             test_without_level(expected, crate::fmt::Subscriber::builder())
         }
 
+        #[cfg(feature = "ansi")]
         #[test]
         fn overridden_parents() {
             let expected = "fake time span1{span=1}:span2{span=2}: tracing_subscriber::fmt::format::test: hello\n";
             test_overridden_parents(expected, crate::fmt::Subscriber::builder())
         }
 
+        #[cfg(feature = "ansi")]
         #[test]
         fn overridden_parents_in_scope() {
             test_overridden_parents_in_scope(
@@ -2075,18 +2088,21 @@ pub(super) mod test {
             test_without_ansi(expected, crate::fmt::Subscriber::builder().compact())
         }
 
+        #[cfg(feature = "ansi")]
         #[test]
         fn without_level() {
             let expected = "fake time tracing_subscriber::fmt::format::test: hello\n";
             test_without_level(expected, crate::fmt::Subscriber::builder().compact());
         }
 
+        #[cfg(feature = "ansi")]
         #[test]
         fn overridden_parents() {
             let expected = "fake time span1:span2: tracing_subscriber::fmt::format::test: hello span=1 span=2\n";
             test_overridden_parents(expected, crate::fmt::Subscriber::builder().compact())
         }
 
+        #[cfg(feature = "ansi")]
         #[test]
         fn overridden_parents_in_scope() {
             test_overridden_parents_in_scope(
@@ -2100,6 +2116,7 @@ pub(super) mod test {
     mod pretty {
         use super::*;
 
+        #[cfg(feature = "ansi")]
         #[test]
         fn pretty_default() {
             let make_writer = MockMakeWriter::default();
Index: tracing-subscriber/tests/env_filter/main.rs
===================================================================
--- tracing-subscriber.orig/tests/env_filter/main.rs
+++ tracing-subscriber/tests/env_filter/main.rs
@@ -1,4 +1,4 @@
-#![cfg(feature = "env-filter")]
+#![cfg(all(feature = "env-filter", feature = "registry"))]
 
 mod per_layer;
 
