--- a/Cargo.toml
+++ b/Cargo.toml
@@ -36,7 +36,2 @@
 
-[dependencies.serde-hjson]
-version = "0.9"
-optional = true
-default-features = false
-
 [dependencies.serde_json]
@@ -63,4 +58,3 @@
 [features]
-default = ["toml", "json", "yaml", "hjson", "ini"]
-hjson = ["serde-hjson"]
+default = ["toml", "json", "yaml", "ini"]
 ini = ["rust-ini"]
--- a/src/file/format/hjson.rs
+++ /dev/null
@@ -1,55 +0,0 @@
-use serde_hjson;
-use source::Source;
-use std::collections::HashMap;
-use std::error::Error;
-use value::{Value, ValueKind};
-
-pub fn parse(
-    uri: Option<&String>,
-    text: &str,
-) -> Result<HashMap<String, Value>, Box<dyn Error + Send + Sync>> {
-    // Parse a JSON object value from the text
-    // TODO: Have a proper error fire if the root of a file is ever not a Table
-    let value = from_hjson_value(uri, &serde_hjson::from_str(text)?);
-    match value.kind {
-        ValueKind::Table(map) => Ok(map),
-
-        _ => Ok(HashMap::new()),
-    }
-}
-
-fn from_hjson_value(uri: Option<&String>, value: &serde_hjson::Value) -> Value {
-    match *value {
-        serde_hjson::Value::String(ref value) => Value::new(uri, ValueKind::String(value.clone())),
-
-        serde_hjson::Value::I64(value) => Value::new(uri, ValueKind::Integer(value)),
-
-        serde_hjson::Value::U64(value) => Value::new(uri, ValueKind::Integer(value as i64)),
-
-        serde_hjson::Value::F64(value) => Value::new(uri, ValueKind::Float(value)),
-
-        serde_hjson::Value::Bool(value) => Value::new(uri, ValueKind::Boolean(value)),
-
-        serde_hjson::Value::Object(ref table) => {
-            let mut m = HashMap::new();
-
-            for (key, value) in table {
-                m.insert(key.clone(), from_hjson_value(uri, value));
-            }
-
-            Value::new(uri, ValueKind::Table(m))
-        }
-
-        serde_hjson::Value::Array(ref array) => {
-            let mut l = Vec::new();
-
-            for value in array {
-                l.push(from_hjson_value(uri, value));
-            }
-
-            Value::new(uri, ValueKind::Array(l))
-        }
-
-        serde_hjson::Value::Null => Value::new(uri, ValueKind::Nil),
-    }
-}
--- a/src/file/format/ini.rs
+++ b/src/file/format/ini.rs
@@ -13,3 +13,3 @@
     for (sec, prop) in i.iter() {
-        match *sec {
+        match sec {
             Some(ref sec) => {
@@ -17,5 +17,5 @@
                 for (k, v) in prop.iter() {
-                    sec_map.insert(k.clone(), Value::new(uri, ValueKind::String(v.clone())));
+                    sec_map.insert(k.to_owned(), Value::new(uri, ValueKind::String(v.to_owned())));
                 }
-                map.insert(sec.clone(), Value::new(uri, ValueKind::Table(sec_map)));
+                map.insert((*sec).to_owned(), Value::new(uri, ValueKind::Table(sec_map)));
             }
@@ -23,3 +23,3 @@
                 for (k, v) in prop.iter() {
-                    map.insert(k.clone(), Value::new(uri, ValueKind::String(v.clone())));
+                    map.insert(k.to_owned(), Value::new(uri, ValueKind::String(v.to_owned())));
                 }
--- a/src/file/format/mod.rs
+++ b/src/file/format/mod.rs
@@ -18,5 +18,2 @@
 
-#[cfg(feature = "hjson")]
-mod hjson;
-
 #[cfg(feature = "ini")]
@@ -38,5 +35,2 @@
 
-    /// HJSON (parsed with serde_hjson)
-    #[cfg(feature = "hjson")]
-    Hjson,
     /// INI (parsed with rust_ini)
@@ -61,5 +55,2 @@
 
-        #[cfg(feature = "hjson")]
-        formats.insert(FileFormat::Hjson, vec!["hjson"]);
-
         #[cfg(feature = "ini")]
@@ -99,5 +90,2 @@
 
-            #[cfg(feature = "hjson")]
-            FileFormat::Hjson => hjson::parse(uri, text),
-
             #[cfg(feature = "ini")]
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -47,5 +47,2 @@
 
-#[cfg(feature = "hjson")]
-extern crate serde_hjson;
-
 #[cfg(feature = "ini")]
--- a/tests/Settings-invalid.hjson
+++ /dev/null
@@ -1,4 +0,0 @@
-{
-  ok: true,
-  error
-}
--- a/tests/Settings.hjson
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-  debug: true
-  production: false
-  arr: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
-  place: {
-    name: Torre di Pisa
-    longitude: 43.7224985
-    latitude: 10.3970522
-    favorite: false
-    reviews: 3866
-    rating: 4.5
-    creator: {
-      name: John Smith
-    }
-  }
-}
--- a/tests/datetime.rs
+++ b/tests/datetime.rs
@@ -3,3 +3,2 @@
     feature = "json",
-    feature = "hjson",
     feature = "yaml",
@@ -41,11 +40,2 @@
             r#"
-            {
-                "hjson_datetime": "2017-05-10T02:14:53Z"
-            }
-            "#,
-            FileFormat::Hjson,
-        ))
-        .unwrap()
-        .merge(File::from_str(
-            r#"
                 ini_datetime = 2017-05-10T02:14:53Z
@@ -77,7 +67,2 @@
 
-    // HJSON
-    let date: String = s.get("hjson_datetime").unwrap();
-
-    assert_eq!(&date, "2017-05-10T02:14:53Z");
-
     // INI
@@ -107,7 +92,2 @@
 
-    // HJSON
-    let date: DateTime<Utc> = s.get("hjson_datetime").unwrap();
-
-    assert_eq!(date, Utc.ymd(2017, 5, 10).and_hms(2, 14, 53));
-
     // INI
--- a/tests/file.rs
+++ b/tests/file.rs
@@ -51,3 +51,3 @@
     let mut c = Config::default();
-    c.merge(File::with_name("tests/Settings.json")).unwrap();
+    c.merge(File::with_name("tests/Settings.yaml")).unwrap();
 
--- a/tests/file_hjson.rs
+++ /dev/null
@@ -1,80 +0,0 @@
-#![cfg(feature = "hjson")]
-
-extern crate config;
-extern crate float_cmp;
-extern crate serde;
-
-#[macro_use]
-extern crate serde_derive;
-
-use config::*;
-use float_cmp::ApproxEqUlps;
-use std::collections::HashMap;
-use std::path::PathBuf;
-
-#[derive(Debug, Deserialize)]
-struct Place {
-    name: String,
-    longitude: f64,
-    latitude: f64,
-    favorite: bool,
-    telephone: Option<String>,
-    reviews: u64,
-    creator: HashMap<String, Value>,
-    rating: Option<f32>,
-}
-
-#[derive(Debug, Deserialize)]
-struct Settings {
-    debug: f64,
-    production: Option<String>,
-    place: Place,
-    #[serde(rename = "arr")]
-    elements: Vec<String>,
-}
-
-fn make() -> Config {
-    let mut c = Config::default();
-    c.merge(File::new("tests/Settings", FileFormat::Hjson))
-        .unwrap();
-
-    c
-}
-
-#[test]
-fn test_file() {
-    let c = make();
-
-    // Deserialize the entire file as single struct
-    let s: Settings = c.try_into().unwrap();
-
-    assert!(s.debug.approx_eq_ulps(&1.0, 2));
-    assert_eq!(s.production, Some("false".to_string()));
-    assert_eq!(s.place.name, "Torre di Pisa");
-    assert!(s.place.longitude.approx_eq_ulps(&43.7224985, 2));
-    assert!(s.place.latitude.approx_eq_ulps(&10.3970522, 2));
-    assert_eq!(s.place.favorite, false);
-    assert_eq!(s.place.reviews, 3866);
-    assert_eq!(s.place.rating, Some(4.5));
-    assert_eq!(s.place.telephone, None);
-    assert_eq!(s.elements.len(), 10);
-    assert_eq!(s.elements[3], "4".to_string());
-    assert_eq!(
-        s.place.creator["name"].clone().into_str().unwrap(),
-        "John Smith".to_string()
-    );
-}
-
-#[test]
-fn test_error_parse() {
-    let mut c = Config::default();
-    let res = c.merge(File::new("tests/Settings-invalid", FileFormat::Hjson));
-
-    let path: PathBuf = ["tests", "Settings-invalid.hjson"].iter().collect();
-
-    assert!(res.is_err());
-    assert_eq!(
-        res.unwrap_err().to_string(),
-        format!("Found a punctuator where a key name was expected (check your syntax or use quotes if the key name includes {{}}[],: or whitespace) at line 4 column 1 in {}", path.display())
-    );
-}
--- a/tests/file_ini.rs
+++ b/tests/file_ini.rs
@@ -66,3 +66,3 @@
         format!(
-            r#"2:0 Expecting "[Some('='), Some(':')]" but found EOF. in {}"#,
+            r#"2:0 expecting "[Some('='), Some(':')]" but found EOF. in {}"#,
             path.display()
