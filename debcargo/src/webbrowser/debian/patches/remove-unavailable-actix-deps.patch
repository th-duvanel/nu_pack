Index: webbrowser/Cargo.toml
===================================================================
--- webbrowser.orig/Cargo.toml
+++ webbrowser/Cargo.toml
@@ -31,12 +31,6 @@ version = "0.4"
 [dependencies.url]
 version = "2"
 
-[dev-dependencies.actix-files]
-version = "0.6"
-
-[dev-dependencies.actix-web]
-version = "4"
-
 [dev-dependencies.crossbeam-channel]
 version = "0.5"
 
Index: webbrowser/tests/common.rs
===================================================================
--- webbrowser.orig/tests/common.rs
+++ webbrowser/tests/common.rs
@@ -1,5 +1,5 @@
-use actix_files as fs;
-use actix_web::{web, App, HttpRequest, HttpResponse, HttpServer, Responder};
+//use actix_files as fs;
+//use actix_web::{web, App, HttpRequest, HttpResponse, HttpServer, Responder};
 use crossbeam_channel as cbc;
 use rand::RngCore;
 use std::{io::Write, path::PathBuf, sync::Arc};
@@ -11,7 +11,7 @@
     tx: Arc<cbc::Sender<String>>,
 }
 
-async fn log_handler(req: HttpRequest, data: web::Data<AppState>) -> impl Responder {
+/*async fn log_handler(req: HttpRequest, data: web::Data<AppState>) -> impl Responder {
     if data.tx.send(req.uri().to_string()).is_err() {
         panic!("channel send failed");
     }
@@ -25,9 +25,9 @@
             .content_type("text/html; charset=utf-8")
             .body(format!("<html><body><p>URI: {}</p><script type=\"text/javascript>window.close();</script></body></html>", req.uri()))
     }
-}
+}*/
 
-async fn delayed_response(req: HttpRequest) -> impl Responder {
+/*async fn delayed_response(req: HttpRequest) -> impl Responder {
     let qs = req.query_string();
     let ms: u64 = qs
         .replace("ms=", "")
@@ -40,9 +40,9 @@
             "<html><body><p>Delayed by {}ms</p></body></html>",
             qs
         ))
-}
+}*/
 
-pub async fn check_request_received_using<F>(uri: String, host: &str, op: F)
+/*pub async fn check_request_received_using<F>(uri: String, host: &str, op: F)
 where
     F: FnOnce(&str, u16),
 {
@@ -89,17 +89,17 @@
 
     // stop the server
     server_handle.stop(true).await;
-}
+}*/
 
-#[allow(dead_code)]
+/*#[allow(dead_code)]
 pub async fn check_request_received(browser: Browser, uri: String) {
     check_request_received_using(uri, "127.0.0.1", |url, _port| {
         open_browser(browser, url).expect("failed to open browser");
     })
     .await;
-}
+}*/
 
-#[allow(dead_code)]
+/*#[allow(dead_code)]
 pub async fn check_local_file<F>(browser: Browser, html_dir: Option<PathBuf>, url_op: F)
 where
     F: FnOnce(&PathBuf) -> String,
@@ -126,13 +126,13 @@
     })
     .await;
     let _ = std::fs::remove_file(&pb);
-}
+}*/
 
-#[allow(dead_code)]
+/*#[allow(dead_code)]
 pub async fn check_browser(browser: Browser, platform: &str) {
     check_request_received(browser, format!("/{}", platform)).await;
     check_request_received(browser, format!("/{}/ðŸ˜€ðŸ˜€ðŸ˜€", platform)).await;
-}
+}*/
 
 const URI_PNG_1PX: &str = "/img/1px.png";
 
Index: webbrowser/tests/test_unix.rs
===================================================================
--- webbrowser.orig/tests/test_unix.rs
+++ webbrowser/tests/test_unix.rs
@@ -9,11 +9,11 @@ mod tests {
     use serial_test::serial;
     use webbrowser::Browser;
 
-    #[tokio::test(flavor = "multi_thread", worker_threads = 2)]
+    /*#[tokio::test(flavor = "multi_thread", worker_threads = 2)]
     #[serial]
     async fn test_open_default() {
         check_browser(Browser::Default, TEST_PLATFORM).await;
-    }
+    }*/
 
     #[test]
     fn test_existence_default() {
@@ -25,7 +25,7 @@ mod tests {
         assert!(!Browser::Safari.exists(), "should not have found Safari");
     }
 
-    #[cfg(not(feature = "hardened"))]
+    /*#[cfg(not(feature = "hardened"))]
     #[tokio::test(flavor = "multi_thread", worker_threads = 2)]
     #[serial]
     async fn test_local_file_abs_path() {
@@ -60,7 +60,7 @@ mod tests {
                 .to_string()
         })
         .await;
-    }
+    }*/
 
     #[cfg(feature = "hardened")]
     #[test]
Index: webbrowser/tests/test_wasm.rs
===================================================================
--- webbrowser.orig/tests/test_wasm.rs
+++ webbrowser/tests/test_wasm.rs
@@ -5,14 +5,14 @@ mod common;
 mod tests {
     const TEST_PLATFORM: &str = "wasm32";
 
-    use super::common::check_request_received_using;
+    //use super::common::check_request_received_using;
     use std::fs;
     use std::path::PathBuf;
 
     // to run this test, run it as:
     // cargo test --test test_wasm32 -- --ignored
     //
-    #[ignore]
+    /*#[ignore]
     #[tokio::test(flavor = "multi_thread", worker_threads = 2)]
     async fn test_wasm32() {
         let uri = &format!("/{}", TEST_PLATFORM);
@@ -43,5 +43,5 @@ mod tests {
             status.expect("browser open failed");
         })
         .await;
-    }
+    }*/
 }
